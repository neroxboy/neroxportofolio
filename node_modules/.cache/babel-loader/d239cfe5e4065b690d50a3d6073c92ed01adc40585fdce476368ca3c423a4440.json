{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeSignedDeviceIdentity = exports.configureSuccessfulPairing = exports.generateRegistrationNode = exports.generateLoginNode = exports.generateMobileNode = void 0;\nconst boom_1 = require(\"@hapi/boom\");\nconst crypto_1 = require(\"crypto\");\nconst WAProto_1 = require(\"../../WAProto\");\nconst Defaults_1 = require(\"../Defaults\");\nconst WABinary_1 = require(\"../WABinary\");\nconst crypto_2 = require(\"./crypto\");\nconst generics_1 = require(\"./generics\");\nconst signal_1 = require(\"./signal\");\nconst getUserAgent = config => {\n  var _a, _b;\n  const osVersion = config.mobile ? '15.3.1' : '0.1';\n  const version = config.mobile ? [2, 24, 6] : config.version;\n  const device = config.mobile ? 'iPhone_7' : 'Desktop';\n  const manufacturer = config.mobile ? 'Apple' : '';\n  const platform = config.mobile ? WAProto_1.proto.ClientPayload.UserAgent.Platform.IOS : WAProto_1.proto.ClientPayload.UserAgent.Platform.WEB;\n  const phoneId = config.mobile ? {\n    phoneId: config.auth.creds.phoneId\n  } : {};\n  return {\n    appVersion: {\n      primary: version[0],\n      secondary: version[1],\n      tertiary: version[2]\n    },\n    platform,\n    releaseChannel: WAProto_1.proto.ClientPayload.UserAgent.ReleaseChannel.RELEASE,\n    mcc: ((_a = config.auth.creds.registration) === null || _a === void 0 ? void 0 : _a.phoneNumberMobileCountryCode) || '000',\n    mnc: ((_b = config.auth.creds.registration) === null || _b === void 0 ? void 0 : _b.phoneNumberMobileNetworkCode) || '000',\n    osVersion: osVersion,\n    manufacturer,\n    device,\n    osBuildNumber: osVersion,\n    localeLanguageIso6391: 'en',\n    localeCountryIso31661Alpha2: 'US',\n    ...phoneId\n  };\n};\nconst PLATFORM_MAP = {\n  'Mac OS': WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.DARWIN,\n  'Windows': WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.WIN32\n};\nconst getWebInfo = config => {\n  let webSubPlatform = WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.WEB_BROWSER;\n  if (config.syncFullHistory && PLATFORM_MAP[config.browser[0]]) {\n    webSubPlatform = PLATFORM_MAP[config.browser[0]];\n  }\n  return {\n    webSubPlatform\n  };\n};\nconst getClientPayload = config => {\n  const payload = {\n    connectType: WAProto_1.proto.ClientPayload.ConnectType.WIFI_UNKNOWN,\n    connectReason: WAProto_1.proto.ClientPayload.ConnectReason.USER_ACTIVATED,\n    userAgent: getUserAgent(config)\n  };\n  if (!config.mobile) {\n    payload.webInfo = getWebInfo(config);\n  }\n  return payload;\n};\nconst generateMobileNode = config => {\n  if (!config.auth.creds) {\n    throw new boom_1.Boom('No registration data found', {\n      data: config\n    });\n  }\n  const payload = {\n    ...getClientPayload(config),\n    sessionId: Math.floor(Math.random() * 999999999 + 1),\n    shortConnect: true,\n    connectAttemptCount: 0,\n    device: 0,\n    dnsSource: {\n      appCached: false,\n      dnsMethod: WAProto_1.proto.ClientPayload.DNSSource.DNSResolutionMethod.SYSTEM\n    },\n    passive: false,\n    pushName: 'test',\n    username: Number(`${config.auth.creds.registration.phoneNumberCountryCode}${config.auth.creds.registration.phoneNumberNationalNumber}`)\n  };\n  return WAProto_1.proto.ClientPayload.fromObject(payload);\n};\nexports.generateMobileNode = generateMobileNode;\nconst generateLoginNode = (userJid, config) => {\n  const {\n    user,\n    device\n  } = (0, WABinary_1.jidDecode)(userJid);\n  const payload = {\n    ...getClientPayload(config),\n    passive: true,\n    username: +user,\n    device: device\n  };\n  return WAProto_1.proto.ClientPayload.fromObject(payload);\n};\nexports.generateLoginNode = generateLoginNode;\nconst getPlatformType = platform => {\n  const platformType = platform.toUpperCase();\n  return WAProto_1.proto.DeviceProps.PlatformType[platformType] || WAProto_1.proto.DeviceProps.PlatformType.DESKTOP;\n};\nconst generateRegistrationNode = ({\n  registrationId,\n  signedPreKey,\n  signedIdentityKey\n}, config) => {\n  // the app version needs to be md5 hashed\n  // and passed in\n  const appVersionBuf = (0, crypto_1.createHash)('md5').update(config.version.join('.')) // join as string\n  .digest();\n  const companion = {\n    os: config.browser[0],\n    platformType: getPlatformType(config.browser[1]),\n    requireFullSync: config.syncFullHistory\n  };\n  const companionProto = WAProto_1.proto.DeviceProps.encode(companion).finish();\n  const registerPayload = {\n    ...getClientPayload(config),\n    passive: false,\n    devicePairingData: {\n      buildHash: appVersionBuf,\n      deviceProps: companionProto,\n      eRegid: (0, generics_1.encodeBigEndian)(registrationId),\n      eKeytype: Defaults_1.KEY_BUNDLE_TYPE,\n      eIdent: signedIdentityKey.public,\n      eSkeyId: (0, generics_1.encodeBigEndian)(signedPreKey.keyId, 3),\n      eSkeyVal: signedPreKey.keyPair.public,\n      eSkeySig: signedPreKey.signature\n    }\n  };\n  return WAProto_1.proto.ClientPayload.fromObject(registerPayload);\n};\nexports.generateRegistrationNode = generateRegistrationNode;\nconst configureSuccessfulPairing = (stanza, {\n  advSecretKey,\n  signedIdentityKey,\n  signalIdentities\n}) => {\n  const msgId = stanza.attrs.id;\n  const pairSuccessNode = (0, WABinary_1.getBinaryNodeChild)(stanza, 'pair-success');\n  const deviceIdentityNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'device-identity');\n  const platformNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'platform');\n  const deviceNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'device');\n  const businessNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'biz');\n  if (!deviceIdentityNode || !deviceNode) {\n    throw new boom_1.Boom('Missing device-identity or device in pair success node', {\n      data: stanza\n    });\n  }\n  const bizName = businessNode === null || businessNode === void 0 ? void 0 : businessNode.attrs.name;\n  const jid = deviceNode.attrs.jid;\n  const {\n    details,\n    hmac\n  } = WAProto_1.proto.ADVSignedDeviceIdentityHMAC.decode(deviceIdentityNode.content);\n  // check HMAC matches\n  const advSign = (0, crypto_2.hmacSign)(details, Buffer.from(advSecretKey, 'base64'));\n  if (Buffer.compare(hmac, advSign) !== 0) {\n    throw new boom_1.Boom('Invalid account signature');\n  }\n  const account = WAProto_1.proto.ADVSignedDeviceIdentity.decode(details);\n  const {\n    accountSignatureKey,\n    accountSignature,\n    details: deviceDetails\n  } = account;\n  // verify the device signature matches\n  const accountMsg = Buffer.concat([Buffer.from([6, 0]), deviceDetails, signedIdentityKey.public]);\n  if (!crypto_2.Curve.verify(accountSignatureKey, accountMsg, accountSignature)) {\n    throw new boom_1.Boom('Failed to verify account signature');\n  }\n  // sign the details with our identity key\n  const deviceMsg = Buffer.concat([Buffer.from([6, 1]), deviceDetails, signedIdentityKey.public, accountSignatureKey]);\n  account.deviceSignature = crypto_2.Curve.sign(signedIdentityKey.private, deviceMsg);\n  const identity = (0, signal_1.createSignalIdentity)(jid, accountSignatureKey);\n  const accountEnc = (0, exports.encodeSignedDeviceIdentity)(account, false);\n  const deviceIdentity = WAProto_1.proto.ADVDeviceIdentity.decode(account.details);\n  const reply = {\n    tag: 'iq',\n    attrs: {\n      to: WABinary_1.S_WHATSAPP_NET,\n      type: 'result',\n      id: msgId\n    },\n    content: [{\n      tag: 'pair-device-sign',\n      attrs: {},\n      content: [{\n        tag: 'device-identity',\n        attrs: {\n          'key-index': deviceIdentity.keyIndex.toString()\n        },\n        content: accountEnc\n      }]\n    }]\n  };\n  const authUpdate = {\n    account,\n    me: {\n      id: jid,\n      name: bizName\n    },\n    signalIdentities: [...(signalIdentities || []), identity],\n    platform: platformNode === null || platformNode === void 0 ? void 0 : platformNode.attrs.name\n  };\n  return {\n    creds: authUpdate,\n    reply\n  };\n};\nexports.configureSuccessfulPairing = configureSuccessfulPairing;\nconst encodeSignedDeviceIdentity = (account, includeSignatureKey) => {\n  var _a;\n  account = {\n    ...account\n  };\n  // set to null if we are not to include the signature key\n  // or if we are including the signature key but it is empty\n  if (!includeSignatureKey || !((_a = account.accountSignatureKey) === null || _a === void 0 ? void 0 : _a.length)) {\n    account.accountSignatureKey = null;\n  }\n  return WAProto_1.proto.ADVSignedDeviceIdentity.encode(account).finish();\n};\nexports.encodeSignedDeviceIdentity = encodeSignedDeviceIdentity;","map":{"version":3,"names":["Object","defineProperty","exports","value","encodeSignedDeviceIdentity","configureSuccessfulPairing","generateRegistrationNode","generateLoginNode","generateMobileNode","boom_1","require","crypto_1","WAProto_1","Defaults_1","WABinary_1","crypto_2","generics_1","signal_1","getUserAgent","config","_a","_b","osVersion","mobile","version","device","manufacturer","platform","proto","ClientPayload","UserAgent","Platform","IOS","WEB","phoneId","auth","creds","appVersion","primary","secondary","tertiary","releaseChannel","ReleaseChannel","RELEASE","mcc","registration","phoneNumberMobileCountryCode","mnc","phoneNumberMobileNetworkCode","osBuildNumber","localeLanguageIso6391","localeCountryIso31661Alpha2","PLATFORM_MAP","WebInfo","WebSubPlatform","DARWIN","WIN32","getWebInfo","webSubPlatform","WEB_BROWSER","syncFullHistory","browser","getClientPayload","payload","connectType","ConnectType","WIFI_UNKNOWN","connectReason","ConnectReason","USER_ACTIVATED","userAgent","webInfo","Boom","data","sessionId","Math","floor","random","shortConnect","connectAttemptCount","dnsSource","appCached","dnsMethod","DNSSource","DNSResolutionMethod","SYSTEM","passive","pushName","username","Number","phoneNumberCountryCode","phoneNumberNationalNumber","fromObject","userJid","user","jidDecode","getPlatformType","platformType","toUpperCase","DeviceProps","PlatformType","DESKTOP","registrationId","signedPreKey","signedIdentityKey","appVersionBuf","createHash","update","join","digest","companion","os","requireFullSync","companionProto","encode","finish","registerPayload","devicePairingData","buildHash","deviceProps","eRegid","encodeBigEndian","eKeytype","KEY_BUNDLE_TYPE","eIdent","public","eSkeyId","keyId","eSkeyVal","keyPair","eSkeySig","signature","stanza","advSecretKey","signalIdentities","msgId","attrs","id","pairSuccessNode","getBinaryNodeChild","deviceIdentityNode","platformNode","deviceNode","businessNode","bizName","name","jid","details","hmac","ADVSignedDeviceIdentityHMAC","decode","content","advSign","hmacSign","Buffer","from","compare","account","ADVSignedDeviceIdentity","accountSignatureKey","accountSignature","deviceDetails","accountMsg","concat","Curve","verify","deviceMsg","deviceSignature","sign","private","identity","createSignalIdentity","accountEnc","deviceIdentity","ADVDeviceIdentity","reply","tag","to","S_WHATSAPP_NET","type","keyIndex","toString","authUpdate","me","includeSignatureKey","length"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Utils/validate-connection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeSignedDeviceIdentity = exports.configureSuccessfulPairing = exports.generateRegistrationNode = exports.generateLoginNode = exports.generateMobileNode = void 0;\nconst boom_1 = require(\"@hapi/boom\");\nconst crypto_1 = require(\"crypto\");\nconst WAProto_1 = require(\"../../WAProto\");\nconst Defaults_1 = require(\"../Defaults\");\nconst WABinary_1 = require(\"../WABinary\");\nconst crypto_2 = require(\"./crypto\");\nconst generics_1 = require(\"./generics\");\nconst signal_1 = require(\"./signal\");\nconst getUserAgent = (config) => {\n    var _a, _b;\n    const osVersion = config.mobile ? '15.3.1' : '0.1';\n    const version = config.mobile ? [2, 24, 6] : config.version;\n    const device = config.mobile ? 'iPhone_7' : 'Desktop';\n    const manufacturer = config.mobile ? 'Apple' : '';\n    const platform = config.mobile ? WAProto_1.proto.ClientPayload.UserAgent.Platform.IOS : WAProto_1.proto.ClientPayload.UserAgent.Platform.WEB;\n    const phoneId = config.mobile ? { phoneId: config.auth.creds.phoneId } : {};\n    return {\n        appVersion: {\n            primary: version[0],\n            secondary: version[1],\n            tertiary: version[2],\n        },\n        platform,\n        releaseChannel: WAProto_1.proto.ClientPayload.UserAgent.ReleaseChannel.RELEASE,\n        mcc: ((_a = config.auth.creds.registration) === null || _a === void 0 ? void 0 : _a.phoneNumberMobileCountryCode) || '000',\n        mnc: ((_b = config.auth.creds.registration) === null || _b === void 0 ? void 0 : _b.phoneNumberMobileNetworkCode) || '000',\n        osVersion: osVersion,\n        manufacturer,\n        device,\n        osBuildNumber: osVersion,\n        localeLanguageIso6391: 'en',\n        localeCountryIso31661Alpha2: 'US',\n        ...phoneId\n    };\n};\nconst PLATFORM_MAP = {\n    'Mac OS': WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.DARWIN,\n    'Windows': WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.WIN32\n};\nconst getWebInfo = (config) => {\n    let webSubPlatform = WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.WEB_BROWSER;\n    if (config.syncFullHistory && PLATFORM_MAP[config.browser[0]]) {\n        webSubPlatform = PLATFORM_MAP[config.browser[0]];\n    }\n    return { webSubPlatform };\n};\nconst getClientPayload = (config) => {\n    const payload = {\n        connectType: WAProto_1.proto.ClientPayload.ConnectType.WIFI_UNKNOWN,\n        connectReason: WAProto_1.proto.ClientPayload.ConnectReason.USER_ACTIVATED,\n        userAgent: getUserAgent(config),\n    };\n    if (!config.mobile) {\n        payload.webInfo = getWebInfo(config);\n    }\n    return payload;\n};\nconst generateMobileNode = (config) => {\n    if (!config.auth.creds) {\n        throw new boom_1.Boom('No registration data found', { data: config });\n    }\n    const payload = {\n        ...getClientPayload(config),\n        sessionId: Math.floor(Math.random() * 999999999 + 1),\n        shortConnect: true,\n        connectAttemptCount: 0,\n        device: 0,\n        dnsSource: {\n            appCached: false,\n            dnsMethod: WAProto_1.proto.ClientPayload.DNSSource.DNSResolutionMethod.SYSTEM,\n        },\n        passive: false,\n        pushName: 'test',\n        username: Number(`${config.auth.creds.registration.phoneNumberCountryCode}${config.auth.creds.registration.phoneNumberNationalNumber}`),\n    };\n    return WAProto_1.proto.ClientPayload.fromObject(payload);\n};\nexports.generateMobileNode = generateMobileNode;\nconst generateLoginNode = (userJid, config) => {\n    const { user, device } = (0, WABinary_1.jidDecode)(userJid);\n    const payload = {\n        ...getClientPayload(config),\n        passive: true,\n        username: +user,\n        device: device,\n    };\n    return WAProto_1.proto.ClientPayload.fromObject(payload);\n};\nexports.generateLoginNode = generateLoginNode;\nconst getPlatformType = (platform) => {\n    const platformType = platform.toUpperCase();\n    return WAProto_1.proto.DeviceProps.PlatformType[platformType] || WAProto_1.proto.DeviceProps.PlatformType.DESKTOP;\n};\nconst generateRegistrationNode = ({ registrationId, signedPreKey, signedIdentityKey }, config) => {\n    // the app version needs to be md5 hashed\n    // and passed in\n    const appVersionBuf = (0, crypto_1.createHash)('md5')\n        .update(config.version.join('.')) // join as string\n        .digest();\n    const companion = {\n        os: config.browser[0],\n        platformType: getPlatformType(config.browser[1]),\n        requireFullSync: config.syncFullHistory,\n    };\n    const companionProto = WAProto_1.proto.DeviceProps.encode(companion).finish();\n    const registerPayload = {\n        ...getClientPayload(config),\n        passive: false,\n        devicePairingData: {\n            buildHash: appVersionBuf,\n            deviceProps: companionProto,\n            eRegid: (0, generics_1.encodeBigEndian)(registrationId),\n            eKeytype: Defaults_1.KEY_BUNDLE_TYPE,\n            eIdent: signedIdentityKey.public,\n            eSkeyId: (0, generics_1.encodeBigEndian)(signedPreKey.keyId, 3),\n            eSkeyVal: signedPreKey.keyPair.public,\n            eSkeySig: signedPreKey.signature,\n        },\n    };\n    return WAProto_1.proto.ClientPayload.fromObject(registerPayload);\n};\nexports.generateRegistrationNode = generateRegistrationNode;\nconst configureSuccessfulPairing = (stanza, { advSecretKey, signedIdentityKey, signalIdentities }) => {\n    const msgId = stanza.attrs.id;\n    const pairSuccessNode = (0, WABinary_1.getBinaryNodeChild)(stanza, 'pair-success');\n    const deviceIdentityNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'device-identity');\n    const platformNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'platform');\n    const deviceNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'device');\n    const businessNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'biz');\n    if (!deviceIdentityNode || !deviceNode) {\n        throw new boom_1.Boom('Missing device-identity or device in pair success node', { data: stanza });\n    }\n    const bizName = businessNode === null || businessNode === void 0 ? void 0 : businessNode.attrs.name;\n    const jid = deviceNode.attrs.jid;\n    const { details, hmac } = WAProto_1.proto.ADVSignedDeviceIdentityHMAC.decode(deviceIdentityNode.content);\n    // check HMAC matches\n    const advSign = (0, crypto_2.hmacSign)(details, Buffer.from(advSecretKey, 'base64'));\n    if (Buffer.compare(hmac, advSign) !== 0) {\n        throw new boom_1.Boom('Invalid account signature');\n    }\n    const account = WAProto_1.proto.ADVSignedDeviceIdentity.decode(details);\n    const { accountSignatureKey, accountSignature, details: deviceDetails } = account;\n    // verify the device signature matches\n    const accountMsg = Buffer.concat([Buffer.from([6, 0]), deviceDetails, signedIdentityKey.public]);\n    if (!crypto_2.Curve.verify(accountSignatureKey, accountMsg, accountSignature)) {\n        throw new boom_1.Boom('Failed to verify account signature');\n    }\n    // sign the details with our identity key\n    const deviceMsg = Buffer.concat([Buffer.from([6, 1]), deviceDetails, signedIdentityKey.public, accountSignatureKey]);\n    account.deviceSignature = crypto_2.Curve.sign(signedIdentityKey.private, deviceMsg);\n    const identity = (0, signal_1.createSignalIdentity)(jid, accountSignatureKey);\n    const accountEnc = (0, exports.encodeSignedDeviceIdentity)(account, false);\n    const deviceIdentity = WAProto_1.proto.ADVDeviceIdentity.decode(account.details);\n    const reply = {\n        tag: 'iq',\n        attrs: {\n            to: WABinary_1.S_WHATSAPP_NET,\n            type: 'result',\n            id: msgId,\n        },\n        content: [\n            {\n                tag: 'pair-device-sign',\n                attrs: {},\n                content: [\n                    {\n                        tag: 'device-identity',\n                        attrs: { 'key-index': deviceIdentity.keyIndex.toString() },\n                        content: accountEnc\n                    }\n                ]\n            }\n        ]\n    };\n    const authUpdate = {\n        account,\n        me: { id: jid, name: bizName },\n        signalIdentities: [\n            ...(signalIdentities || []),\n            identity\n        ],\n        platform: platformNode === null || platformNode === void 0 ? void 0 : platformNode.attrs.name\n    };\n    return {\n        creds: authUpdate,\n        reply\n    };\n};\nexports.configureSuccessfulPairing = configureSuccessfulPairing;\nconst encodeSignedDeviceIdentity = (account, includeSignatureKey) => {\n    var _a;\n    account = { ...account };\n    // set to null if we are not to include the signature key\n    // or if we are including the signature key but it is empty\n    if (!includeSignatureKey || !((_a = account.accountSignatureKey) === null || _a === void 0 ? void 0 : _a.length)) {\n        account.accountSignatureKey = null;\n    }\n    return WAProto_1.proto.ADVSignedDeviceIdentity\n        .encode(account)\n        .finish();\n};\nexports.encodeSignedDeviceIdentity = encodeSignedDeviceIdentity;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}