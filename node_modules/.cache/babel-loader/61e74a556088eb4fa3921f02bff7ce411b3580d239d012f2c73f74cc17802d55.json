{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n$root.textsecure = function () {\n  /**\n   * Namespace textsecure.\n   * @exports textsecure\n   * @namespace\n   */\n  var textsecure = {};\n  textsecure.WhisperMessage = function () {\n    /**\n     * Properties of a WhisperMessage.\n     * @memberof textsecure\n     * @interface IWhisperMessage\n     * @property {Uint8Array|null} [ephemeralKey] WhisperMessage ephemeralKey\n     * @property {number|null} [counter] WhisperMessage counter\n     * @property {number|null} [previousCounter] WhisperMessage previousCounter\n     * @property {Uint8Array|null} [ciphertext] WhisperMessage ciphertext\n     */\n\n    /**\n     * Constructs a new WhisperMessage.\n     * @memberof textsecure\n     * @classdesc Represents a WhisperMessage.\n     * @implements IWhisperMessage\n     * @constructor\n     * @param {textsecure.IWhisperMessage=} [properties] Properties to set\n     */\n    function WhisperMessage(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * WhisperMessage ephemeralKey.\n     * @member {Uint8Array} ephemeralKey\n     * @memberof textsecure.WhisperMessage\n     * @instance\n     */\n    WhisperMessage.prototype.ephemeralKey = $util.newBuffer([]);\n\n    /**\n     * WhisperMessage counter.\n     * @member {number} counter\n     * @memberof textsecure.WhisperMessage\n     * @instance\n     */\n    WhisperMessage.prototype.counter = 0;\n\n    /**\n     * WhisperMessage previousCounter.\n     * @member {number} previousCounter\n     * @memberof textsecure.WhisperMessage\n     * @instance\n     */\n    WhisperMessage.prototype.previousCounter = 0;\n\n    /**\n     * WhisperMessage ciphertext.\n     * @member {Uint8Array} ciphertext\n     * @memberof textsecure.WhisperMessage\n     * @instance\n     */\n    WhisperMessage.prototype.ciphertext = $util.newBuffer([]);\n\n    /**\n     * Creates a new WhisperMessage instance using the specified properties.\n     * @function create\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {textsecure.IWhisperMessage=} [properties] Properties to set\n     * @returns {textsecure.WhisperMessage} WhisperMessage instance\n     */\n    WhisperMessage.create = function create(properties) {\n      return new WhisperMessage(properties);\n    };\n\n    /**\n     * Encodes the specified WhisperMessage message. Does not implicitly {@link textsecure.WhisperMessage.verify|verify} messages.\n     * @function encode\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {textsecure.IWhisperMessage} message WhisperMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    WhisperMessage.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\")) writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ephemeralKey);\n      if (message.counter != null && message.hasOwnProperty(\"counter\")) writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.counter);\n      if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\")) writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.previousCounter);\n      if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\")) writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.ciphertext);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified WhisperMessage message, length delimited. Does not implicitly {@link textsecure.WhisperMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {textsecure.IWhisperMessage} message WhisperMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    WhisperMessage.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a WhisperMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {textsecure.WhisperMessage} WhisperMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    WhisperMessage.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.textsecure.WhisperMessage();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.ephemeralKey = reader.bytes();\n            break;\n          case 2:\n            message.counter = reader.uint32();\n            break;\n          case 3:\n            message.previousCounter = reader.uint32();\n            break;\n          case 4:\n            message.ciphertext = reader.bytes();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a WhisperMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {textsecure.WhisperMessage} WhisperMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    WhisperMessage.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a WhisperMessage message.\n     * @function verify\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    WhisperMessage.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\")) if (!(message.ephemeralKey && typeof message.ephemeralKey.length === \"number\" || $util.isString(message.ephemeralKey))) return \"ephemeralKey: buffer expected\";\n      if (message.counter != null && message.hasOwnProperty(\"counter\")) if (!$util.isInteger(message.counter)) return \"counter: integer expected\";\n      if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\")) if (!$util.isInteger(message.previousCounter)) return \"previousCounter: integer expected\";\n      if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\")) if (!(message.ciphertext && typeof message.ciphertext.length === \"number\" || $util.isString(message.ciphertext))) return \"ciphertext: buffer expected\";\n      return null;\n    };\n\n    /**\n     * Creates a WhisperMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {textsecure.WhisperMessage} WhisperMessage\n     */\n    WhisperMessage.fromObject = function fromObject(object) {\n      if (object instanceof $root.textsecure.WhisperMessage) return object;\n      var message = new $root.textsecure.WhisperMessage();\n      if (object.ephemeralKey != null) if (typeof object.ephemeralKey === \"string\") $util.base64.decode(object.ephemeralKey, message.ephemeralKey = $util.newBuffer($util.base64.length(object.ephemeralKey)), 0);else if (object.ephemeralKey.length) message.ephemeralKey = object.ephemeralKey;\n      if (object.counter != null) message.counter = object.counter >>> 0;\n      if (object.previousCounter != null) message.previousCounter = object.previousCounter >>> 0;\n      if (object.ciphertext != null) if (typeof object.ciphertext === \"string\") $util.base64.decode(object.ciphertext, message.ciphertext = $util.newBuffer($util.base64.length(object.ciphertext)), 0);else if (object.ciphertext.length) message.ciphertext = object.ciphertext;\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a WhisperMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof textsecure.WhisperMessage\n     * @static\n     * @param {textsecure.WhisperMessage} message WhisperMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    WhisperMessage.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        if (options.bytes === String) object.ephemeralKey = \"\";else {\n          object.ephemeralKey = [];\n          if (options.bytes !== Array) object.ephemeralKey = $util.newBuffer(object.ephemeralKey);\n        }\n        object.counter = 0;\n        object.previousCounter = 0;\n        if (options.bytes === String) object.ciphertext = \"\";else {\n          object.ciphertext = [];\n          if (options.bytes !== Array) object.ciphertext = $util.newBuffer(object.ciphertext);\n        }\n      }\n      if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\")) object.ephemeralKey = options.bytes === String ? $util.base64.encode(message.ephemeralKey, 0, message.ephemeralKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.ephemeralKey) : message.ephemeralKey;\n      if (message.counter != null && message.hasOwnProperty(\"counter\")) object.counter = message.counter;\n      if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\")) object.previousCounter = message.previousCounter;\n      if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\")) object.ciphertext = options.bytes === String ? $util.base64.encode(message.ciphertext, 0, message.ciphertext.length) : options.bytes === Array ? Array.prototype.slice.call(message.ciphertext) : message.ciphertext;\n      return object;\n    };\n\n    /**\n     * Converts this WhisperMessage to JSON.\n     * @function toJSON\n     * @memberof textsecure.WhisperMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    WhisperMessage.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return WhisperMessage;\n  }();\n  textsecure.PreKeyWhisperMessage = function () {\n    /**\n     * Properties of a PreKeyWhisperMessage.\n     * @memberof textsecure\n     * @interface IPreKeyWhisperMessage\n     * @property {number|null} [registrationId] PreKeyWhisperMessage registrationId\n     * @property {number|null} [preKeyId] PreKeyWhisperMessage preKeyId\n     * @property {number|null} [signedPreKeyId] PreKeyWhisperMessage signedPreKeyId\n     * @property {Uint8Array|null} [baseKey] PreKeyWhisperMessage baseKey\n     * @property {Uint8Array|null} [identityKey] PreKeyWhisperMessage identityKey\n     * @property {Uint8Array|null} [message] PreKeyWhisperMessage message\n     */\n\n    /**\n     * Constructs a new PreKeyWhisperMessage.\n     * @memberof textsecure\n     * @classdesc Represents a PreKeyWhisperMessage.\n     * @implements IPreKeyWhisperMessage\n     * @constructor\n     * @param {textsecure.IPreKeyWhisperMessage=} [properties] Properties to set\n     */\n    function PreKeyWhisperMessage(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PreKeyWhisperMessage registrationId.\n     * @member {number} registrationId\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @instance\n     */\n    PreKeyWhisperMessage.prototype.registrationId = 0;\n\n    /**\n     * PreKeyWhisperMessage preKeyId.\n     * @member {number} preKeyId\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @instance\n     */\n    PreKeyWhisperMessage.prototype.preKeyId = 0;\n\n    /**\n     * PreKeyWhisperMessage signedPreKeyId.\n     * @member {number} signedPreKeyId\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @instance\n     */\n    PreKeyWhisperMessage.prototype.signedPreKeyId = 0;\n\n    /**\n     * PreKeyWhisperMessage baseKey.\n     * @member {Uint8Array} baseKey\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @instance\n     */\n    PreKeyWhisperMessage.prototype.baseKey = $util.newBuffer([]);\n\n    /**\n     * PreKeyWhisperMessage identityKey.\n     * @member {Uint8Array} identityKey\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @instance\n     */\n    PreKeyWhisperMessage.prototype.identityKey = $util.newBuffer([]);\n\n    /**\n     * PreKeyWhisperMessage message.\n     * @member {Uint8Array} message\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @instance\n     */\n    PreKeyWhisperMessage.prototype.message = $util.newBuffer([]);\n\n    /**\n     * Creates a new PreKeyWhisperMessage instance using the specified properties.\n     * @function create\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {textsecure.IPreKeyWhisperMessage=} [properties] Properties to set\n     * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage instance\n     */\n    PreKeyWhisperMessage.create = function create(properties) {\n      return new PreKeyWhisperMessage(properties);\n    };\n\n    /**\n     * Encodes the specified PreKeyWhisperMessage message. Does not implicitly {@link textsecure.PreKeyWhisperMessage.verify|verify} messages.\n     * @function encode\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {textsecure.IPreKeyWhisperMessage} message PreKeyWhisperMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PreKeyWhisperMessage.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\")) writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.preKeyId);\n      if (message.baseKey != null && message.hasOwnProperty(\"baseKey\")) writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.baseKey);\n      if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.identityKey);\n      if (message.message != null && message.hasOwnProperty(\"message\")) writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.message);\n      if (message.registrationId != null && message.hasOwnProperty(\"registrationId\")) writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.registrationId);\n      if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\")) writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.signedPreKeyId);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified PreKeyWhisperMessage message, length delimited. Does not implicitly {@link textsecure.PreKeyWhisperMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {textsecure.IPreKeyWhisperMessage} message PreKeyWhisperMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PreKeyWhisperMessage.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PreKeyWhisperMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PreKeyWhisperMessage.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.textsecure.PreKeyWhisperMessage();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 5:\n            message.registrationId = reader.uint32();\n            break;\n          case 1:\n            message.preKeyId = reader.uint32();\n            break;\n          case 6:\n            message.signedPreKeyId = reader.uint32();\n            break;\n          case 2:\n            message.baseKey = reader.bytes();\n            break;\n          case 3:\n            message.identityKey = reader.bytes();\n            break;\n          case 4:\n            message.message = reader.bytes();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a PreKeyWhisperMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PreKeyWhisperMessage.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PreKeyWhisperMessage message.\n     * @function verify\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PreKeyWhisperMessage.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.registrationId != null && message.hasOwnProperty(\"registrationId\")) if (!$util.isInteger(message.registrationId)) return \"registrationId: integer expected\";\n      if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\")) if (!$util.isInteger(message.preKeyId)) return \"preKeyId: integer expected\";\n      if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\")) if (!$util.isInteger(message.signedPreKeyId)) return \"signedPreKeyId: integer expected\";\n      if (message.baseKey != null && message.hasOwnProperty(\"baseKey\")) if (!(message.baseKey && typeof message.baseKey.length === \"number\" || $util.isString(message.baseKey))) return \"baseKey: buffer expected\";\n      if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey))) return \"identityKey: buffer expected\";\n      if (message.message != null && message.hasOwnProperty(\"message\")) if (!(message.message && typeof message.message.length === \"number\" || $util.isString(message.message))) return \"message: buffer expected\";\n      return null;\n    };\n\n    /**\n     * Creates a PreKeyWhisperMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n     */\n    PreKeyWhisperMessage.fromObject = function fromObject(object) {\n      if (object instanceof $root.textsecure.PreKeyWhisperMessage) return object;\n      var message = new $root.textsecure.PreKeyWhisperMessage();\n      if (object.registrationId != null) message.registrationId = object.registrationId >>> 0;\n      if (object.preKeyId != null) message.preKeyId = object.preKeyId >>> 0;\n      if (object.signedPreKeyId != null) message.signedPreKeyId = object.signedPreKeyId >>> 0;\n      if (object.baseKey != null) if (typeof object.baseKey === \"string\") $util.base64.decode(object.baseKey, message.baseKey = $util.newBuffer($util.base64.length(object.baseKey)), 0);else if (object.baseKey.length) message.baseKey = object.baseKey;\n      if (object.identityKey != null) if (typeof object.identityKey === \"string\") $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);else if (object.identityKey.length) message.identityKey = object.identityKey;\n      if (object.message != null) if (typeof object.message === \"string\") $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);else if (object.message.length) message.message = object.message;\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a PreKeyWhisperMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @static\n     * @param {textsecure.PreKeyWhisperMessage} message PreKeyWhisperMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PreKeyWhisperMessage.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.preKeyId = 0;\n        if (options.bytes === String) object.baseKey = \"\";else {\n          object.baseKey = [];\n          if (options.bytes !== Array) object.baseKey = $util.newBuffer(object.baseKey);\n        }\n        if (options.bytes === String) object.identityKey = \"\";else {\n          object.identityKey = [];\n          if (options.bytes !== Array) object.identityKey = $util.newBuffer(object.identityKey);\n        }\n        if (options.bytes === String) object.message = \"\";else {\n          object.message = [];\n          if (options.bytes !== Array) object.message = $util.newBuffer(object.message);\n        }\n        object.registrationId = 0;\n        object.signedPreKeyId = 0;\n      }\n      if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\")) object.preKeyId = message.preKeyId;\n      if (message.baseKey != null && message.hasOwnProperty(\"baseKey\")) object.baseKey = options.bytes === String ? $util.base64.encode(message.baseKey, 0, message.baseKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKey) : message.baseKey;\n      if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;\n      if (message.registrationId != null && message.hasOwnProperty(\"registrationId\")) object.registrationId = message.registrationId;\n      if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\")) object.signedPreKeyId = message.signedPreKeyId;\n      return object;\n    };\n\n    /**\n     * Converts this PreKeyWhisperMessage to JSON.\n     * @function toJSON\n     * @memberof textsecure.PreKeyWhisperMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PreKeyWhisperMessage.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return PreKeyWhisperMessage;\n  }();\n  textsecure.KeyExchangeMessage = function () {\n    /**\n     * Properties of a KeyExchangeMessage.\n     * @memberof textsecure\n     * @interface IKeyExchangeMessage\n     * @property {number|null} [id] KeyExchangeMessage id\n     * @property {Uint8Array|null} [baseKey] KeyExchangeMessage baseKey\n     * @property {Uint8Array|null} [ephemeralKey] KeyExchangeMessage ephemeralKey\n     * @property {Uint8Array|null} [identityKey] KeyExchangeMessage identityKey\n     * @property {Uint8Array|null} [baseKeySignature] KeyExchangeMessage baseKeySignature\n     */\n\n    /**\n     * Constructs a new KeyExchangeMessage.\n     * @memberof textsecure\n     * @classdesc Represents a KeyExchangeMessage.\n     * @implements IKeyExchangeMessage\n     * @constructor\n     * @param {textsecure.IKeyExchangeMessage=} [properties] Properties to set\n     */\n    function KeyExchangeMessage(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * KeyExchangeMessage id.\n     * @member {number} id\n     * @memberof textsecure.KeyExchangeMessage\n     * @instance\n     */\n    KeyExchangeMessage.prototype.id = 0;\n\n    /**\n     * KeyExchangeMessage baseKey.\n     * @member {Uint8Array} baseKey\n     * @memberof textsecure.KeyExchangeMessage\n     * @instance\n     */\n    KeyExchangeMessage.prototype.baseKey = $util.newBuffer([]);\n\n    /**\n     * KeyExchangeMessage ephemeralKey.\n     * @member {Uint8Array} ephemeralKey\n     * @memberof textsecure.KeyExchangeMessage\n     * @instance\n     */\n    KeyExchangeMessage.prototype.ephemeralKey = $util.newBuffer([]);\n\n    /**\n     * KeyExchangeMessage identityKey.\n     * @member {Uint8Array} identityKey\n     * @memberof textsecure.KeyExchangeMessage\n     * @instance\n     */\n    KeyExchangeMessage.prototype.identityKey = $util.newBuffer([]);\n\n    /**\n     * KeyExchangeMessage baseKeySignature.\n     * @member {Uint8Array} baseKeySignature\n     * @memberof textsecure.KeyExchangeMessage\n     * @instance\n     */\n    KeyExchangeMessage.prototype.baseKeySignature = $util.newBuffer([]);\n\n    /**\n     * Creates a new KeyExchangeMessage instance using the specified properties.\n     * @function create\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {textsecure.IKeyExchangeMessage=} [properties] Properties to set\n     * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage instance\n     */\n    KeyExchangeMessage.create = function create(properties) {\n      return new KeyExchangeMessage(properties);\n    };\n\n    /**\n     * Encodes the specified KeyExchangeMessage message. Does not implicitly {@link textsecure.KeyExchangeMessage.verify|verify} messages.\n     * @function encode\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {textsecure.IKeyExchangeMessage} message KeyExchangeMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeyExchangeMessage.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.id != null && message.hasOwnProperty(\"id\")) writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n      if (message.baseKey != null && message.hasOwnProperty(\"baseKey\")) writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.baseKey);\n      if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\")) writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.ephemeralKey);\n      if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.identityKey);\n      if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\")) writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.baseKeySignature);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified KeyExchangeMessage message, length delimited. Does not implicitly {@link textsecure.KeyExchangeMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {textsecure.IKeyExchangeMessage} message KeyExchangeMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeyExchangeMessage.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a KeyExchangeMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeyExchangeMessage.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.textsecure.KeyExchangeMessage();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.id = reader.uint32();\n            break;\n          case 2:\n            message.baseKey = reader.bytes();\n            break;\n          case 3:\n            message.ephemeralKey = reader.bytes();\n            break;\n          case 4:\n            message.identityKey = reader.bytes();\n            break;\n          case 5:\n            message.baseKeySignature = reader.bytes();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a KeyExchangeMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeyExchangeMessage.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a KeyExchangeMessage message.\n     * @function verify\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    KeyExchangeMessage.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.id != null && message.hasOwnProperty(\"id\")) if (!$util.isInteger(message.id)) return \"id: integer expected\";\n      if (message.baseKey != null && message.hasOwnProperty(\"baseKey\")) if (!(message.baseKey && typeof message.baseKey.length === \"number\" || $util.isString(message.baseKey))) return \"baseKey: buffer expected\";\n      if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\")) if (!(message.ephemeralKey && typeof message.ephemeralKey.length === \"number\" || $util.isString(message.ephemeralKey))) return \"ephemeralKey: buffer expected\";\n      if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey))) return \"identityKey: buffer expected\";\n      if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\")) if (!(message.baseKeySignature && typeof message.baseKeySignature.length === \"number\" || $util.isString(message.baseKeySignature))) return \"baseKeySignature: buffer expected\";\n      return null;\n    };\n\n    /**\n     * Creates a KeyExchangeMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n     */\n    KeyExchangeMessage.fromObject = function fromObject(object) {\n      if (object instanceof $root.textsecure.KeyExchangeMessage) return object;\n      var message = new $root.textsecure.KeyExchangeMessage();\n      if (object.id != null) message.id = object.id >>> 0;\n      if (object.baseKey != null) if (typeof object.baseKey === \"string\") $util.base64.decode(object.baseKey, message.baseKey = $util.newBuffer($util.base64.length(object.baseKey)), 0);else if (object.baseKey.length) message.baseKey = object.baseKey;\n      if (object.ephemeralKey != null) if (typeof object.ephemeralKey === \"string\") $util.base64.decode(object.ephemeralKey, message.ephemeralKey = $util.newBuffer($util.base64.length(object.ephemeralKey)), 0);else if (object.ephemeralKey.length) message.ephemeralKey = object.ephemeralKey;\n      if (object.identityKey != null) if (typeof object.identityKey === \"string\") $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);else if (object.identityKey.length) message.identityKey = object.identityKey;\n      if (object.baseKeySignature != null) if (typeof object.baseKeySignature === \"string\") $util.base64.decode(object.baseKeySignature, message.baseKeySignature = $util.newBuffer($util.base64.length(object.baseKeySignature)), 0);else if (object.baseKeySignature.length) message.baseKeySignature = object.baseKeySignature;\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a KeyExchangeMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof textsecure.KeyExchangeMessage\n     * @static\n     * @param {textsecure.KeyExchangeMessage} message KeyExchangeMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    KeyExchangeMessage.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.id = 0;\n        if (options.bytes === String) object.baseKey = \"\";else {\n          object.baseKey = [];\n          if (options.bytes !== Array) object.baseKey = $util.newBuffer(object.baseKey);\n        }\n        if (options.bytes === String) object.ephemeralKey = \"\";else {\n          object.ephemeralKey = [];\n          if (options.bytes !== Array) object.ephemeralKey = $util.newBuffer(object.ephemeralKey);\n        }\n        if (options.bytes === String) object.identityKey = \"\";else {\n          object.identityKey = [];\n          if (options.bytes !== Array) object.identityKey = $util.newBuffer(object.identityKey);\n        }\n        if (options.bytes === String) object.baseKeySignature = \"\";else {\n          object.baseKeySignature = [];\n          if (options.bytes !== Array) object.baseKeySignature = $util.newBuffer(object.baseKeySignature);\n        }\n      }\n      if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n      if (message.baseKey != null && message.hasOwnProperty(\"baseKey\")) object.baseKey = options.bytes === String ? $util.base64.encode(message.baseKey, 0, message.baseKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKey) : message.baseKey;\n      if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\")) object.ephemeralKey = options.bytes === String ? $util.base64.encode(message.ephemeralKey, 0, message.ephemeralKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.ephemeralKey) : message.ephemeralKey;\n      if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n      if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\")) object.baseKeySignature = options.bytes === String ? $util.base64.encode(message.baseKeySignature, 0, message.baseKeySignature.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKeySignature) : message.baseKeySignature;\n      return object;\n    };\n\n    /**\n     * Converts this KeyExchangeMessage to JSON.\n     * @function toJSON\n     * @memberof textsecure.KeyExchangeMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    KeyExchangeMessage.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return KeyExchangeMessage;\n  }();\n  return textsecure;\n}();\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","textsecure","WhisperMessage","properties","keys","Object","i","length","prototype","ephemeralKey","newBuffer","counter","previousCounter","ciphertext","create","encode","message","writer","hasOwnProperty","uint32","bytes","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isString","isInteger","fromObject","object","base64","toObject","options","defaults","String","Array","slice","call","toJSON","constructor","toJSONOptions","PreKeyWhisperMessage","registrationId","preKeyId","signedPreKeyId","baseKey","identityKey","KeyExchangeMessage","id","baseKeySignature","module","exports"],"sources":["C:/Users/vanitas/node_modules/libsignal/src/WhisperTextProtocol.js"],"sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.textsecure = (function() {\n\n    /**\n     * Namespace textsecure.\n     * @exports textsecure\n     * @namespace\n     */\n    var textsecure = {};\n\n    textsecure.WhisperMessage = (function() {\n\n        /**\n         * Properties of a WhisperMessage.\n         * @memberof textsecure\n         * @interface IWhisperMessage\n         * @property {Uint8Array|null} [ephemeralKey] WhisperMessage ephemeralKey\n         * @property {number|null} [counter] WhisperMessage counter\n         * @property {number|null} [previousCounter] WhisperMessage previousCounter\n         * @property {Uint8Array|null} [ciphertext] WhisperMessage ciphertext\n         */\n\n        /**\n         * Constructs a new WhisperMessage.\n         * @memberof textsecure\n         * @classdesc Represents a WhisperMessage.\n         * @implements IWhisperMessage\n         * @constructor\n         * @param {textsecure.IWhisperMessage=} [properties] Properties to set\n         */\n        function WhisperMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * WhisperMessage ephemeralKey.\n         * @member {Uint8Array} ephemeralKey\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.ephemeralKey = $util.newBuffer([]);\n\n        /**\n         * WhisperMessage counter.\n         * @member {number} counter\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.counter = 0;\n\n        /**\n         * WhisperMessage previousCounter.\n         * @member {number} previousCounter\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.previousCounter = 0;\n\n        /**\n         * WhisperMessage ciphertext.\n         * @member {Uint8Array} ciphertext\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.ciphertext = $util.newBuffer([]);\n\n        /**\n         * Creates a new WhisperMessage instance using the specified properties.\n         * @function create\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.IWhisperMessage=} [properties] Properties to set\n         * @returns {textsecure.WhisperMessage} WhisperMessage instance\n         */\n        WhisperMessage.create = function create(properties) {\n            return new WhisperMessage(properties);\n        };\n\n        /**\n         * Encodes the specified WhisperMessage message. Does not implicitly {@link textsecure.WhisperMessage.verify|verify} messages.\n         * @function encode\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.IWhisperMessage} message WhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WhisperMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ephemeralKey);\n            if (message.counter != null && message.hasOwnProperty(\"counter\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.counter);\n            if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.previousCounter);\n            if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.ciphertext);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WhisperMessage message, length delimited. Does not implicitly {@link textsecure.WhisperMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.IWhisperMessage} message WhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WhisperMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WhisperMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {textsecure.WhisperMessage} WhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WhisperMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.textsecure.WhisperMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.ephemeralKey = reader.bytes();\n                    break;\n                case 2:\n                    message.counter = reader.uint32();\n                    break;\n                case 3:\n                    message.previousCounter = reader.uint32();\n                    break;\n                case 4:\n                    message.ciphertext = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WhisperMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {textsecure.WhisperMessage} WhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WhisperMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WhisperMessage message.\n         * @function verify\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WhisperMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                if (!(message.ephemeralKey && typeof message.ephemeralKey.length === \"number\" || $util.isString(message.ephemeralKey)))\n                    return \"ephemeralKey: buffer expected\";\n            if (message.counter != null && message.hasOwnProperty(\"counter\"))\n                if (!$util.isInteger(message.counter))\n                    return \"counter: integer expected\";\n            if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\"))\n                if (!$util.isInteger(message.previousCounter))\n                    return \"previousCounter: integer expected\";\n            if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\"))\n                if (!(message.ciphertext && typeof message.ciphertext.length === \"number\" || $util.isString(message.ciphertext)))\n                    return \"ciphertext: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a WhisperMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {textsecure.WhisperMessage} WhisperMessage\n         */\n        WhisperMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.textsecure.WhisperMessage)\n                return object;\n            var message = new $root.textsecure.WhisperMessage();\n            if (object.ephemeralKey != null)\n                if (typeof object.ephemeralKey === \"string\")\n                    $util.base64.decode(object.ephemeralKey, message.ephemeralKey = $util.newBuffer($util.base64.length(object.ephemeralKey)), 0);\n                else if (object.ephemeralKey.length)\n                    message.ephemeralKey = object.ephemeralKey;\n            if (object.counter != null)\n                message.counter = object.counter >>> 0;\n            if (object.previousCounter != null)\n                message.previousCounter = object.previousCounter >>> 0;\n            if (object.ciphertext != null)\n                if (typeof object.ciphertext === \"string\")\n                    $util.base64.decode(object.ciphertext, message.ciphertext = $util.newBuffer($util.base64.length(object.ciphertext)), 0);\n                else if (object.ciphertext.length)\n                    message.ciphertext = object.ciphertext;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a WhisperMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.WhisperMessage} message WhisperMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WhisperMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.ephemeralKey = \"\";\n                else {\n                    object.ephemeralKey = [];\n                    if (options.bytes !== Array)\n                        object.ephemeralKey = $util.newBuffer(object.ephemeralKey);\n                }\n                object.counter = 0;\n                object.previousCounter = 0;\n                if (options.bytes === String)\n                    object.ciphertext = \"\";\n                else {\n                    object.ciphertext = [];\n                    if (options.bytes !== Array)\n                        object.ciphertext = $util.newBuffer(object.ciphertext);\n                }\n            }\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                object.ephemeralKey = options.bytes === String ? $util.base64.encode(message.ephemeralKey, 0, message.ephemeralKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.ephemeralKey) : message.ephemeralKey;\n            if (message.counter != null && message.hasOwnProperty(\"counter\"))\n                object.counter = message.counter;\n            if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\"))\n                object.previousCounter = message.previousCounter;\n            if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\"))\n                object.ciphertext = options.bytes === String ? $util.base64.encode(message.ciphertext, 0, message.ciphertext.length) : options.bytes === Array ? Array.prototype.slice.call(message.ciphertext) : message.ciphertext;\n            return object;\n        };\n\n        /**\n         * Converts this WhisperMessage to JSON.\n         * @function toJSON\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WhisperMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return WhisperMessage;\n    })();\n\n    textsecure.PreKeyWhisperMessage = (function() {\n\n        /**\n         * Properties of a PreKeyWhisperMessage.\n         * @memberof textsecure\n         * @interface IPreKeyWhisperMessage\n         * @property {number|null} [registrationId] PreKeyWhisperMessage registrationId\n         * @property {number|null} [preKeyId] PreKeyWhisperMessage preKeyId\n         * @property {number|null} [signedPreKeyId] PreKeyWhisperMessage signedPreKeyId\n         * @property {Uint8Array|null} [baseKey] PreKeyWhisperMessage baseKey\n         * @property {Uint8Array|null} [identityKey] PreKeyWhisperMessage identityKey\n         * @property {Uint8Array|null} [message] PreKeyWhisperMessage message\n         */\n\n        /**\n         * Constructs a new PreKeyWhisperMessage.\n         * @memberof textsecure\n         * @classdesc Represents a PreKeyWhisperMessage.\n         * @implements IPreKeyWhisperMessage\n         * @constructor\n         * @param {textsecure.IPreKeyWhisperMessage=} [properties] Properties to set\n         */\n        function PreKeyWhisperMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PreKeyWhisperMessage registrationId.\n         * @member {number} registrationId\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.registrationId = 0;\n\n        /**\n         * PreKeyWhisperMessage preKeyId.\n         * @member {number} preKeyId\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.preKeyId = 0;\n\n        /**\n         * PreKeyWhisperMessage signedPreKeyId.\n         * @member {number} signedPreKeyId\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.signedPreKeyId = 0;\n\n        /**\n         * PreKeyWhisperMessage baseKey.\n         * @member {Uint8Array} baseKey\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.baseKey = $util.newBuffer([]);\n\n        /**\n         * PreKeyWhisperMessage identityKey.\n         * @member {Uint8Array} identityKey\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.identityKey = $util.newBuffer([]);\n\n        /**\n         * PreKeyWhisperMessage message.\n         * @member {Uint8Array} message\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.message = $util.newBuffer([]);\n\n        /**\n         * Creates a new PreKeyWhisperMessage instance using the specified properties.\n         * @function create\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.IPreKeyWhisperMessage=} [properties] Properties to set\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage instance\n         */\n        PreKeyWhisperMessage.create = function create(properties) {\n            return new PreKeyWhisperMessage(properties);\n        };\n\n        /**\n         * Encodes the specified PreKeyWhisperMessage message. Does not implicitly {@link textsecure.PreKeyWhisperMessage.verify|verify} messages.\n         * @function encode\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.IPreKeyWhisperMessage} message PreKeyWhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PreKeyWhisperMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.preKeyId);\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.baseKey);\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.identityKey);\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.message);\n            if (message.registrationId != null && message.hasOwnProperty(\"registrationId\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.registrationId);\n            if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.signedPreKeyId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PreKeyWhisperMessage message, length delimited. Does not implicitly {@link textsecure.PreKeyWhisperMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.IPreKeyWhisperMessage} message PreKeyWhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PreKeyWhisperMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PreKeyWhisperMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PreKeyWhisperMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.textsecure.PreKeyWhisperMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 5:\n                    message.registrationId = reader.uint32();\n                    break;\n                case 1:\n                    message.preKeyId = reader.uint32();\n                    break;\n                case 6:\n                    message.signedPreKeyId = reader.uint32();\n                    break;\n                case 2:\n                    message.baseKey = reader.bytes();\n                    break;\n                case 3:\n                    message.identityKey = reader.bytes();\n                    break;\n                case 4:\n                    message.message = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PreKeyWhisperMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PreKeyWhisperMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PreKeyWhisperMessage message.\n         * @function verify\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PreKeyWhisperMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.registrationId != null && message.hasOwnProperty(\"registrationId\"))\n                if (!$util.isInteger(message.registrationId))\n                    return \"registrationId: integer expected\";\n            if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\"))\n                if (!$util.isInteger(message.preKeyId))\n                    return \"preKeyId: integer expected\";\n            if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\"))\n                if (!$util.isInteger(message.signedPreKeyId))\n                    return \"signedPreKeyId: integer expected\";\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                if (!(message.baseKey && typeof message.baseKey.length === \"number\" || $util.isString(message.baseKey)))\n                    return \"baseKey: buffer expected\";\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey)))\n                    return \"identityKey: buffer expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!(message.message && typeof message.message.length === \"number\" || $util.isString(message.message)))\n                    return \"message: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PreKeyWhisperMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n         */\n        PreKeyWhisperMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.textsecure.PreKeyWhisperMessage)\n                return object;\n            var message = new $root.textsecure.PreKeyWhisperMessage();\n            if (object.registrationId != null)\n                message.registrationId = object.registrationId >>> 0;\n            if (object.preKeyId != null)\n                message.preKeyId = object.preKeyId >>> 0;\n            if (object.signedPreKeyId != null)\n                message.signedPreKeyId = object.signedPreKeyId >>> 0;\n            if (object.baseKey != null)\n                if (typeof object.baseKey === \"string\")\n                    $util.base64.decode(object.baseKey, message.baseKey = $util.newBuffer($util.base64.length(object.baseKey)), 0);\n                else if (object.baseKey.length)\n                    message.baseKey = object.baseKey;\n            if (object.identityKey != null)\n                if (typeof object.identityKey === \"string\")\n                    $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);\n                else if (object.identityKey.length)\n                    message.identityKey = object.identityKey;\n            if (object.message != null)\n                if (typeof object.message === \"string\")\n                    $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);\n                else if (object.message.length)\n                    message.message = object.message;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PreKeyWhisperMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.PreKeyWhisperMessage} message PreKeyWhisperMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PreKeyWhisperMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.preKeyId = 0;\n                if (options.bytes === String)\n                    object.baseKey = \"\";\n                else {\n                    object.baseKey = [];\n                    if (options.bytes !== Array)\n                        object.baseKey = $util.newBuffer(object.baseKey);\n                }\n                if (options.bytes === String)\n                    object.identityKey = \"\";\n                else {\n                    object.identityKey = [];\n                    if (options.bytes !== Array)\n                        object.identityKey = $util.newBuffer(object.identityKey);\n                }\n                if (options.bytes === String)\n                    object.message = \"\";\n                else {\n                    object.message = [];\n                    if (options.bytes !== Array)\n                        object.message = $util.newBuffer(object.message);\n                }\n                object.registrationId = 0;\n                object.signedPreKeyId = 0;\n            }\n            if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\"))\n                object.preKeyId = message.preKeyId;\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                object.baseKey = options.bytes === String ? $util.base64.encode(message.baseKey, 0, message.baseKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKey) : message.baseKey;\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;\n            if (message.registrationId != null && message.hasOwnProperty(\"registrationId\"))\n                object.registrationId = message.registrationId;\n            if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\"))\n                object.signedPreKeyId = message.signedPreKeyId;\n            return object;\n        };\n\n        /**\n         * Converts this PreKeyWhisperMessage to JSON.\n         * @function toJSON\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PreKeyWhisperMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PreKeyWhisperMessage;\n    })();\n\n    textsecure.KeyExchangeMessage = (function() {\n\n        /**\n         * Properties of a KeyExchangeMessage.\n         * @memberof textsecure\n         * @interface IKeyExchangeMessage\n         * @property {number|null} [id] KeyExchangeMessage id\n         * @property {Uint8Array|null} [baseKey] KeyExchangeMessage baseKey\n         * @property {Uint8Array|null} [ephemeralKey] KeyExchangeMessage ephemeralKey\n         * @property {Uint8Array|null} [identityKey] KeyExchangeMessage identityKey\n         * @property {Uint8Array|null} [baseKeySignature] KeyExchangeMessage baseKeySignature\n         */\n\n        /**\n         * Constructs a new KeyExchangeMessage.\n         * @memberof textsecure\n         * @classdesc Represents a KeyExchangeMessage.\n         * @implements IKeyExchangeMessage\n         * @constructor\n         * @param {textsecure.IKeyExchangeMessage=} [properties] Properties to set\n         */\n        function KeyExchangeMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * KeyExchangeMessage id.\n         * @member {number} id\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.id = 0;\n\n        /**\n         * KeyExchangeMessage baseKey.\n         * @member {Uint8Array} baseKey\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.baseKey = $util.newBuffer([]);\n\n        /**\n         * KeyExchangeMessage ephemeralKey.\n         * @member {Uint8Array} ephemeralKey\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.ephemeralKey = $util.newBuffer([]);\n\n        /**\n         * KeyExchangeMessage identityKey.\n         * @member {Uint8Array} identityKey\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.identityKey = $util.newBuffer([]);\n\n        /**\n         * KeyExchangeMessage baseKeySignature.\n         * @member {Uint8Array} baseKeySignature\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.baseKeySignature = $util.newBuffer([]);\n\n        /**\n         * Creates a new KeyExchangeMessage instance using the specified properties.\n         * @function create\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.IKeyExchangeMessage=} [properties] Properties to set\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage instance\n         */\n        KeyExchangeMessage.create = function create(properties) {\n            return new KeyExchangeMessage(properties);\n        };\n\n        /**\n         * Encodes the specified KeyExchangeMessage message. Does not implicitly {@link textsecure.KeyExchangeMessage.verify|verify} messages.\n         * @function encode\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.IKeyExchangeMessage} message KeyExchangeMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeyExchangeMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.baseKey);\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.ephemeralKey);\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.identityKey);\n            if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.baseKeySignature);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified KeyExchangeMessage message, length delimited. Does not implicitly {@link textsecure.KeyExchangeMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.IKeyExchangeMessage} message KeyExchangeMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeyExchangeMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a KeyExchangeMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeyExchangeMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.textsecure.KeyExchangeMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.uint32();\n                    break;\n                case 2:\n                    message.baseKey = reader.bytes();\n                    break;\n                case 3:\n                    message.ephemeralKey = reader.bytes();\n                    break;\n                case 4:\n                    message.identityKey = reader.bytes();\n                    break;\n                case 5:\n                    message.baseKeySignature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a KeyExchangeMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeyExchangeMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a KeyExchangeMessage message.\n         * @function verify\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        KeyExchangeMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isInteger(message.id))\n                    return \"id: integer expected\";\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                if (!(message.baseKey && typeof message.baseKey.length === \"number\" || $util.isString(message.baseKey)))\n                    return \"baseKey: buffer expected\";\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                if (!(message.ephemeralKey && typeof message.ephemeralKey.length === \"number\" || $util.isString(message.ephemeralKey)))\n                    return \"ephemeralKey: buffer expected\";\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey)))\n                    return \"identityKey: buffer expected\";\n            if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\"))\n                if (!(message.baseKeySignature && typeof message.baseKeySignature.length === \"number\" || $util.isString(message.baseKeySignature)))\n                    return \"baseKeySignature: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a KeyExchangeMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n         */\n        KeyExchangeMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.textsecure.KeyExchangeMessage)\n                return object;\n            var message = new $root.textsecure.KeyExchangeMessage();\n            if (object.id != null)\n                message.id = object.id >>> 0;\n            if (object.baseKey != null)\n                if (typeof object.baseKey === \"string\")\n                    $util.base64.decode(object.baseKey, message.baseKey = $util.newBuffer($util.base64.length(object.baseKey)), 0);\n                else if (object.baseKey.length)\n                    message.baseKey = object.baseKey;\n            if (object.ephemeralKey != null)\n                if (typeof object.ephemeralKey === \"string\")\n                    $util.base64.decode(object.ephemeralKey, message.ephemeralKey = $util.newBuffer($util.base64.length(object.ephemeralKey)), 0);\n                else if (object.ephemeralKey.length)\n                    message.ephemeralKey = object.ephemeralKey;\n            if (object.identityKey != null)\n                if (typeof object.identityKey === \"string\")\n                    $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);\n                else if (object.identityKey.length)\n                    message.identityKey = object.identityKey;\n            if (object.baseKeySignature != null)\n                if (typeof object.baseKeySignature === \"string\")\n                    $util.base64.decode(object.baseKeySignature, message.baseKeySignature = $util.newBuffer($util.base64.length(object.baseKeySignature)), 0);\n                else if (object.baseKeySignature.length)\n                    message.baseKeySignature = object.baseKeySignature;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a KeyExchangeMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.KeyExchangeMessage} message KeyExchangeMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        KeyExchangeMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.id = 0;\n                if (options.bytes === String)\n                    object.baseKey = \"\";\n                else {\n                    object.baseKey = [];\n                    if (options.bytes !== Array)\n                        object.baseKey = $util.newBuffer(object.baseKey);\n                }\n                if (options.bytes === String)\n                    object.ephemeralKey = \"\";\n                else {\n                    object.ephemeralKey = [];\n                    if (options.bytes !== Array)\n                        object.ephemeralKey = $util.newBuffer(object.ephemeralKey);\n                }\n                if (options.bytes === String)\n                    object.identityKey = \"\";\n                else {\n                    object.identityKey = [];\n                    if (options.bytes !== Array)\n                        object.identityKey = $util.newBuffer(object.identityKey);\n                }\n                if (options.bytes === String)\n                    object.baseKeySignature = \"\";\n                else {\n                    object.baseKeySignature = [];\n                    if (options.bytes !== Array)\n                        object.baseKeySignature = $util.newBuffer(object.baseKeySignature);\n                }\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                object.baseKey = options.bytes === String ? $util.base64.encode(message.baseKey, 0, message.baseKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKey) : message.baseKey;\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                object.ephemeralKey = options.bytes === String ? $util.base64.encode(message.ephemeralKey, 0, message.ephemeralKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.ephemeralKey) : message.ephemeralKey;\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n            if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\"))\n                object.baseKeySignature = options.bytes === String ? $util.base64.encode(message.baseKeySignature, 0, message.baseKeySignature.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKeySignature) : message.baseKeySignature;\n            return object;\n        };\n\n        /**\n         * Converts this KeyExchangeMessage to JSON.\n         * @function toJSON\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        KeyExchangeMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return KeyExchangeMessage;\n    })();\n\n    return textsecure;\n})();\n\nmodule.exports = $root;\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAE7C;AACA,IAAIC,OAAO,GAAGF,SAAS,CAACG,MAAM;EAAEC,OAAO,GAAGJ,SAAS,CAACK,MAAM;EAAEC,KAAK,GAAGN,SAAS,CAACO,IAAI;;AAElF;AACA,IAAIC,KAAK,GAAGR,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,KAAKT,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAE3ED,KAAK,CAACE,UAAU,GAAI,YAAW;EAE3B;AACJ;AACA;AACA;AACA;EACI,IAAIA,UAAU,GAAG,CAAC,CAAC;EAEnBA,UAAU,CAACC,cAAc,GAAI,YAAW;IAEpC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,cAAcA,CAACC,UAAU,EAAE;MAChC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQJ,cAAc,CAACM,SAAS,CAACC,YAAY,GAAGZ,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAE3D;AACR;AACA;AACA;AACA;AACA;IACQR,cAAc,CAACM,SAAS,CAACG,OAAO,GAAG,CAAC;;IAEpC;AACR;AACA;AACA;AACA;AACA;IACQT,cAAc,CAACM,SAAS,CAACI,eAAe,GAAG,CAAC;;IAE5C;AACR;AACA;AACA;AACA;AACA;IACQV,cAAc,CAACM,SAAS,CAACK,UAAU,GAAGhB,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAEzD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQR,cAAc,CAACY,MAAM,GAAG,SAASA,MAAMA,CAACX,UAAU,EAAE;MAChD,OAAO,IAAID,cAAc,CAACC,UAAU,CAAC;IACzC,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQD,cAAc,CAACa,MAAM,GAAG,SAASA,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;MACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGtB,OAAO,CAACmB,MAAM,CAAC,CAAC;MAC7B,IAAIE,OAAO,CAACP,YAAY,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACP,YAAY,CAAC;MACxE,IAAIO,OAAO,CAACL,OAAO,IAAI,IAAI,IAAIK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACH,OAAO,CAACL,OAAO,CAAC;MACpE,IAAIK,OAAO,CAACJ,eAAe,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5ED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACH,OAAO,CAACJ,eAAe,CAAC;MAC5E,IAAII,OAAO,CAACH,UAAU,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACH,UAAU,CAAC;MACtE,OAAOI,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQf,cAAc,CAACmB,eAAe,GAAG,SAASA,eAAeA,CAACL,OAAO,EAAEC,MAAM,EAAE;MACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACK,MAAM,CAAC,CAAC;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpB,cAAc,CAACqB,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEjB,MAAM,EAAE;MACpD,IAAI,EAAEiB,MAAM,YAAY/B,OAAO,CAAC,EAC5B+B,MAAM,GAAG/B,OAAO,CAACqB,MAAM,CAACU,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;QAAES,OAAO,GAAG,IAAIjB,KAAK,CAACE,UAAU,CAACC,cAAc,CAAC,CAAC;MAClH,OAAOsB,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACL,MAAM,CAAC,CAAC;QACzB,QAAQU,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACFb,OAAO,CAACP,YAAY,GAAGe,MAAM,CAACJ,KAAK,CAAC,CAAC;YACrC;UACJ,KAAK,CAAC;YACFJ,OAAO,CAACL,OAAO,GAAGa,MAAM,CAACL,MAAM,CAAC,CAAC;YACjC;UACJ,KAAK,CAAC;YACFH,OAAO,CAACJ,eAAe,GAAGY,MAAM,CAACL,MAAM,CAAC,CAAC;YACzC;UACJ,KAAK,CAAC;YACFH,OAAO,CAACH,UAAU,GAAGW,MAAM,CAACJ,KAAK,CAAC,CAAC;YACnC;UACJ;YACII,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QACJ;MACJ;MACA,OAAOb,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQd,cAAc,CAAC6B,eAAe,GAAG,SAASA,eAAeA,CAACP,MAAM,EAAE;MAC9D,IAAI,EAAEA,MAAM,YAAY/B,OAAO,CAAC,EAC5B+B,MAAM,GAAG,IAAI/B,OAAO,CAAC+B,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACL,MAAM,CAAC,CAAC,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQjB,cAAc,CAAC8B,MAAM,GAAG,SAASA,MAAMA,CAAChB,OAAO,EAAE;MAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAACP,YAAY,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtE,IAAI,EAAEF,OAAO,CAACP,YAAY,IAAI,OAAOO,OAAO,CAACP,YAAY,CAACF,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACP,YAAY,CAAC,CAAC,EAClH,OAAO,+BAA+B;MAC9C,IAAIO,OAAO,CAACL,OAAO,IAAI,IAAI,IAAIK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACrB,KAAK,CAACqC,SAAS,CAAClB,OAAO,CAACL,OAAO,CAAC,EACjC,OAAO,2BAA2B;MAC1C,IAAIK,OAAO,CAACJ,eAAe,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5E,IAAI,CAACrB,KAAK,CAACqC,SAAS,CAAClB,OAAO,CAACJ,eAAe,CAAC,EACzC,OAAO,mCAAmC;MAClD,IAAII,OAAO,CAACH,UAAU,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,EAAEF,OAAO,CAACH,UAAU,IAAI,OAAOG,OAAO,CAACH,UAAU,CAACN,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACH,UAAU,CAAC,CAAC,EAC5G,OAAO,6BAA6B;MAC5C,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQX,cAAc,CAACiC,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;MACpD,IAAIA,MAAM,YAAYrC,KAAK,CAACE,UAAU,CAACC,cAAc,EACjD,OAAOkC,MAAM;MACjB,IAAIpB,OAAO,GAAG,IAAIjB,KAAK,CAACE,UAAU,CAACC,cAAc,CAAC,CAAC;MACnD,IAAIkC,MAAM,CAAC3B,YAAY,IAAI,IAAI,EAC3B,IAAI,OAAO2B,MAAM,CAAC3B,YAAY,KAAK,QAAQ,EACvCZ,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAAC3B,YAAY,EAAEO,OAAO,CAACP,YAAY,GAAGZ,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAAC3B,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAC7H,IAAI2B,MAAM,CAAC3B,YAAY,CAACF,MAAM,EAC/BS,OAAO,CAACP,YAAY,GAAG2B,MAAM,CAAC3B,YAAY;MAClD,IAAI2B,MAAM,CAACzB,OAAO,IAAI,IAAI,EACtBK,OAAO,CAACL,OAAO,GAAGyB,MAAM,CAACzB,OAAO,KAAK,CAAC;MAC1C,IAAIyB,MAAM,CAACxB,eAAe,IAAI,IAAI,EAC9BI,OAAO,CAACJ,eAAe,GAAGwB,MAAM,CAACxB,eAAe,KAAK,CAAC;MAC1D,IAAIwB,MAAM,CAACvB,UAAU,IAAI,IAAI,EACzB,IAAI,OAAOuB,MAAM,CAACvB,UAAU,KAAK,QAAQ,EACrChB,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAACvB,UAAU,EAAEG,OAAO,CAACH,UAAU,GAAGhB,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAACvB,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KACvH,IAAIuB,MAAM,CAACvB,UAAU,CAACN,MAAM,EAC7BS,OAAO,CAACH,UAAU,GAAGuB,MAAM,CAACvB,UAAU;MAC9C,OAAOG,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQd,cAAc,CAACoC,QAAQ,GAAG,SAASA,QAAQA,CAACtB,OAAO,EAAEuB,OAAO,EAAE;MAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIH,MAAM,GAAG,CAAC,CAAC;MACf,IAAIG,OAAO,CAACC,QAAQ,EAAE;QAClB,IAAID,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAAC3B,YAAY,GAAG,EAAE,CAAC,KACxB;UACD2B,MAAM,CAAC3B,YAAY,GAAG,EAAE;UACxB,IAAI8B,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAAC3B,YAAY,GAAGZ,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAAC3B,YAAY,CAAC;QAClE;QACA2B,MAAM,CAACzB,OAAO,GAAG,CAAC;QAClByB,MAAM,CAACxB,eAAe,GAAG,CAAC;QAC1B,IAAI2B,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAACvB,UAAU,GAAG,EAAE,CAAC,KACtB;UACDuB,MAAM,CAACvB,UAAU,GAAG,EAAE;UACtB,IAAI0B,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAACvB,UAAU,GAAGhB,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAACvB,UAAU,CAAC;QAC9D;MACJ;MACA,IAAIG,OAAO,CAACP,YAAY,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtEkB,MAAM,CAAC3B,YAAY,GAAG8B,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACP,YAAY,EAAE,CAAC,EAAEO,OAAO,CAACP,YAAY,CAACF,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACP,YAAY,CAAC,GAAGO,OAAO,CAACP,YAAY;MAClO,IAAIO,OAAO,CAACL,OAAO,IAAI,IAAI,IAAIK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DkB,MAAM,CAACzB,OAAO,GAAGK,OAAO,CAACL,OAAO;MACpC,IAAIK,OAAO,CAACJ,eAAe,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EkB,MAAM,CAACxB,eAAe,GAAGI,OAAO,CAACJ,eAAe;MACpD,IAAII,OAAO,CAACH,UAAU,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEkB,MAAM,CAACvB,UAAU,GAAG0B,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACH,UAAU,EAAE,CAAC,EAAEG,OAAO,CAACH,UAAU,CAACN,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACH,UAAU,CAAC,GAAGG,OAAO,CAACH,UAAU;MACxN,OAAOuB,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQlC,cAAc,CAACM,SAAS,CAACqC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;MAChD,OAAO,IAAI,CAACC,WAAW,CAACR,QAAQ,CAAC,IAAI,EAAE/C,SAAS,CAACO,IAAI,CAACiD,aAAa,CAAC;IACxE,CAAC;IAED,OAAO7C,cAAc;EACzB,CAAC,CAAE,CAAC;EAEJD,UAAU,CAAC+C,oBAAoB,GAAI,YAAW;IAE1C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,oBAAoBA,CAAC7C,UAAU,EAAE;MACtC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ0C,oBAAoB,CAACxC,SAAS,CAACyC,cAAc,GAAG,CAAC;;IAEjD;AACR;AACA;AACA;AACA;AACA;IACQD,oBAAoB,CAACxC,SAAS,CAAC0C,QAAQ,GAAG,CAAC;;IAE3C;AACR;AACA;AACA;AACA;AACA;IACQF,oBAAoB,CAACxC,SAAS,CAAC2C,cAAc,GAAG,CAAC;;IAEjD;AACR;AACA;AACA;AACA;AACA;IACQH,oBAAoB,CAACxC,SAAS,CAAC4C,OAAO,GAAGvD,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAE5D;AACR;AACA;AACA;AACA;AACA;IACQsC,oBAAoB,CAACxC,SAAS,CAAC6C,WAAW,GAAGxD,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAEhE;AACR;AACA;AACA;AACA;AACA;IACQsC,oBAAoB,CAACxC,SAAS,CAACQ,OAAO,GAAGnB,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAE5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQsC,oBAAoB,CAAClC,MAAM,GAAG,SAASA,MAAMA,CAACX,UAAU,EAAE;MACtD,OAAO,IAAI6C,oBAAoB,CAAC7C,UAAU,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ6C,oBAAoB,CAACjC,MAAM,GAAG,SAASA,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;MAC3D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGtB,OAAO,CAACmB,MAAM,CAAC,CAAC;MAC7B,IAAIE,OAAO,CAACkC,QAAQ,IAAI,IAAI,IAAIlC,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAACA,MAAM,CAACH,OAAO,CAACkC,QAAQ,CAAC;MACpE,IAAIlC,OAAO,CAACoC,OAAO,IAAI,IAAI,IAAIpC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACoC,OAAO,CAAC;MACnE,IAAIpC,OAAO,CAACqC,WAAW,IAAI,IAAI,IAAIrC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACqC,WAAW,CAAC;MACvE,IAAIrC,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACA,OAAO,CAAC;MACnE,IAAIA,OAAO,CAACiC,cAAc,IAAI,IAAI,IAAIjC,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1ED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACH,OAAO,CAACiC,cAAc,CAAC;MAC3E,IAAIjC,OAAO,CAACmC,cAAc,IAAI,IAAI,IAAInC,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1ED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACH,OAAO,CAACmC,cAAc,CAAC;MAC3E,OAAOlC,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ+B,oBAAoB,CAAC3B,eAAe,GAAG,SAASA,eAAeA,CAACL,OAAO,EAAEC,MAAM,EAAE;MAC7E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACK,MAAM,CAAC,CAAC;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ0B,oBAAoB,CAACzB,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEjB,MAAM,EAAE;MAC1D,IAAI,EAAEiB,MAAM,YAAY/B,OAAO,CAAC,EAC5B+B,MAAM,GAAG/B,OAAO,CAACqB,MAAM,CAACU,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;QAAES,OAAO,GAAG,IAAIjB,KAAK,CAACE,UAAU,CAAC+C,oBAAoB,CAAC,CAAC;MACxH,OAAOxB,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACL,MAAM,CAAC,CAAC;QACzB,QAAQU,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACFb,OAAO,CAACiC,cAAc,GAAGzB,MAAM,CAACL,MAAM,CAAC,CAAC;YACxC;UACJ,KAAK,CAAC;YACFH,OAAO,CAACkC,QAAQ,GAAG1B,MAAM,CAACL,MAAM,CAAC,CAAC;YAClC;UACJ,KAAK,CAAC;YACFH,OAAO,CAACmC,cAAc,GAAG3B,MAAM,CAACL,MAAM,CAAC,CAAC;YACxC;UACJ,KAAK,CAAC;YACFH,OAAO,CAACoC,OAAO,GAAG5B,MAAM,CAACJ,KAAK,CAAC,CAAC;YAChC;UACJ,KAAK,CAAC;YACFJ,OAAO,CAACqC,WAAW,GAAG7B,MAAM,CAACJ,KAAK,CAAC,CAAC;YACpC;UACJ,KAAK,CAAC;YACFJ,OAAO,CAACA,OAAO,GAAGQ,MAAM,CAACJ,KAAK,CAAC,CAAC;YAChC;UACJ;YACII,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QACJ;MACJ;MACA,OAAOb,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQgC,oBAAoB,CAACjB,eAAe,GAAG,SAASA,eAAeA,CAACP,MAAM,EAAE;MACpE,IAAI,EAAEA,MAAM,YAAY/B,OAAO,CAAC,EAC5B+B,MAAM,GAAG,IAAI/B,OAAO,CAAC+B,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACL,MAAM,CAAC,CAAC,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ6B,oBAAoB,CAAChB,MAAM,GAAG,SAASA,MAAMA,CAAChB,OAAO,EAAE;MACnD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAACiC,cAAc,IAAI,IAAI,IAAIjC,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,CAACrB,KAAK,CAACqC,SAAS,CAAClB,OAAO,CAACiC,cAAc,CAAC,EACxC,OAAO,kCAAkC;MACjD,IAAIjC,OAAO,CAACkC,QAAQ,IAAI,IAAI,IAAIlC,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACrB,KAAK,CAACqC,SAAS,CAAClB,OAAO,CAACkC,QAAQ,CAAC,EAClC,OAAO,4BAA4B;MAC3C,IAAIlC,OAAO,CAACmC,cAAc,IAAI,IAAI,IAAInC,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,CAACrB,KAAK,CAACqC,SAAS,CAAClB,OAAO,CAACmC,cAAc,CAAC,EACxC,OAAO,kCAAkC;MACjD,IAAInC,OAAO,CAACoC,OAAO,IAAI,IAAI,IAAIpC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,EAAEF,OAAO,CAACoC,OAAO,IAAI,OAAOpC,OAAO,CAACoC,OAAO,CAAC7C,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACoC,OAAO,CAAC,CAAC,EACnG,OAAO,0BAA0B;MACzC,IAAIpC,OAAO,CAACqC,WAAW,IAAI,IAAI,IAAIrC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,EAAEF,OAAO,CAACqC,WAAW,IAAI,OAAOrC,OAAO,CAACqC,WAAW,CAAC9C,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACqC,WAAW,CAAC,CAAC,EAC/G,OAAO,8BAA8B;MAC7C,IAAIrC,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,EAAEF,OAAO,CAACA,OAAO,IAAI,OAAOA,OAAO,CAACA,OAAO,CAACT,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACA,OAAO,CAAC,CAAC,EACnG,OAAO,0BAA0B;MACzC,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQgC,oBAAoB,CAACb,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;MAC1D,IAAIA,MAAM,YAAYrC,KAAK,CAACE,UAAU,CAAC+C,oBAAoB,EACvD,OAAOZ,MAAM;MACjB,IAAIpB,OAAO,GAAG,IAAIjB,KAAK,CAACE,UAAU,CAAC+C,oBAAoB,CAAC,CAAC;MACzD,IAAIZ,MAAM,CAACa,cAAc,IAAI,IAAI,EAC7BjC,OAAO,CAACiC,cAAc,GAAGb,MAAM,CAACa,cAAc,KAAK,CAAC;MACxD,IAAIb,MAAM,CAACc,QAAQ,IAAI,IAAI,EACvBlC,OAAO,CAACkC,QAAQ,GAAGd,MAAM,CAACc,QAAQ,KAAK,CAAC;MAC5C,IAAId,MAAM,CAACe,cAAc,IAAI,IAAI,EAC7BnC,OAAO,CAACmC,cAAc,GAAGf,MAAM,CAACe,cAAc,KAAK,CAAC;MACxD,IAAIf,MAAM,CAACgB,OAAO,IAAI,IAAI,EACtB,IAAI,OAAOhB,MAAM,CAACgB,OAAO,KAAK,QAAQ,EAClCvD,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAACgB,OAAO,EAAEpC,OAAO,CAACoC,OAAO,GAAGvD,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAACgB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAC9G,IAAIhB,MAAM,CAACgB,OAAO,CAAC7C,MAAM,EAC1BS,OAAO,CAACoC,OAAO,GAAGhB,MAAM,CAACgB,OAAO;MACxC,IAAIhB,MAAM,CAACiB,WAAW,IAAI,IAAI,EAC1B,IAAI,OAAOjB,MAAM,CAACiB,WAAW,KAAK,QAAQ,EACtCxD,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAACiB,WAAW,EAAErC,OAAO,CAACqC,WAAW,GAAGxD,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAACiB,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAC1H,IAAIjB,MAAM,CAACiB,WAAW,CAAC9C,MAAM,EAC9BS,OAAO,CAACqC,WAAW,GAAGjB,MAAM,CAACiB,WAAW;MAChD,IAAIjB,MAAM,CAACpB,OAAO,IAAI,IAAI,EACtB,IAAI,OAAOoB,MAAM,CAACpB,OAAO,KAAK,QAAQ,EAClCnB,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAACpB,OAAO,EAAEA,OAAO,CAACA,OAAO,GAAGnB,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAACpB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAC9G,IAAIoB,MAAM,CAACpB,OAAO,CAACT,MAAM,EAC1BS,OAAO,CAACA,OAAO,GAAGoB,MAAM,CAACpB,OAAO;MACxC,OAAOA,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQgC,oBAAoB,CAACV,QAAQ,GAAG,SAASA,QAAQA,CAACtB,OAAO,EAAEuB,OAAO,EAAE;MAChE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIH,MAAM,GAAG,CAAC,CAAC;MACf,IAAIG,OAAO,CAACC,QAAQ,EAAE;QAClBJ,MAAM,CAACc,QAAQ,GAAG,CAAC;QACnB,IAAIX,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAACgB,OAAO,GAAG,EAAE,CAAC,KACnB;UACDhB,MAAM,CAACgB,OAAO,GAAG,EAAE;UACnB,IAAIb,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAACgB,OAAO,GAAGvD,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAACgB,OAAO,CAAC;QACxD;QACA,IAAIb,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAACiB,WAAW,GAAG,EAAE,CAAC,KACvB;UACDjB,MAAM,CAACiB,WAAW,GAAG,EAAE;UACvB,IAAId,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAACiB,WAAW,GAAGxD,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAACiB,WAAW,CAAC;QAChE;QACA,IAAId,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAACpB,OAAO,GAAG,EAAE,CAAC,KACnB;UACDoB,MAAM,CAACpB,OAAO,GAAG,EAAE;UACnB,IAAIuB,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAACpB,OAAO,GAAGnB,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAACpB,OAAO,CAAC;QACxD;QACAoB,MAAM,CAACa,cAAc,GAAG,CAAC;QACzBb,MAAM,CAACe,cAAc,GAAG,CAAC;MAC7B;MACA,IAAInC,OAAO,CAACkC,QAAQ,IAAI,IAAI,IAAIlC,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DkB,MAAM,CAACc,QAAQ,GAAGlC,OAAO,CAACkC,QAAQ;MACtC,IAAIlC,OAAO,CAACoC,OAAO,IAAI,IAAI,IAAIpC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DkB,MAAM,CAACgB,OAAO,GAAGb,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACoC,OAAO,EAAE,CAAC,EAAEpC,OAAO,CAACoC,OAAO,CAAC7C,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACoC,OAAO,CAAC,GAAGpC,OAAO,CAACoC,OAAO;MACzM,IAAIpC,OAAO,CAACqC,WAAW,IAAI,IAAI,IAAIrC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEkB,MAAM,CAACiB,WAAW,GAAGd,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACqC,WAAW,EAAE,CAAC,EAAErC,OAAO,CAACqC,WAAW,CAAC9C,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACqC,WAAW,CAAC,GAAGrC,OAAO,CAACqC,WAAW;MAC7N,IAAIrC,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DkB,MAAM,CAACpB,OAAO,GAAGuB,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACA,OAAO,EAAE,CAAC,EAAEA,OAAO,CAACA,OAAO,CAACT,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACA,OAAO,CAAC,GAAGA,OAAO,CAACA,OAAO;MACzM,IAAIA,OAAO,CAACiC,cAAc,IAAI,IAAI,IAAIjC,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EkB,MAAM,CAACa,cAAc,GAAGjC,OAAO,CAACiC,cAAc;MAClD,IAAIjC,OAAO,CAACmC,cAAc,IAAI,IAAI,IAAInC,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EkB,MAAM,CAACe,cAAc,GAAGnC,OAAO,CAACmC,cAAc;MAClD,OAAOf,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQY,oBAAoB,CAACxC,SAAS,CAACqC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;MACtD,OAAO,IAAI,CAACC,WAAW,CAACR,QAAQ,CAAC,IAAI,EAAE/C,SAAS,CAACO,IAAI,CAACiD,aAAa,CAAC;IACxE,CAAC;IAED,OAAOC,oBAAoB;EAC/B,CAAC,CAAE,CAAC;EAEJ/C,UAAU,CAACqD,kBAAkB,GAAI,YAAW;IAExC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASA,kBAAkBA,CAACnD,UAAU,EAAE;MACpC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;IACnD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQgD,kBAAkB,CAAC9C,SAAS,CAAC+C,EAAE,GAAG,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;IACQD,kBAAkB,CAAC9C,SAAS,CAAC4C,OAAO,GAAGvD,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAE1D;AACR;AACA;AACA;AACA;AACA;IACQ4C,kBAAkB,CAAC9C,SAAS,CAACC,YAAY,GAAGZ,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAE/D;AACR;AACA;AACA;AACA;AACA;IACQ4C,kBAAkB,CAAC9C,SAAS,CAAC6C,WAAW,GAAGxD,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAE9D;AACR;AACA;AACA;AACA;AACA;IACQ4C,kBAAkB,CAAC9C,SAAS,CAACgD,gBAAgB,GAAG3D,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;IAEnE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ4C,kBAAkB,CAACxC,MAAM,GAAG,SAASA,MAAMA,CAACX,UAAU,EAAE;MACpD,OAAO,IAAImD,kBAAkB,CAACnD,UAAU,CAAC;IAC7C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQmD,kBAAkB,CAACvC,MAAM,GAAG,SAASA,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;MACzD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGtB,OAAO,CAACmB,MAAM,CAAC,CAAC;MAC7B,IAAIE,OAAO,CAACuC,EAAE,IAAI,IAAI,IAAIvC,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAACA,MAAM,CAACH,OAAO,CAACuC,EAAE,CAAC;MAC9D,IAAIvC,OAAO,CAACoC,OAAO,IAAI,IAAI,IAAIpC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACoC,OAAO,CAAC;MACnE,IAAIpC,OAAO,CAACP,YAAY,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACP,YAAY,CAAC;MACxE,IAAIO,OAAO,CAACqC,WAAW,IAAI,IAAI,IAAIrC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACqC,WAAW,CAAC;MACvE,IAAIrC,OAAO,CAACwC,gBAAgB,IAAI,IAAI,IAAIxC,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9ED,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACwC,gBAAgB,CAAC;MAC5E,OAAOvC,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQqC,kBAAkB,CAACjC,eAAe,GAAG,SAASA,eAAeA,CAACL,OAAO,EAAEC,MAAM,EAAE;MAC3E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACK,MAAM,CAAC,CAAC;IAChD,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQgC,kBAAkB,CAAC/B,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEjB,MAAM,EAAE;MACxD,IAAI,EAAEiB,MAAM,YAAY/B,OAAO,CAAC,EAC5B+B,MAAM,GAAG/B,OAAO,CAACqB,MAAM,CAACU,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;QAAES,OAAO,GAAG,IAAIjB,KAAK,CAACE,UAAU,CAACqD,kBAAkB,CAAC,CAAC;MACtH,OAAO9B,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;QACrB,IAAII,GAAG,GAAGL,MAAM,CAACL,MAAM,CAAC,CAAC;QACzB,QAAQU,GAAG,KAAK,CAAC;UACjB,KAAK,CAAC;YACFb,OAAO,CAACuC,EAAE,GAAG/B,MAAM,CAACL,MAAM,CAAC,CAAC;YAC5B;UACJ,KAAK,CAAC;YACFH,OAAO,CAACoC,OAAO,GAAG5B,MAAM,CAACJ,KAAK,CAAC,CAAC;YAChC;UACJ,KAAK,CAAC;YACFJ,OAAO,CAACP,YAAY,GAAGe,MAAM,CAACJ,KAAK,CAAC,CAAC;YACrC;UACJ,KAAK,CAAC;YACFJ,OAAO,CAACqC,WAAW,GAAG7B,MAAM,CAACJ,KAAK,CAAC,CAAC;YACpC;UACJ,KAAK,CAAC;YACFJ,OAAO,CAACwC,gBAAgB,GAAGhC,MAAM,CAACJ,KAAK,CAAC,CAAC;YACzC;UACJ;YACII,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;YACxB;QACJ;MACJ;MACA,OAAOb,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQsC,kBAAkB,CAACvB,eAAe,GAAG,SAASA,eAAeA,CAACP,MAAM,EAAE;MAClE,IAAI,EAAEA,MAAM,YAAY/B,OAAO,CAAC,EAC5B+B,MAAM,GAAG,IAAI/B,OAAO,CAAC+B,MAAM,CAAC;MAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACL,MAAM,CAAC,CAAC,CAAC;IAC/C,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQmC,kBAAkB,CAACtB,MAAM,GAAG,SAASA,MAAMA,CAAChB,OAAO,EAAE;MACjD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;MAC5B,IAAIA,OAAO,CAACuC,EAAE,IAAI,IAAI,IAAIvC,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACrB,KAAK,CAACqC,SAAS,CAAClB,OAAO,CAACuC,EAAE,CAAC,EAC5B,OAAO,sBAAsB;MACrC,IAAIvC,OAAO,CAACoC,OAAO,IAAI,IAAI,IAAIpC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,EAAEF,OAAO,CAACoC,OAAO,IAAI,OAAOpC,OAAO,CAACoC,OAAO,CAAC7C,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACoC,OAAO,CAAC,CAAC,EACnG,OAAO,0BAA0B;MACzC,IAAIpC,OAAO,CAACP,YAAY,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtE,IAAI,EAAEF,OAAO,CAACP,YAAY,IAAI,OAAOO,OAAO,CAACP,YAAY,CAACF,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACP,YAAY,CAAC,CAAC,EAClH,OAAO,+BAA+B;MAC9C,IAAIO,OAAO,CAACqC,WAAW,IAAI,IAAI,IAAIrC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,EAAEF,OAAO,CAACqC,WAAW,IAAI,OAAOrC,OAAO,CAACqC,WAAW,CAAC9C,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACqC,WAAW,CAAC,CAAC,EAC/G,OAAO,8BAA8B;MAC7C,IAAIrC,OAAO,CAACwC,gBAAgB,IAAI,IAAI,IAAIxC,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9E,IAAI,EAAEF,OAAO,CAACwC,gBAAgB,IAAI,OAAOxC,OAAO,CAACwC,gBAAgB,CAACjD,MAAM,KAAK,QAAQ,IAAIV,KAAK,CAACoC,QAAQ,CAACjB,OAAO,CAACwC,gBAAgB,CAAC,CAAC,EAC9H,OAAO,mCAAmC;MAClD,OAAO,IAAI;IACf,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQF,kBAAkB,CAACnB,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;MACxD,IAAIA,MAAM,YAAYrC,KAAK,CAACE,UAAU,CAACqD,kBAAkB,EACrD,OAAOlB,MAAM;MACjB,IAAIpB,OAAO,GAAG,IAAIjB,KAAK,CAACE,UAAU,CAACqD,kBAAkB,CAAC,CAAC;MACvD,IAAIlB,MAAM,CAACmB,EAAE,IAAI,IAAI,EACjBvC,OAAO,CAACuC,EAAE,GAAGnB,MAAM,CAACmB,EAAE,KAAK,CAAC;MAChC,IAAInB,MAAM,CAACgB,OAAO,IAAI,IAAI,EACtB,IAAI,OAAOhB,MAAM,CAACgB,OAAO,KAAK,QAAQ,EAClCvD,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAACgB,OAAO,EAAEpC,OAAO,CAACoC,OAAO,GAAGvD,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAACgB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAC9G,IAAIhB,MAAM,CAACgB,OAAO,CAAC7C,MAAM,EAC1BS,OAAO,CAACoC,OAAO,GAAGhB,MAAM,CAACgB,OAAO;MACxC,IAAIhB,MAAM,CAAC3B,YAAY,IAAI,IAAI,EAC3B,IAAI,OAAO2B,MAAM,CAAC3B,YAAY,KAAK,QAAQ,EACvCZ,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAAC3B,YAAY,EAAEO,OAAO,CAACP,YAAY,GAAGZ,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAAC3B,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAC7H,IAAI2B,MAAM,CAAC3B,YAAY,CAACF,MAAM,EAC/BS,OAAO,CAACP,YAAY,GAAG2B,MAAM,CAAC3B,YAAY;MAClD,IAAI2B,MAAM,CAACiB,WAAW,IAAI,IAAI,EAC1B,IAAI,OAAOjB,MAAM,CAACiB,WAAW,KAAK,QAAQ,EACtCxD,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAACiB,WAAW,EAAErC,OAAO,CAACqC,WAAW,GAAGxD,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAACiB,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAC1H,IAAIjB,MAAM,CAACiB,WAAW,CAAC9C,MAAM,EAC9BS,OAAO,CAACqC,WAAW,GAAGjB,MAAM,CAACiB,WAAW;MAChD,IAAIjB,MAAM,CAACoB,gBAAgB,IAAI,IAAI,EAC/B,IAAI,OAAOpB,MAAM,CAACoB,gBAAgB,KAAK,QAAQ,EAC3C3D,KAAK,CAACwC,MAAM,CAACd,MAAM,CAACa,MAAM,CAACoB,gBAAgB,EAAExC,OAAO,CAACwC,gBAAgB,GAAG3D,KAAK,CAACa,SAAS,CAACb,KAAK,CAACwC,MAAM,CAAC9B,MAAM,CAAC6B,MAAM,CAACoB,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KACzI,IAAIpB,MAAM,CAACoB,gBAAgB,CAACjD,MAAM,EACnCS,OAAO,CAACwC,gBAAgB,GAAGpB,MAAM,CAACoB,gBAAgB;MAC1D,OAAOxC,OAAO;IAClB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQsC,kBAAkB,CAAChB,QAAQ,GAAG,SAASA,QAAQA,CAACtB,OAAO,EAAEuB,OAAO,EAAE;MAC9D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIH,MAAM,GAAG,CAAC,CAAC;MACf,IAAIG,OAAO,CAACC,QAAQ,EAAE;QAClBJ,MAAM,CAACmB,EAAE,GAAG,CAAC;QACb,IAAIhB,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAACgB,OAAO,GAAG,EAAE,CAAC,KACnB;UACDhB,MAAM,CAACgB,OAAO,GAAG,EAAE;UACnB,IAAIb,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAACgB,OAAO,GAAGvD,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAACgB,OAAO,CAAC;QACxD;QACA,IAAIb,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAAC3B,YAAY,GAAG,EAAE,CAAC,KACxB;UACD2B,MAAM,CAAC3B,YAAY,GAAG,EAAE;UACxB,IAAI8B,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAAC3B,YAAY,GAAGZ,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAAC3B,YAAY,CAAC;QAClE;QACA,IAAI8B,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAACiB,WAAW,GAAG,EAAE,CAAC,KACvB;UACDjB,MAAM,CAACiB,WAAW,GAAG,EAAE;UACvB,IAAId,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAACiB,WAAW,GAAGxD,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAACiB,WAAW,CAAC;QAChE;QACA,IAAId,OAAO,CAACnB,KAAK,KAAKqB,MAAM,EACxBL,MAAM,CAACoB,gBAAgB,GAAG,EAAE,CAAC,KAC5B;UACDpB,MAAM,CAACoB,gBAAgB,GAAG,EAAE;UAC5B,IAAIjB,OAAO,CAACnB,KAAK,KAAKsB,KAAK,EACvBN,MAAM,CAACoB,gBAAgB,GAAG3D,KAAK,CAACa,SAAS,CAAC0B,MAAM,CAACoB,gBAAgB,CAAC;QAC1E;MACJ;MACA,IAAIxC,OAAO,CAACuC,EAAE,IAAI,IAAI,IAAIvC,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDkB,MAAM,CAACmB,EAAE,GAAGvC,OAAO,CAACuC,EAAE;MAC1B,IAAIvC,OAAO,CAACoC,OAAO,IAAI,IAAI,IAAIpC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DkB,MAAM,CAACgB,OAAO,GAAGb,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACoC,OAAO,EAAE,CAAC,EAAEpC,OAAO,CAACoC,OAAO,CAAC7C,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACoC,OAAO,CAAC,GAAGpC,OAAO,CAACoC,OAAO;MACzM,IAAIpC,OAAO,CAACP,YAAY,IAAI,IAAI,IAAIO,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtEkB,MAAM,CAAC3B,YAAY,GAAG8B,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACP,YAAY,EAAE,CAAC,EAAEO,OAAO,CAACP,YAAY,CAACF,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACP,YAAY,CAAC,GAAGO,OAAO,CAACP,YAAY;MAClO,IAAIO,OAAO,CAACqC,WAAW,IAAI,IAAI,IAAIrC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEkB,MAAM,CAACiB,WAAW,GAAGd,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACqC,WAAW,EAAE,CAAC,EAAErC,OAAO,CAACqC,WAAW,CAAC9C,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACqC,WAAW,CAAC,GAAGrC,OAAO,CAACqC,WAAW;MAC7N,IAAIrC,OAAO,CAACwC,gBAAgB,IAAI,IAAI,IAAIxC,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9EkB,MAAM,CAACoB,gBAAgB,GAAGjB,OAAO,CAACnB,KAAK,KAAKqB,MAAM,GAAG5C,KAAK,CAACwC,MAAM,CAACtB,MAAM,CAACC,OAAO,CAACwC,gBAAgB,EAAE,CAAC,EAAExC,OAAO,CAACwC,gBAAgB,CAACjD,MAAM,CAAC,GAAGgC,OAAO,CAACnB,KAAK,KAAKsB,KAAK,GAAGA,KAAK,CAAClC,SAAS,CAACmC,KAAK,CAACC,IAAI,CAAC5B,OAAO,CAACwC,gBAAgB,CAAC,GAAGxC,OAAO,CAACwC,gBAAgB;MACtP,OAAOpB,MAAM;IACjB,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;IACQkB,kBAAkB,CAAC9C,SAAS,CAACqC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;MACpD,OAAO,IAAI,CAACC,WAAW,CAACR,QAAQ,CAAC,IAAI,EAAE/C,SAAS,CAACO,IAAI,CAACiD,aAAa,CAAC;IACxE,CAAC;IAED,OAAOO,kBAAkB;EAC7B,CAAC,CAAE,CAAC;EAEJ,OAAOrD,UAAU;AACrB,CAAC,CAAE,CAAC;AAEJwD,MAAM,CAACC,OAAO,GAAG3D,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}