{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdentificationHeader = exports.CommonHeader = exports.VorbisPictureToken = void 0;\nconst Token = require(\"token-types\");\nconst ID3v2Token_1 = require(\"../../id3v2/ID3v2Token\");\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nclass VorbisPictureToken {\n  static fromBase64(base64str) {\n    return this.fromBuffer(Buffer.from(base64str, 'base64'));\n  }\n  static fromBuffer(buffer) {\n    const pic = new VorbisPictureToken(buffer.length);\n    return pic.get(buffer, 0);\n  }\n  constructor(len) {\n    this.len = len;\n  }\n  get(buffer, offset) {\n    const type = ID3v2Token_1.AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n    const mimeLen = Token.UINT32_BE.get(buffer, offset += 4);\n    const format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\n    const descLen = Token.UINT32_BE.get(buffer, offset += mimeLen);\n    const description = buffer.toString('utf-8', offset += 4, offset + descLen);\n    const width = Token.UINT32_BE.get(buffer, offset += descLen);\n    const height = Token.UINT32_BE.get(buffer, offset += 4);\n    const colour_depth = Token.UINT32_BE.get(buffer, offset += 4);\n    const indexed_color = Token.UINT32_BE.get(buffer, offset += 4);\n    const picDataLen = Token.UINT32_BE.get(buffer, offset += 4);\n    const data = Buffer.from(buffer.slice(offset += 4, offset + picDataLen));\n    return {\n      type,\n      format,\n      description,\n      width,\n      height,\n      colour_depth,\n      indexed_color,\n      data\n    };\n  }\n}\nexports.VorbisPictureToken = VorbisPictureToken;\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexports.CommonHeader = {\n  len: 7,\n  get: (buf, off) => {\n    return {\n      packetType: buf.readUInt8(off),\n      vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n    };\n  }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexports.IdentificationHeader = {\n  len: 23,\n  get: (uint8Array, off) => {\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset);\n    return {\n      version: dataView.getUint32(off + 0, true),\n      channelMode: dataView.getUint8(off + 4),\n      sampleRate: dataView.getUint32(off + 5, true),\n      bitrateMax: dataView.getUint32(off + 9, true),\n      bitrateNominal: dataView.getUint32(off + 13, true),\n      bitrateMin: dataView.getUint32(off + 17, true)\n    };\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","IdentificationHeader","CommonHeader","VorbisPictureToken","Token","require","ID3v2Token_1","fromBase64","base64str","fromBuffer","Buffer","from","buffer","pic","length","get","constructor","len","offset","type","AttachedPictureType","UINT32_BE","mimeLen","format","toString","descLen","description","width","height","colour_depth","indexed_color","picDataLen","data","slice","buf","off","packetType","readUInt8","vorbis","StringType","uint8Array","dataView","DataView","byteOffset","version","getUint32","channelMode","getUint8","sampleRate","bitrateMax","bitrateNominal","bitrateMin"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentificationHeader = exports.CommonHeader = exports.VorbisPictureToken = void 0;\nconst Token = require(\"token-types\");\nconst ID3v2Token_1 = require(\"../../id3v2/ID3v2Token\");\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nclass VorbisPictureToken {\n    static fromBase64(base64str) {\n        return this.fromBuffer(Buffer.from(base64str, 'base64'));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = ID3v2Token_1.AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        const mimeLen = Token.UINT32_BE.get(buffer, offset += 4);\n        const format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\n        const descLen = Token.UINT32_BE.get(buffer, offset += mimeLen);\n        const description = buffer.toString('utf-8', offset += 4, offset + descLen);\n        const width = Token.UINT32_BE.get(buffer, offset += descLen);\n        const height = Token.UINT32_BE.get(buffer, offset += 4);\n        const colour_depth = Token.UINT32_BE.get(buffer, offset += 4);\n        const indexed_color = Token.UINT32_BE.get(buffer, offset += 4);\n        const picDataLen = Token.UINT32_BE.get(buffer, offset += 4);\n        const data = Buffer.from(buffer.slice(offset += 4, offset + picDataLen));\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\nexports.VorbisPictureToken = VorbisPictureToken;\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexports.CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: buf.readUInt8(off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexports.IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset);\n        return {\n            version: dataView.getUint32(off + 0, true),\n            channelMode: dataView.getUint8(off + 4),\n            sampleRate: dataView.getUint32(off + 5, true),\n            bitrateMax: dataView.getUint32(off + 9, true),\n            bitrateNominal: dataView.getUint32(off + 13, true),\n            bitrateMin: dataView.getUint32(off + 17, true)\n        };\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAGF,OAAO,CAACG,YAAY,GAAGH,OAAO,CAACI,kBAAkB,GAAG,KAAK,CAAC;AACzF,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMC,YAAY,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,kBAAkB,CAAC;EACrB,OAAOI,UAAUA,CAACC,SAAS,EAAE;IACzB,OAAO,IAAI,CAACC,UAAU,CAACC,MAAM,CAACC,IAAI,CAACH,SAAS,EAAE,QAAQ,CAAC,CAAC;EAC5D;EACA,OAAOC,UAAUA,CAACG,MAAM,EAAE;IACtB,MAAMC,GAAG,GAAG,IAAIV,kBAAkB,CAACS,MAAM,CAACE,MAAM,CAAC;IACjD,OAAOD,GAAG,CAACE,GAAG,CAACH,MAAM,EAAE,CAAC,CAAC;EAC7B;EACAI,WAAWA,CAACC,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,GAAGA,GAAG;EAClB;EACAF,GAAGA,CAACH,MAAM,EAAEM,MAAM,EAAE;IAChB,MAAMC,IAAI,GAAGb,YAAY,CAACc,mBAAmB,CAAChB,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,CAAC,CAAC;IAClF,MAAMI,OAAO,GAAGlB,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,IAAI,CAAC,CAAC;IACxD,MAAMK,MAAM,GAAGX,MAAM,CAACY,QAAQ,CAAC,OAAO,EAAEN,MAAM,IAAI,CAAC,EAAEA,MAAM,GAAGI,OAAO,CAAC;IACtE,MAAMG,OAAO,GAAGrB,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,IAAII,OAAO,CAAC;IAC9D,MAAMI,WAAW,GAAGd,MAAM,CAACY,QAAQ,CAAC,OAAO,EAAEN,MAAM,IAAI,CAAC,EAAEA,MAAM,GAAGO,OAAO,CAAC;IAC3E,MAAME,KAAK,GAAGvB,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,IAAIO,OAAO,CAAC;IAC5D,MAAMG,MAAM,GAAGxB,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,IAAI,CAAC,CAAC;IACvD,MAAMW,YAAY,GAAGzB,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,IAAI,CAAC,CAAC;IAC7D,MAAMY,aAAa,GAAG1B,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,IAAI,CAAC,CAAC;IAC9D,MAAMa,UAAU,GAAG3B,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACH,MAAM,EAAEM,MAAM,IAAI,CAAC,CAAC;IAC3D,MAAMc,IAAI,GAAGtB,MAAM,CAACC,IAAI,CAACC,MAAM,CAACqB,KAAK,CAACf,MAAM,IAAI,CAAC,EAAEA,MAAM,GAAGa,UAAU,CAAC,CAAC;IACxE,OAAO;MACHZ,IAAI;MACJI,MAAM;MACNG,WAAW;MACXC,KAAK;MACLC,MAAM;MACNC,YAAY;MACZC,aAAa;MACbE;IACJ,CAAC;EACL;AACJ;AACAjC,OAAO,CAACI,kBAAkB,GAAGA,kBAAkB;AAC/C;AACA;AACA;AACA;AACAJ,OAAO,CAACG,YAAY,GAAG;EACnBe,GAAG,EAAE,CAAC;EACNF,GAAG,EAAEA,CAACmB,GAAG,EAAEC,GAAG,KAAK;IACf,OAAO;MACHC,UAAU,EAAEF,GAAG,CAACG,SAAS,CAACF,GAAG,CAAC;MAC9BG,MAAM,EAAE,IAAIlC,KAAK,CAACmC,UAAU,CAAC,CAAC,EAAE,OAAO,CAAC,CAACxB,GAAG,CAACmB,GAAG,EAAEC,GAAG,GAAG,CAAC;IAC7D,CAAC;EACL;AACJ,CAAC;AACD;AACA;AACA;AACA;AACApC,OAAO,CAACE,oBAAoB,GAAG;EAC3BgB,GAAG,EAAE,EAAE;EACPF,GAAG,EAAEA,CAACyB,UAAU,EAAEL,GAAG,KAAK;IACtB,MAAMM,QAAQ,GAAG,IAAIC,QAAQ,CAACF,UAAU,CAAC5B,MAAM,EAAE4B,UAAU,CAACG,UAAU,CAAC;IACvE,OAAO;MACHC,OAAO,EAAEH,QAAQ,CAACI,SAAS,CAACV,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC;MAC1CW,WAAW,EAAEL,QAAQ,CAACM,QAAQ,CAACZ,GAAG,GAAG,CAAC,CAAC;MACvCa,UAAU,EAAEP,QAAQ,CAACI,SAAS,CAACV,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC;MAC7Cc,UAAU,EAAER,QAAQ,CAACI,SAAS,CAACV,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC;MAC7Ce,cAAc,EAAET,QAAQ,CAACI,SAAS,CAACV,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC;MAClDgB,UAAU,EAAEV,QAAQ,CAACI,SAAS,CAACV,GAAG,GAAG,EAAE,EAAE,IAAI;IACjD,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}