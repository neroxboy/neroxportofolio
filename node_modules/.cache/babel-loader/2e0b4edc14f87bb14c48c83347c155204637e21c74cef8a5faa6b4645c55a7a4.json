{"ast":null,"code":"import { illegalArgs } from \"@thi.ng/errors/illegal-arguments\";\nimport { BitInputStream } from \"./input.js\";\nconst DEFAULT_BUF_SIZE = 16;\nconst U32 = 4294967296;\nclass BitOutputStream {\n  buffer;\n  start;\n  pos;\n  bit;\n  bitPos;\n  constructor(buffer, offset = 0) {\n    this.buffer = typeof buffer === \"undefined\" ? new Uint8Array(DEFAULT_BUF_SIZE) : typeof buffer === \"number\" ? new Uint8Array(buffer) : buffer;\n    this.start = offset;\n    this.seek(offset);\n    this.buffer[this.pos] &= ~((1 << this.bit) - 1);\n  }\n  get position() {\n    return this.bitPos;\n  }\n  seek(pos) {\n    if (pos < this.start || pos >= this.buffer.length << 3) {\n      illegalArgs(`seek pos out of bounds: ${pos}`);\n    }\n    this.pos = pos >>> 3;\n    this.bit = 8 - (pos & 7);\n    this.bitPos = pos;\n    return this;\n  }\n  bytes() {\n    return this.buffer.slice(0, this.pos + (this.bit & 7 ? 1 : 0));\n  }\n  reader(from = 0) {\n    return new BitInputStream(this.buffer, from, this.position);\n  }\n  write(x, wordSize = 1) {\n    if (wordSize > 32) {\n      let hi = Math.floor(x / U32);\n      this.write(hi, wordSize - 32);\n      this.write(x - hi * U32, 32);\n    } else if (wordSize > 8) {\n      let n = wordSize & -8;\n      let msb = wordSize - n;\n      if (msb > 0) {\n        this._write(x >>> n, msb);\n      }\n      n -= 8;\n      while (n >= 0) {\n        this._write(x >>> n, 8);\n        n -= 8;\n      }\n    } else {\n      this._write(x, wordSize);\n    }\n    return this;\n  }\n  writeWords(input, wordSize = 8) {\n    let iter = input[Symbol.iterator]();\n    let v;\n    while (v = iter.next(), !v.done) {\n      this.write(v.value, wordSize);\n    }\n  }\n  writeBit(x) {\n    this.bit--;\n    this.buffer[this.pos] = this.buffer[this.pos] & ~(1 << this.bit) | x << this.bit;\n    if (this.bit === 0) {\n      this.ensureSize();\n      this.bit = 8;\n    }\n    this.bitPos++;\n    return this;\n  }\n  _write(x, wordSize) {\n    x &= (1 << wordSize) - 1;\n    let buf = this.buffer;\n    let pos = this.pos;\n    let bit = this.bit;\n    let b = bit - wordSize;\n    let m = bit < 8 ? ~((1 << bit) - 1) : 0;\n    if (b >= 0) {\n      m |= (1 << b) - 1;\n      buf[pos] = buf[pos] & m | x << b & ~m;\n      if (b === 0) {\n        this.ensureSize();\n        this.bit = 8;\n      } else {\n        this.bit = b;\n      }\n    } else {\n      this.bit = bit = 8 + b;\n      buf[pos] = buf[pos] & m | x >>> -b & ~m;\n      this.ensureSize();\n      this.buffer[this.pos] = this.buffer[this.pos] & (1 << bit) - 1 | x << bit & 255;\n    }\n    this.bitPos += wordSize;\n    return this;\n  }\n  ensureSize() {\n    if (++this.pos === this.buffer.length) {\n      let b = new Uint8Array(this.buffer.length << 1);\n      b.set(this.buffer);\n      this.buffer = b;\n    }\n  }\n}\nexport { BitOutputStream };","map":{"version":3,"names":["illegalArgs","BitInputStream","DEFAULT_BUF_SIZE","U32","BitOutputStream","buffer","start","pos","bit","bitPos","constructor","offset","Uint8Array","seek","position","length","bytes","slice","reader","from","write","x","wordSize","hi","Math","floor","n","msb","_write","writeWords","input","iter","Symbol","iterator","v","next","done","value","writeBit","ensureSize","buf","b","m","set"],"sources":["C:/Users/vanitas/node_modules/@thi.ng/bitstream/output.js"],"sourcesContent":["import { illegalArgs } from \"@thi.ng/errors/illegal-arguments\";\nimport { BitInputStream } from \"./input.js\";\nconst DEFAULT_BUF_SIZE = 16;\nconst U32 = 4294967296;\nclass BitOutputStream {\n  buffer;\n  start;\n  pos;\n  bit;\n  bitPos;\n  constructor(buffer, offset = 0) {\n    this.buffer = typeof buffer === \"undefined\" ? new Uint8Array(DEFAULT_BUF_SIZE) : typeof buffer === \"number\" ? new Uint8Array(buffer) : buffer;\n    this.start = offset;\n    this.seek(offset);\n    this.buffer[this.pos] &= ~((1 << this.bit) - 1);\n  }\n  get position() {\n    return this.bitPos;\n  }\n  seek(pos) {\n    if (pos < this.start || pos >= this.buffer.length << 3) {\n      illegalArgs(`seek pos out of bounds: ${pos}`);\n    }\n    this.pos = pos >>> 3;\n    this.bit = 8 - (pos & 7);\n    this.bitPos = pos;\n    return this;\n  }\n  bytes() {\n    return this.buffer.slice(0, this.pos + (this.bit & 7 ? 1 : 0));\n  }\n  reader(from = 0) {\n    return new BitInputStream(this.buffer, from, this.position);\n  }\n  write(x, wordSize = 1) {\n    if (wordSize > 32) {\n      let hi = Math.floor(x / U32);\n      this.write(hi, wordSize - 32);\n      this.write(x - hi * U32, 32);\n    } else if (wordSize > 8) {\n      let n = wordSize & -8;\n      let msb = wordSize - n;\n      if (msb > 0) {\n        this._write(x >>> n, msb);\n      }\n      n -= 8;\n      while (n >= 0) {\n        this._write(x >>> n, 8);\n        n -= 8;\n      }\n    } else {\n      this._write(x, wordSize);\n    }\n    return this;\n  }\n  writeWords(input, wordSize = 8) {\n    let iter = input[Symbol.iterator]();\n    let v;\n    while (v = iter.next(), !v.done) {\n      this.write(v.value, wordSize);\n    }\n  }\n  writeBit(x) {\n    this.bit--;\n    this.buffer[this.pos] = this.buffer[this.pos] & ~(1 << this.bit) | x << this.bit;\n    if (this.bit === 0) {\n      this.ensureSize();\n      this.bit = 8;\n    }\n    this.bitPos++;\n    return this;\n  }\n  _write(x, wordSize) {\n    x &= (1 << wordSize) - 1;\n    let buf = this.buffer;\n    let pos = this.pos;\n    let bit = this.bit;\n    let b = bit - wordSize;\n    let m = bit < 8 ? ~((1 << bit) - 1) : 0;\n    if (b >= 0) {\n      m |= (1 << b) - 1;\n      buf[pos] = buf[pos] & m | x << b & ~m;\n      if (b === 0) {\n        this.ensureSize();\n        this.bit = 8;\n      } else {\n        this.bit = b;\n      }\n    } else {\n      this.bit = bit = 8 + b;\n      buf[pos] = buf[pos] & m | x >>> -b & ~m;\n      this.ensureSize();\n      this.buffer[this.pos] = this.buffer[this.pos] & (1 << bit) - 1 | x << bit & 255;\n    }\n    this.bitPos += wordSize;\n    return this;\n  }\n  ensureSize() {\n    if (++this.pos === this.buffer.length) {\n      let b = new Uint8Array(this.buffer.length << 1);\n      b.set(this.buffer);\n      this.buffer = b;\n    }\n  }\n}\nexport {\n  BitOutputStream\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}