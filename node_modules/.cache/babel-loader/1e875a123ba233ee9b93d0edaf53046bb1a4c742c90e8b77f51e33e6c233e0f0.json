{"ast":null,"code":"const CiphertextMessage = require('./ciphertext_message');\nconst curve = require('libsignal/src/curve');\nconst protobufs = require('./protobufs');\nclass SenderKeyMessage extends CiphertextMessage {\n  SIGNATURE_LENGTH = 64;\n  constructor(keyId = null, iteration = null, ciphertext = null, signatureKey = null, serialized = null) {\n    super();\n    if (serialized) {\n      const version = serialized[0];\n      const message = serialized.slice(1, serialized.length - this.SIGNATURE_LENGTH);\n      const signature = serialized.slice(-1 * this.SIGNATURE_LENGTH);\n      const senderKeyMessage = protobufs.SenderKeyMessage.decode(message).toJSON();\n      senderKeyMessage.ciphertext = Buffer.from(senderKeyMessage.ciphertext, 'base64');\n      this.serialized = serialized;\n      this.messageVersion = (version & 0xff) >> 4;\n      this.keyId = senderKeyMessage.id;\n      this.iteration = senderKeyMessage.iteration;\n      this.ciphertext = senderKeyMessage.ciphertext;\n      this.signature = signature;\n    } else {\n      const version = ((this.CURRENT_VERSION << 4 | this.CURRENT_VERSION) & 0xff) % 256;\n      ciphertext = Buffer.from(ciphertext); // .toString('base64');\n      const message = protobufs.SenderKeyMessage.encode(protobufs.SenderKeyMessage.create({\n        id: keyId,\n        iteration,\n        ciphertext\n      })).finish();\n      const signature = this.getSignature(signatureKey, Buffer.concat([Buffer.from([version]), message]));\n      this.serialized = Buffer.concat([Buffer.from([version]), message, Buffer.from(signature)]);\n      this.messageVersion = this.CURRENT_VERSION;\n      this.keyId = keyId;\n      this.iteration = iteration;\n      this.ciphertext = ciphertext;\n      this.signature = signature;\n    }\n  }\n  getKeyId() {\n    return this.keyId;\n  }\n  getIteration() {\n    return this.iteration;\n  }\n  getCipherText() {\n    return this.ciphertext;\n  }\n  verifySignature(signatureKey) {\n    const part1 = this.serialized.slice(0, this.serialized.length - this.SIGNATURE_LENGTH);\n    const part2 = this.serialized.slice(-1 * this.SIGNATURE_LENGTH);\n    const res = curve.verifySignature(signatureKey, part1, part2);\n    if (!res) throw new Error('Invalid signature!');\n  }\n  getSignature(signatureKey, serialized) {\n    const signature = Buffer.from(curve.calculateSignature(signatureKey, serialized));\n    return signature;\n  }\n  serialize() {\n    return this.serialized;\n  }\n  getType() {\n    return 4;\n  }\n}\nmodule.exports = SenderKeyMessage;","map":{"version":3,"names":["CiphertextMessage","require","curve","protobufs","SenderKeyMessage","SIGNATURE_LENGTH","constructor","keyId","iteration","ciphertext","signatureKey","serialized","version","message","slice","length","signature","senderKeyMessage","decode","toJSON","Buffer","from","messageVersion","id","CURRENT_VERSION","encode","create","finish","getSignature","concat","getKeyId","getIteration","getCipherText","verifySignature","part1","part2","res","Error","calculateSignature","serialize","getType","module","exports"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/WASignalGroup/sender_key_message.js"],"sourcesContent":["const CiphertextMessage = require('./ciphertext_message');\nconst curve = require('libsignal/src/curve');\nconst protobufs = require('./protobufs');\n\nclass SenderKeyMessage extends CiphertextMessage {\n  SIGNATURE_LENGTH = 64;\n\n  constructor(\n    keyId = null,\n    iteration = null,\n    ciphertext = null,\n    signatureKey = null,\n    serialized = null\n  ) {\n    super();\n    if (serialized) {\n      const version = serialized[0];\n      const message = serialized.slice(1, serialized.length - this.SIGNATURE_LENGTH);\n      const signature = serialized.slice(-1 * this.SIGNATURE_LENGTH);\n      const senderKeyMessage = protobufs.SenderKeyMessage.decode(message).toJSON();\n      senderKeyMessage.ciphertext = Buffer.from(senderKeyMessage.ciphertext, 'base64');\n\n      this.serialized = serialized;\n      this.messageVersion = (version & 0xff) >> 4;\n\n      this.keyId = senderKeyMessage.id;\n      this.iteration = senderKeyMessage.iteration;\n      this.ciphertext = senderKeyMessage.ciphertext;\n      this.signature = signature;\n    } else {\n      const version = (((this.CURRENT_VERSION << 4) | this.CURRENT_VERSION) & 0xff) % 256;\n      ciphertext = Buffer.from(ciphertext); // .toString('base64');\n      const message = protobufs.SenderKeyMessage.encode(\n        protobufs.SenderKeyMessage.create({\n          id: keyId,\n          iteration,\n          ciphertext,\n        })\n      ).finish();\n\n      const signature = this.getSignature(\n        signatureKey,\n        Buffer.concat([Buffer.from([version]), message])\n      );\n      this.serialized = Buffer.concat([Buffer.from([version]), message, Buffer.from(signature)]);\n      this.messageVersion = this.CURRENT_VERSION;\n      this.keyId = keyId;\n      this.iteration = iteration;\n      this.ciphertext = ciphertext;\n      this.signature = signature;\n    }\n  }\n\n  getKeyId() {\n    return this.keyId;\n  }\n\n  getIteration() {\n    return this.iteration;\n  }\n\n  getCipherText() {\n    return this.ciphertext;\n  }\n\n  verifySignature(signatureKey) {\n    const part1 = this.serialized.slice(0, this.serialized.length - this.SIGNATURE_LENGTH);\n    const part2 = this.serialized.slice(-1 * this.SIGNATURE_LENGTH);\n    const res = curve.verifySignature(signatureKey, part1, part2);\n    if (!res) throw new Error('Invalid signature!');\n  }\n\n  getSignature(signatureKey, serialized) {\n    const signature = Buffer.from(\n      curve.calculateSignature(\n        signatureKey,\n        serialized\n      )\n    );\n    return signature;\n  }\n\n  serialize() {\n    return this.serialized;\n  }\n\n  getType() {\n    return 4;\n  }\n}\n\nmodule.exports = SenderKeyMessage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}