{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport { flacCrc16 } from \"../../utilities.js\";\nimport { length, streamInfo, crc16, samples, subarray, checkFrameFooterCrc16 } from \"../../constants.js\";\nimport CodecFrame from \"../CodecFrame.js\";\nexport default class FLACFrame extends CodecFrame {\n  static _getFrameFooterCrc16(data) {\n    return (data[data[length] - 2] << 8) + data[data[length] - 1];\n  }\n\n  // check frame footer crc\n  // https://xiph.org/flac/format.html#frame_footer\n  static [checkFrameFooterCrc16](data) {\n    const expectedCrc16 = FLACFrame._getFrameFooterCrc16(data);\n    const actualCrc16 = flacCrc16(data[subarray](0, -2));\n    return expectedCrc16 === actualCrc16;\n  }\n  constructor(data, header, streamInfoValue) {\n    header[streamInfo] = streamInfoValue;\n    header[crc16] = FLACFrame._getFrameFooterCrc16(data);\n    super(header, data, headerStore.get(header)[samples]);\n  }\n}","map":{"version":3,"names":["headerStore","flacCrc16","length","streamInfo","crc16","samples","subarray","checkFrameFooterCrc16","CodecFrame","FLACFrame","_getFrameFooterCrc16","data","expectedCrc16","actualCrc16","constructor","header","streamInfoValue","get"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/codecs/flac/FLACFrame.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport { flacCrc16 } from \"../../utilities.js\";\nimport {\n  length,\n  streamInfo,\n  crc16,\n  samples,\n  subarray,\n  checkFrameFooterCrc16,\n} from \"../../constants.js\";\nimport CodecFrame from \"../CodecFrame.js\";\n\nexport default class FLACFrame extends CodecFrame {\n  static _getFrameFooterCrc16(data) {\n    return (data[data[length] - 2] << 8) + data[data[length] - 1];\n  }\n\n  // check frame footer crc\n  // https://xiph.org/flac/format.html#frame_footer\n  static [checkFrameFooterCrc16](data) {\n    const expectedCrc16 = FLACFrame._getFrameFooterCrc16(data);\n    const actualCrc16 = flacCrc16(data[subarray](0, -2));\n\n    return expectedCrc16 === actualCrc16;\n  }\n\n  constructor(data, header, streamInfoValue) {\n    header[streamInfo] = streamInfoValue;\n    header[crc16] = FLACFrame._getFrameFooterCrc16(data);\n\n    super(header, data, headerStore.get(header)[samples]);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SACEC,MAAM,EACNC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,qBAAqB,QAChB,oBAAoB;AAC3B,OAAOC,UAAU,MAAM,kBAAkB;AAEzC,eAAe,MAAMC,SAAS,SAASD,UAAU,CAAC;EAChD,OAAOE,oBAAoBA,CAACC,IAAI,EAAE;IAChC,OAAO,CAACA,IAAI,CAACA,IAAI,CAACT,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAIS,IAAI,CAACA,IAAI,CAACT,MAAM,CAAC,GAAG,CAAC,CAAC;EAC/D;;EAEA;EACA;EACA,QAAQK,qBAAqB,EAAEI,IAAI,EAAE;IACnC,MAAMC,aAAa,GAAGH,SAAS,CAACC,oBAAoB,CAACC,IAAI,CAAC;IAC1D,MAAME,WAAW,GAAGZ,SAAS,CAACU,IAAI,CAACL,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEpD,OAAOM,aAAa,KAAKC,WAAW;EACtC;EAEAC,WAAWA,CAACH,IAAI,EAAEI,MAAM,EAAEC,eAAe,EAAE;IACzCD,MAAM,CAACZ,UAAU,CAAC,GAAGa,eAAe;IACpCD,MAAM,CAACX,KAAK,CAAC,GAAGK,SAAS,CAACC,oBAAoB,CAACC,IAAI,CAAC;IAEpD,KAAK,CAACI,MAAM,EAAEJ,IAAI,EAAEX,WAAW,CAACiB,GAAG,CAACF,MAAM,CAAC,CAACV,OAAO,CAAC,CAAC;EACvD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}