{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore, frameStore } from \"../../globals.js\";\nimport { bytesToString, concatBuffers } from \"../../utilities.js\";\nimport { header, pageSequenceNumber, pageSegmentBytes, pageSegmentTable, codec, data, length, segments, subarray, vorbis, mapFrameStats, logWarning, fixedLengthFrameSync, parseFrame, parseOggPage, reset, uint8Array, isLastPage, streamSerialNumber } from \"../../constants.js\";\nimport Parser from \"../../codecs/Parser.js\";\nimport OggPage from \"./OggPage.js\";\nimport OggPageHeader from \"./OggPageHeader.js\";\nimport FLACParser from \"../../codecs/flac/FLACParser.js\";\nimport OpusParser from \"../../codecs/opus/OpusParser.js\";\nimport VorbisParser from \"../../codecs/vorbis/VorbisParser.js\";\nclass OggStream {\n  constructor(codecParser, headerCache, onCodec) {\n    this._codecParser = codecParser;\n    this._headerCache = headerCache;\n    this._onCodec = onCodec;\n    this._continuedPacket = new uint8Array();\n    this._codec = null;\n    this._isSupported = null;\n  }\n  get [codec]() {\n    return this._codec || \"\";\n  }\n  _updateCodec(codec, Parser) {\n    if (this._codec !== codec) {\n      this._headerCache[reset]();\n      this._parser = new Parser(this._codecParser, this._headerCache, this._onCodec);\n      this._codec = codec;\n    }\n  }\n  _checkCodecSupport({\n    data\n  }) {\n    const idString = bytesToString(data[subarray](0, 8));\n    switch (idString) {\n      case \"fishead\\0\":\n        return false;\n      // ignore ogg skeleton packets\n      case \"OpusHead\":\n        this._updateCodec(\"opus\", OpusParser);\n        return true;\n      case /^\\x7fFLAC/.test(idString) && idString:\n        this._updateCodec(\"flac\", FLACParser);\n        return true;\n      case /^\\x01vorbis/.test(idString) && idString:\n        this._updateCodec(vorbis, VorbisParser);\n        return true;\n      default:\n        return false;\n    }\n  }\n  _checkPageSequenceNumber(oggPage) {\n    if (oggPage[pageSequenceNumber] !== this._pageSequenceNumber + 1 && this._pageSequenceNumber > 1 && oggPage[pageSequenceNumber] > 1) {\n      this._codecParser[logWarning](\"Unexpected gap in Ogg Page Sequence Number.\", `Expected: ${this._pageSequenceNumber + 1}, Got: ${oggPage[pageSequenceNumber]}`);\n    }\n    this._pageSequenceNumber = oggPage[pageSequenceNumber];\n  }\n  _parsePage(oggPage) {\n    if (this._isSupported === null) {\n      this._pageSequenceNumber = oggPage[pageSequenceNumber];\n      this._isSupported = this._checkCodecSupport(oggPage);\n    }\n    this._checkPageSequenceNumber(oggPage);\n    const oggPageStore = frameStore.get(oggPage);\n    const headerData = headerStore.get(oggPageStore[header]);\n    let offset = 0;\n    oggPageStore[segments] = headerData[pageSegmentTable].map(segmentLength => oggPage[data][subarray](offset, offset += segmentLength));\n\n    // prepend any existing continued packet data\n    if (this._continuedPacket[length]) {\n      oggPageStore[segments][0] = concatBuffers(this._continuedPacket, oggPageStore[segments][0]);\n      this._continuedPacket = new uint8Array();\n    }\n\n    // save any new continued packet data\n    if (headerData[pageSegmentBytes][headerData[pageSegmentBytes][length] - 1] === 0xff) {\n      this._continuedPacket = concatBuffers(this._continuedPacket, oggPageStore[segments].pop());\n    }\n    if (this._isSupported) {\n      const frame = this._parser[parseOggPage](oggPage);\n      this._codecParser[mapFrameStats](frame);\n      return frame;\n    } else {\n      return oggPage;\n    }\n  }\n}\nexport default class OggParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this._onCodec = onCodec;\n    this.Frame = OggPage;\n    this.Header = OggPageHeader;\n    this._streams = new Map();\n    this._currentSerialNumber = null;\n  }\n  get [codec]() {\n    const oggStream = this._streams.get(this._currentSerialNumber);\n    return oggStream ? oggStream.codec : \"\";\n  }\n  *[parseFrame]() {\n    const oggPage = yield* this[fixedLengthFrameSync](true);\n    this._currentSerialNumber = oggPage[streamSerialNumber];\n    let oggStream = this._streams.get(this._currentSerialNumber);\n    if (!oggStream) {\n      oggStream = new OggStream(this._codecParser, this._headerCache, this._onCodec);\n      this._streams.set(this._currentSerialNumber, oggStream);\n    }\n    if (oggPage[isLastPage]) this._streams.delete(this._currentSerialNumber);\n    return oggStream._parsePage(oggPage);\n  }\n}","map":{"version":3,"names":["headerStore","frameStore","bytesToString","concatBuffers","header","pageSequenceNumber","pageSegmentBytes","pageSegmentTable","codec","data","length","segments","subarray","vorbis","mapFrameStats","logWarning","fixedLengthFrameSync","parseFrame","parseOggPage","reset","uint8Array","isLastPage","streamSerialNumber","Parser","OggPage","OggPageHeader","FLACParser","OpusParser","VorbisParser","OggStream","constructor","codecParser","headerCache","onCodec","_codecParser","_headerCache","_onCodec","_continuedPacket","_codec","_isSupported","_updateCodec","_parser","_checkCodecSupport","idString","test","_checkPageSequenceNumber","oggPage","_pageSequenceNumber","_parsePage","oggPageStore","get","headerData","offset","map","segmentLength","pop","frame","OggParser","Frame","Header","_streams","Map","_currentSerialNumber","oggStream","set","delete"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/containers/ogg/OggParser.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore, frameStore } from \"../../globals.js\";\nimport { bytesToString, concatBuffers } from \"../../utilities.js\";\nimport {\n  header,\n  pageSequenceNumber,\n  pageSegmentBytes,\n  pageSegmentTable,\n  codec,\n  data,\n  length,\n  segments,\n  subarray,\n  vorbis,\n  mapFrameStats,\n  logWarning,\n  fixedLengthFrameSync,\n  parseFrame,\n  parseOggPage,\n  reset,\n  uint8Array,\n  isLastPage,\n  streamSerialNumber,\n} from \"../../constants.js\";\n\nimport Parser from \"../../codecs/Parser.js\";\nimport OggPage from \"./OggPage.js\";\nimport OggPageHeader from \"./OggPageHeader.js\";\n\nimport FLACParser from \"../../codecs/flac/FLACParser.js\";\nimport OpusParser from \"../../codecs/opus/OpusParser.js\";\nimport VorbisParser from \"../../codecs/vorbis/VorbisParser.js\";\n\nclass OggStream {\n  constructor(codecParser, headerCache, onCodec) {\n    this._codecParser = codecParser;\n    this._headerCache = headerCache;\n    this._onCodec = onCodec;\n\n    this._continuedPacket = new uint8Array();\n    this._codec = null;\n    this._isSupported = null;\n  }\n\n  get [codec]() {\n    return this._codec || \"\";\n  }\n\n  _updateCodec(codec, Parser) {\n    if (this._codec !== codec) {\n      this._headerCache[reset]();\n      this._parser = new Parser(\n        this._codecParser,\n        this._headerCache,\n        this._onCodec,\n      );\n      this._codec = codec;\n    }\n  }\n\n  _checkCodecSupport({ data }) {\n    const idString = bytesToString(data[subarray](0, 8));\n\n    switch (idString) {\n      case \"fishead\\0\":\n        return false; // ignore ogg skeleton packets\n      case \"OpusHead\":\n        this._updateCodec(\"opus\", OpusParser);\n        return true;\n      case /^\\x7fFLAC/.test(idString) && idString:\n        this._updateCodec(\"flac\", FLACParser);\n        return true;\n      case /^\\x01vorbis/.test(idString) && idString:\n        this._updateCodec(vorbis, VorbisParser);\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  _checkPageSequenceNumber(oggPage) {\n    if (\n      oggPage[pageSequenceNumber] !== this._pageSequenceNumber + 1 &&\n      this._pageSequenceNumber > 1 &&\n      oggPage[pageSequenceNumber] > 1\n    ) {\n      this._codecParser[logWarning](\n        \"Unexpected gap in Ogg Page Sequence Number.\",\n        `Expected: ${this._pageSequenceNumber + 1}, Got: ${\n          oggPage[pageSequenceNumber]\n        }`,\n      );\n    }\n\n    this._pageSequenceNumber = oggPage[pageSequenceNumber];\n  }\n\n  _parsePage(oggPage) {\n    if (this._isSupported === null) {\n      this._pageSequenceNumber = oggPage[pageSequenceNumber];\n      this._isSupported = this._checkCodecSupport(oggPage);\n    }\n\n    this._checkPageSequenceNumber(oggPage);\n\n    const oggPageStore = frameStore.get(oggPage);\n    const headerData = headerStore.get(oggPageStore[header]);\n\n    let offset = 0;\n    oggPageStore[segments] = headerData[pageSegmentTable].map((segmentLength) =>\n      oggPage[data][subarray](offset, (offset += segmentLength)),\n    );\n\n    // prepend any existing continued packet data\n    if (this._continuedPacket[length]) {\n      oggPageStore[segments][0] = concatBuffers(\n        this._continuedPacket,\n        oggPageStore[segments][0],\n      );\n\n      this._continuedPacket = new uint8Array();\n    }\n\n    // save any new continued packet data\n    if (\n      headerData[pageSegmentBytes][headerData[pageSegmentBytes][length] - 1] ===\n      0xff\n    ) {\n      this._continuedPacket = concatBuffers(\n        this._continuedPacket,\n        oggPageStore[segments].pop(),\n      );\n    }\n\n    if (this._isSupported) {\n      const frame = this._parser[parseOggPage](oggPage);\n      this._codecParser[mapFrameStats](frame);\n\n      return frame;\n    } else {\n      return oggPage;\n    }\n  }\n}\n\nexport default class OggParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n\n    this._onCodec = onCodec;\n    this.Frame = OggPage;\n    this.Header = OggPageHeader;\n\n    this._streams = new Map();\n    this._currentSerialNumber = null;\n  }\n\n  get [codec]() {\n    const oggStream = this._streams.get(this._currentSerialNumber);\n\n    return oggStream ? oggStream.codec : \"\";\n  }\n\n  *[parseFrame]() {\n    const oggPage = yield* this[fixedLengthFrameSync](true);\n    this._currentSerialNumber = oggPage[streamSerialNumber];\n\n    let oggStream = this._streams.get(this._currentSerialNumber);\n    if (!oggStream) {\n      oggStream = new OggStream(\n        this._codecParser,\n        this._headerCache,\n        this._onCodec,\n      );\n      this._streams.set(this._currentSerialNumber, oggStream);\n    }\n\n    if (oggPage[isLastPage]) this._streams.delete(this._currentSerialNumber);\n\n    return oggStream._parsePage(oggPage);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}