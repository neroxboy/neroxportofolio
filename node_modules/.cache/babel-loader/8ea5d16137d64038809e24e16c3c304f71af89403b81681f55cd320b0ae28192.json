{"ast":null,"code":"const bitWriter = (capacity = 16) => {\n  let buf = new Uint8Array(capacity);\n  let pos = 0;\n  let bit = 8;\n  const ensure = () => {\n    if (++pos === buf.length) {\n      let b = new Uint8Array(buf.length << 1);\n      b.set(buf);\n      buf = b;\n    }\n  };\n  return {\n    write: (x, n = 1) => {\n      x &= (1 << n) - 1;\n      let b = bit - n;\n      let m = bit < 8 ? ~((1 << bit) - 1) : 0;\n      if (b >= 0) {\n        m |= (1 << b) - 1;\n        buf[pos] = buf[pos] & m | x << b & ~m;\n        if (b === 0) {\n          ensure();\n          bit = 8;\n        } else {\n          bit = b;\n        }\n      } else {\n        bit = 8 + b;\n        buf[pos] = buf[pos] & m | x >>> -b & ~m;\n        ensure();\n        buf[pos] = buf[pos] & (1 << bit) - 1 | x << bit & 255;\n      }\n    },\n    bytes: () => buf.slice(0, pos + (bit & 7 ? 1 : 0))\n  };\n};\nconst bitReader = buf => {\n  let p = 0;\n  let b = 8;\n  return (n = 1) => {\n    let l = b - n;\n    let out;\n    if (l >= 0) {\n      b = l;\n      out = buf[p] >>> l & (1 << n) - 1;\n      if (!l) {\n        p++;\n        b = 8;\n      }\n    } else {\n      out = (buf[p++] & (1 << b) - 1) << -l;\n      b = 8 + l;\n      out = out | buf[p] >>> b;\n    }\n    return out;\n  };\n};\nconst read16 = read => read(8) << 8 | read(8);\nconst read24 = read => read16(read) << 8 | read(8);\nconst read32 = read => (read16(read) << 16 | read16(read)) >>> 0;\nexport { bitReader, bitWriter, read16, read24, read32 };","map":{"version":3,"names":["bitWriter","capacity","buf","Uint8Array","pos","bit","ensure","length","b","set","write","x","n","m","bytes","slice","bitReader","p","l","out","read16","read","read24","read32"],"sources":["C:/Users/vanitas/node_modules/@thi.ng/bitstream/simple.js"],"sourcesContent":["const bitWriter = (capacity = 16) => {\n  let buf = new Uint8Array(capacity);\n  let pos = 0;\n  let bit = 8;\n  const ensure = () => {\n    if (++pos === buf.length) {\n      let b = new Uint8Array(buf.length << 1);\n      b.set(buf);\n      buf = b;\n    }\n  };\n  return {\n    write: (x, n = 1) => {\n      x &= (1 << n) - 1;\n      let b = bit - n;\n      let m = bit < 8 ? ~((1 << bit) - 1) : 0;\n      if (b >= 0) {\n        m |= (1 << b) - 1;\n        buf[pos] = buf[pos] & m | x << b & ~m;\n        if (b === 0) {\n          ensure();\n          bit = 8;\n        } else {\n          bit = b;\n        }\n      } else {\n        bit = 8 + b;\n        buf[pos] = buf[pos] & m | x >>> -b & ~m;\n        ensure();\n        buf[pos] = buf[pos] & (1 << bit) - 1 | x << bit & 255;\n      }\n    },\n    bytes: () => buf.slice(0, pos + (bit & 7 ? 1 : 0))\n  };\n};\nconst bitReader = (buf) => {\n  let p = 0;\n  let b = 8;\n  return (n = 1) => {\n    let l = b - n;\n    let out;\n    if (l >= 0) {\n      b = l;\n      out = buf[p] >>> l & (1 << n) - 1;\n      if (!l) {\n        p++;\n        b = 8;\n      }\n    } else {\n      out = (buf[p++] & (1 << b) - 1) << -l;\n      b = 8 + l;\n      out = out | buf[p] >>> b;\n    }\n    return out;\n  };\n};\nconst read16 = (read) => read(8) << 8 | read(8);\nconst read24 = (read) => read16(read) << 8 | read(8);\nconst read32 = (read) => (read16(read) << 16 | read16(read)) >>> 0;\nexport {\n  bitReader,\n  bitWriter,\n  read16,\n  read24,\n  read32\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}