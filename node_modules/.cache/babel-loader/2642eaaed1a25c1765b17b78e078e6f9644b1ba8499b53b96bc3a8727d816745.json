{"ast":null,"code":"'use strict';\n\n/**\n * @file\n *\n * Copyright 2018 FutoIn Project (https://futoin.org)\n * Copyright 2018 Andrey Galkin <andrey@futoin.org>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst {\n  Buffer\n} = require('buffer');\nconst {\n  createHash,\n  createHmac\n} = require('crypto');\nconst g_digestLenCache = {};\n\n/**\n * Get expected hash length.\n *\n * @func\n * @alias hkdf.hash_length\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @returns {integer} hash digest byte length\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hash_length = hash => {\n  switch (hash) {\n    case 'sha256':\n      return 32;\n    case 'sha512':\n      return 64;\n    case 'sha224':\n      return 28;\n    case 'sha384':\n      return 48;\n    case 'sha3-256':\n      return 32;\n    case 'sha3-512':\n      return 64;\n    case 'sha3-224':\n      return 28;\n    case 'sha3-384':\n      return 48;\n    case 'blake2s256':\n      return 32;\n    case 'blake2b512':\n      return 64;\n    case 'sha1':\n      return 20;\n    case 'md5':\n      return 16;\n    default:\n      {\n        let len = g_digestLenCache[hash];\n        if (len === undefined) {\n          len = createHash(hash).digest().length;\n          g_digestLenCache[hash] = len;\n        }\n        return len;\n      }\n  }\n};\n\n/**\n * HKDF extract action.\n *\n * @func\n * @alias hkdf.extract\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {Buffer|string} salt - Optional salt (recommended)\n * @returns {Buffer} A buffer with pseudorandom key\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hkdf_extract = (hash, hash_len, ikm, salt) => {\n  const b_ikm = Buffer.isBuffer(ikm) ? ikm : Buffer.from(ikm);\n  const b_salt = salt && salt.length ? Buffer.from(salt) : Buffer.alloc(hash_len, 0);\n  return createHmac(hash, b_salt).update(b_ikm).digest();\n};\n\n/**\n * HKDF expand action.\n *\n * @func\n * @alias hkdf.expand\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} prk - A buffer with pseudorandom key\n * @param {integer} length - length of output keying material in octets\n * @param {Buffer|string} info - Optional context (safe to skip)\n * @returns {Buffer} A buffer with output keying material\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hkdf_expand = (hash, hash_len, prk, length, info) => {\n  const b_info = Buffer.isBuffer(info) ? info : Buffer.from(info || '');\n  const info_len = b_info.length;\n  const steps = Math.ceil(length / hash_len);\n  if (steps > 0xFF) {\n    throw new Error(`OKM length ${length} is too long for ${hash} hash`);\n  }\n\n  // use single buffer with unnecessary create/copy/move operations\n  const t = Buffer.alloc(hash_len * steps + info_len + 1);\n  for (let c = 1, start = 0, end = 0; c <= steps; ++c) {\n    // add info\n    b_info.copy(t, end);\n    // add counter\n    t[end + info_len] = c;\n    createHmac(hash, prk)\n    // use view: T(C) = T(C-1) | info | C\n    .update(t.slice(start, end + info_len + 1)).digest()\n    // put back to the same buffer\n    .copy(t, end);\n    start = end; // used for T(C-1) start\n    end += hash_len; // used for T(C-1) end & overall end\n  }\n  return t.slice(0, length);\n};\n\n/**\n * HMAC-based Extract-and-Expand Key Derivation Function (HKDF)\n *\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {integer} length - Required byte length of output\n * @param {Buffer|string} salt='' - Optional salt (recommended)\n * @param {Buffer|string} info='' - Optional context (safe to skip)\n * @param {string} hash='SHA-256' - HMAC hash function to use\n * @returns {Buffer} Raw buffer with derived key of @p length bytes\n */\nfunction hkdf(ikm, length, {\n  salt = '',\n  info = '',\n  hash = 'SHA-256'\n} = {}) {\n  hash = hash.toLowerCase().replace('-', '');\n\n  // 0. Hash length\n  const hash_len = hash_length(hash);\n\n  // 1. extract\n  const prk = hkdf_extract(hash, hash_len, ikm, salt);\n\n  // 2. expand\n  return hkdf_expand(hash, hash_len, prk, length, info);\n}\nObject.defineProperties(hkdf, {\n  hash_length: {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: hash_length\n  },\n  extract: {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: hkdf_extract\n  },\n  expand: {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: hkdf_expand\n  }\n});\nmodule.exports = hkdf;","map":{"version":3,"names":["Buffer","require","createHash","createHmac","g_digestLenCache","hash_length","hash","len","undefined","digest","length","hkdf_extract","hash_len","ikm","salt","b_ikm","isBuffer","from","b_salt","alloc","update","hkdf_expand","prk","info","b_info","info_len","steps","Math","ceil","Error","t","c","start","end","copy","slice","hkdf","toLowerCase","replace","Object","defineProperties","configurable","enumerable","writable","value","extract","expand","module","exports"],"sources":["C:/Users/vanitas/node_modules/futoin-hkdf/hkdf.js"],"sourcesContent":["'use strict';\n\n/**\n * @file\n *\n * Copyright 2018 FutoIn Project (https://futoin.org)\n * Copyright 2018 Andrey Galkin <andrey@futoin.org>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { Buffer } = require( 'buffer' );\nconst { createHash, createHmac } = require( 'crypto' );\n\nconst g_digestLenCache = {};\n\n/**\n * Get expected hash length.\n *\n * @func\n * @alias hkdf.hash_length\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @returns {integer} hash digest byte length\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hash_length = ( hash ) => {\n    switch ( hash ) {\n    case 'sha256': return 32;\n    case 'sha512': return 64;\n    case 'sha224': return 28;\n    case 'sha384': return 48;\n    case 'sha3-256': return 32;\n    case 'sha3-512': return 64;\n    case 'sha3-224': return 28;\n    case 'sha3-384': return 48;\n    case 'blake2s256': return 32;\n    case 'blake2b512': return 64;\n    case 'sha1': return 20;\n    case 'md5': return 16;\n    default: {\n        let len = g_digestLenCache[hash];\n\n        if ( len === undefined ) {\n            len = createHash( hash ).digest().length;\n            g_digestLenCache[hash] = len;\n        }\n\n        return len;\n    }\n    }\n};\n\n/**\n * HKDF extract action.\n *\n * @func\n * @alias hkdf.extract\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {Buffer|string} salt - Optional salt (recommended)\n * @returns {Buffer} A buffer with pseudorandom key\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hkdf_extract = ( hash, hash_len, ikm, salt ) => {\n    const b_ikm = Buffer.isBuffer( ikm ) ? ikm : Buffer.from( ikm );\n    const b_salt = ( salt && salt.length ) ? Buffer.from( salt ) : Buffer.alloc( hash_len, 0 );\n\n    return createHmac( hash, b_salt ).update( b_ikm ).digest();\n};\n\n/**\n * HKDF expand action.\n *\n * @func\n * @alias hkdf.expand\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} prk - A buffer with pseudorandom key\n * @param {integer} length - length of output keying material in octets\n * @param {Buffer|string} info - Optional context (safe to skip)\n * @returns {Buffer} A buffer with output keying material\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hkdf_expand = ( hash, hash_len, prk, length, info ) => {\n    const b_info = Buffer.isBuffer( info ) ? info : Buffer.from( info || '' );\n    const info_len = b_info.length;\n\n    const steps = Math.ceil( length / hash_len );\n\n    if ( steps > 0xFF ) {\n        throw new Error( `OKM length ${length} is too long for ${hash} hash` );\n    }\n\n    // use single buffer with unnecessary create/copy/move operations\n    const t = Buffer.alloc( hash_len * steps + info_len + 1 );\n\n    for ( let c = 1, start = 0, end = 0; c <= steps; ++c ) {\n        // add info\n        b_info.copy( t, end );\n        // add counter\n        t[ end + info_len ] = c;\n\n        createHmac( hash, prk )\n            // use view: T(C) = T(C-1) | info | C\n            .update( t.slice( start, end + info_len + 1 ) )\n            .digest()\n            // put back to the same buffer\n            .copy( t, end );\n\n        start = end; // used for T(C-1) start\n        end += hash_len; // used for T(C-1) end & overall end\n    }\n\n    return t.slice( 0, length );\n};\n\n/**\n * HMAC-based Extract-and-Expand Key Derivation Function (HKDF)\n *\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {integer} length - Required byte length of output\n * @param {Buffer|string} salt='' - Optional salt (recommended)\n * @param {Buffer|string} info='' - Optional context (safe to skip)\n * @param {string} hash='SHA-256' - HMAC hash function to use\n * @returns {Buffer} Raw buffer with derived key of @p length bytes\n */\nfunction hkdf( ikm, length, { salt='', info='', hash='SHA-256' } = {} ) {\n    hash = hash.toLowerCase().replace( '-', '' );\n\n    // 0. Hash length\n    const hash_len = hash_length( hash );\n\n    // 1. extract\n    const prk = hkdf_extract( hash, hash_len, ikm, salt );\n\n    // 2. expand\n    return hkdf_expand( hash, hash_len, prk, length, info );\n}\n\nObject.defineProperties( hkdf, {\n    hash_length : {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: hash_length,\n    },\n    extract : {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: hkdf_extract,\n    },\n    expand : {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: hkdf_expand,\n    },\n} );\n\nmodule.exports = hkdf;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}