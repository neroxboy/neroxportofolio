{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\n\n1  1) [packet_type] : 8 bit value\n2  2) 0x76, 0x6f, 0x72, 0x62, 0x69, 0x73: the characters ’v’,’o’,’r’,’b’,’i’,’s’ as six octets\n\nLetter bits Description\nA      8    Packet type\nB      48   Magic signature (vorbis)\nC      32   Version number\nD      8    Channels\nE      32   Sample rate\nF      32   Bitrate Maximum (signed)\nG      32   Bitrate Nominal (signed)\nH      32   Bitrate Minimum (signed)\nI      4    blocksize 1\nJ      4    blocksize 0\nK      1    Framing flag\n*/\n\nimport { vorbisOpusChannelMapping, bitDepth, channelMode, sampleRate, channels, length, bitrateMaximum, bitrateMinimum, bitrateNominal, blocksize0, blocksize1, data, vorbisComments, vorbisSetup, version, buffer, subarray, getHeader, setHeader, getHeaderFromUint8Array, uint8Array, dataView } from \"../../constants.js\";\nimport { bytesToString } from \"../../utilities.js\";\nimport CodecHeader from \"../CodecHeader.js\";\nconst blockSizes = {\n  // 0b0110: 64,\n  // 0b0111: 128,\n  // 0b1000: 256,\n  // 0b1001: 512,\n  // 0b1010: 1024,\n  // 0b1011: 2048,\n  // 0b1100: 4096,\n  // 0b1101: 8192\n};\nfor (let i = 0; i < 8; i++) blockSizes[i + 6] = 2 ** (6 + i);\nexport default class VorbisHeader extends CodecHeader {\n  static [getHeaderFromUint8Array](dataValue, headerCache, vorbisCommentsData, vorbisSetupData) {\n    // Must be at least 30 bytes.\n    if (dataValue[length] < 30) throw new Error(\"Out of data while inside an Ogg Page\");\n\n    // Check header cache\n    const key = bytesToString(dataValue[subarray](0, 30));\n    const cachedHeader = headerCache[getHeader](key);\n    if (cachedHeader) return new VorbisHeader(cachedHeader);\n    const header = {\n      [length]: 30\n    };\n\n    // Bytes (1-7 of 30): /01vorbis - Magic Signature\n    if (key.substr(0, 7) !== \"\\x01vorbis\") {\n      return null;\n    }\n    header[data] = uint8Array.from(dataValue[subarray](0, 30));\n    const view = new dataView(header[data][buffer]);\n\n    // Byte (8-11 of 30)\n    // * `CCCCCCCC|CCCCCCCC|CCCCCCCC|CCCCCCCC`: Version number\n    header[version] = view.getUint32(7, true);\n    if (header[version] !== 0) return null;\n\n    // Byte (12 of 30)\n    // * `DDDDDDDD`: Channel Count\n    header[channels] = dataValue[11];\n    header[channelMode] = vorbisOpusChannelMapping[header[channels] - 1] || \"application defined\";\n\n    // Byte (13-16 of 30)\n    // * `EEEEEEEE|EEEEEEEE|EEEEEEEE|EEEEEEEE`: Sample Rate\n    header[sampleRate] = view.getUint32(12, true);\n\n    // Byte (17-20 of 30)\n    // * `FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF`: Bitrate Maximum\n    header[bitrateMaximum] = view.getInt32(16, true);\n\n    // Byte (21-24 of 30)\n    // * `GGGGGGGG|GGGGGGGG|GGGGGGGG|GGGGGGGG`: Bitrate Nominal\n    header[bitrateNominal] = view.getInt32(20, true);\n\n    // Byte (25-28 of 30)\n    // * `HHHHHHHH|HHHHHHHH|HHHHHHHH|HHHHHHHH`: Bitrate Minimum\n    header[bitrateMinimum] = view.getInt32(24, true);\n\n    // Byte (29 of 30)\n    // * `IIII....` Blocksize 1\n    // * `....JJJJ` Blocksize 0\n    header[blocksize1] = blockSizes[(dataValue[28] & 0b11110000) >> 4];\n    header[blocksize0] = blockSizes[dataValue[28] & 0b00001111];\n    if (header[blocksize0] > header[blocksize1]) return null;\n\n    // Byte (29 of 30)\n    // * `00000001` Framing bit\n    if (dataValue[29] !== 0x01) return null;\n    header[bitDepth] = 32;\n    header[vorbisSetup] = vorbisSetupData;\n    header[vorbisComments] = vorbisCommentsData;\n    {\n      // set header cache\n      const {\n        length,\n        data,\n        version,\n        vorbisSetup,\n        vorbisComments,\n        ...codecUpdateFields\n      } = header;\n      headerCache[setHeader](key, header, codecUpdateFields);\n    }\n    return new VorbisHeader(header);\n  }\n\n  /**\n   * @private\n   * Call VorbisHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n    this[bitrateMaximum] = header[bitrateMaximum];\n    this[bitrateMinimum] = header[bitrateMinimum];\n    this[bitrateNominal] = header[bitrateNominal];\n    this[blocksize0] = header[blocksize0];\n    this[blocksize1] = header[blocksize1];\n    this[data] = header[data];\n    this[vorbisComments] = header[vorbisComments];\n    this[vorbisSetup] = header[vorbisSetup];\n  }\n}","map":{"version":3,"names":["vorbisOpusChannelMapping","bitDepth","channelMode","sampleRate","channels","length","bitrateMaximum","bitrateMinimum","bitrateNominal","blocksize0","blocksize1","data","vorbisComments","vorbisSetup","version","buffer","subarray","getHeader","setHeader","getHeaderFromUint8Array","uint8Array","dataView","bytesToString","CodecHeader","blockSizes","i","VorbisHeader","dataValue","headerCache","vorbisCommentsData","vorbisSetupData","Error","key","cachedHeader","header","substr","from","view","getUint32","getInt32","codecUpdateFields","constructor"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/codecs/vorbis/VorbisHeader.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\n\n1  1) [packet_type] : 8 bit value\n2  2) 0x76, 0x6f, 0x72, 0x62, 0x69, 0x73: the characters ’v’,’o’,’r’,’b’,’i’,’s’ as six octets\n\nLetter bits Description\nA      8    Packet type\nB      48   Magic signature (vorbis)\nC      32   Version number\nD      8    Channels\nE      32   Sample rate\nF      32   Bitrate Maximum (signed)\nG      32   Bitrate Nominal (signed)\nH      32   Bitrate Minimum (signed)\nI      4    blocksize 1\nJ      4    blocksize 0\nK      1    Framing flag\n*/\n\nimport {\n  vorbisOpusChannelMapping,\n  bitDepth,\n  channelMode,\n  sampleRate,\n  channels,\n  length,\n  bitrateMaximum,\n  bitrateMinimum,\n  bitrateNominal,\n  blocksize0,\n  blocksize1,\n  data,\n  vorbisComments,\n  vorbisSetup,\n  version,\n  buffer,\n  subarray,\n  getHeader,\n  setHeader,\n  getHeaderFromUint8Array,\n  uint8Array,\n  dataView,\n} from \"../../constants.js\";\nimport { bytesToString } from \"../../utilities.js\";\n\nimport CodecHeader from \"../CodecHeader.js\";\n\nconst blockSizes = {\n  // 0b0110: 64,\n  // 0b0111: 128,\n  // 0b1000: 256,\n  // 0b1001: 512,\n  // 0b1010: 1024,\n  // 0b1011: 2048,\n  // 0b1100: 4096,\n  // 0b1101: 8192\n};\nfor (let i = 0; i < 8; i++) blockSizes[i + 6] = 2 ** (6 + i);\n\nexport default class VorbisHeader extends CodecHeader {\n  static [getHeaderFromUint8Array](\n    dataValue,\n    headerCache,\n    vorbisCommentsData,\n    vorbisSetupData,\n  ) {\n    // Must be at least 30 bytes.\n    if (dataValue[length] < 30)\n      throw new Error(\"Out of data while inside an Ogg Page\");\n\n    // Check header cache\n    const key = bytesToString(dataValue[subarray](0, 30));\n    const cachedHeader = headerCache[getHeader](key);\n    if (cachedHeader) return new VorbisHeader(cachedHeader);\n\n    const header = { [length]: 30 };\n\n    // Bytes (1-7 of 30): /01vorbis - Magic Signature\n    if (key.substr(0, 7) !== \"\\x01vorbis\") {\n      return null;\n    }\n\n    header[data] = uint8Array.from(dataValue[subarray](0, 30));\n    const view = new dataView(header[data][buffer]);\n\n    // Byte (8-11 of 30)\n    // * `CCCCCCCC|CCCCCCCC|CCCCCCCC|CCCCCCCC`: Version number\n    header[version] = view.getUint32(7, true);\n    if (header[version] !== 0) return null;\n\n    // Byte (12 of 30)\n    // * `DDDDDDDD`: Channel Count\n    header[channels] = dataValue[11];\n    header[channelMode] =\n      vorbisOpusChannelMapping[header[channels] - 1] || \"application defined\";\n\n    // Byte (13-16 of 30)\n    // * `EEEEEEEE|EEEEEEEE|EEEEEEEE|EEEEEEEE`: Sample Rate\n    header[sampleRate] = view.getUint32(12, true);\n\n    // Byte (17-20 of 30)\n    // * `FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF`: Bitrate Maximum\n    header[bitrateMaximum] = view.getInt32(16, true);\n\n    // Byte (21-24 of 30)\n    // * `GGGGGGGG|GGGGGGGG|GGGGGGGG|GGGGGGGG`: Bitrate Nominal\n    header[bitrateNominal] = view.getInt32(20, true);\n\n    // Byte (25-28 of 30)\n    // * `HHHHHHHH|HHHHHHHH|HHHHHHHH|HHHHHHHH`: Bitrate Minimum\n    header[bitrateMinimum] = view.getInt32(24, true);\n\n    // Byte (29 of 30)\n    // * `IIII....` Blocksize 1\n    // * `....JJJJ` Blocksize 0\n    header[blocksize1] = blockSizes[(dataValue[28] & 0b11110000) >> 4];\n    header[blocksize0] = blockSizes[dataValue[28] & 0b00001111];\n    if (header[blocksize0] > header[blocksize1]) return null;\n\n    // Byte (29 of 30)\n    // * `00000001` Framing bit\n    if (dataValue[29] !== 0x01) return null;\n\n    header[bitDepth] = 32;\n    header[vorbisSetup] = vorbisSetupData;\n    header[vorbisComments] = vorbisCommentsData;\n\n    {\n      // set header cache\n      const {\n        length,\n        data,\n        version,\n        vorbisSetup,\n        vorbisComments,\n        ...codecUpdateFields\n      } = header;\n      headerCache[setHeader](key, header, codecUpdateFields);\n    }\n\n    return new VorbisHeader(header);\n  }\n\n  /**\n   * @private\n   * Call VorbisHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n\n    this[bitrateMaximum] = header[bitrateMaximum];\n    this[bitrateMinimum] = header[bitrateMinimum];\n    this[bitrateNominal] = header[bitrateNominal];\n    this[blocksize0] = header[blocksize0];\n    this[blocksize1] = header[blocksize1];\n    this[data] = header[data];\n    this[vorbisComments] = header[vorbisComments];\n    this[vorbisSetup] = header[vorbisSetup];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}