{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeWAM = void 0;\nconst constants_1 = require(\"./constants\");\nconst getHeaderBitLength = key => key < 256 ? 2 : 3;\nconst encodeWAM = binaryInfo => {\n  binaryInfo.buffer = [];\n  encodeWAMHeader(binaryInfo);\n  encodeEvents(binaryInfo);\n  console.log(binaryInfo.buffer);\n  const totalSize = binaryInfo.buffer.map(a => a.length).reduce((a, b) => a + b);\n  const buffer = Buffer.alloc(totalSize);\n  let offset = 0;\n  binaryInfo.buffer.forEach(buffer_ => {\n    buffer_.copy(buffer, offset);\n    offset += buffer_.length;\n  });\n  return buffer;\n};\nexports.encodeWAM = encodeWAM;\nfunction encodeWAMHeader(binaryInfo) {\n  const headerBuffer = Buffer.alloc(8); // starting buffer\n  headerBuffer.write('WAM', 0, 'utf8');\n  headerBuffer.writeUInt8(binaryInfo.protocolVersion, 3);\n  headerBuffer.writeUInt8(1, 4); //random flag\n  headerBuffer.writeUInt16BE(binaryInfo.sequence, 5);\n  headerBuffer.writeUInt8(0, 7); // regular channel\n  binaryInfo.buffer.push(headerBuffer);\n}\nfunction encodeGlobalAttributes(binaryInfo, globals) {\n  for (const [key, _value] of Object.entries(globals)) {\n    const id = constants_1.WEB_GLOBALS.find(a => (a === null || a === void 0 ? void 0 : a.name) === key).id;\n    let value = _value;\n    if (typeof value === 'boolean') {\n      value = value ? 1 : 0;\n    }\n    binaryInfo.buffer.push(serializeData(id, value, constants_1.FLAG_GLOBAL));\n  }\n}\nfunction encodeEvents(binaryInfo) {\n  for (const [name, {\n    props,\n    globals\n  }] of binaryInfo.events.map(a => Object.entries(a)[0])) {\n    encodeGlobalAttributes(binaryInfo, globals);\n    const event = constants_1.WEB_EVENTS.find(a => a.name === name);\n    const props_ = Object.entries(props);\n    let extended = false;\n    for (const [, value] of props_) {\n      extended || (extended = value !== null);\n    }\n    const eventFlag = extended ? constants_1.FLAG_EVENT : constants_1.FLAG_EVENT | constants_1.FLAG_EXTENDED;\n    binaryInfo.buffer.push(serializeData(event.id, -event.weight, eventFlag));\n    for (let i = 0; i < props_.length; i++) {\n      const [key, _value] = props_[i];\n      const id = event.props[key][0];\n      extended = i < props_.length - 1;\n      let value = _value;\n      if (typeof value === 'boolean') {\n        value = value ? 1 : 0;\n      }\n      const fieldFlag = extended ? constants_1.FLAG_EVENT : constants_1.FLAG_FIELD | constants_1.FLAG_EXTENDED;\n      binaryInfo.buffer.push(serializeData(id, value, fieldFlag));\n    }\n  }\n}\nfunction serializeData(key, value, flag) {\n  const bufferLength = getHeaderBitLength(key);\n  let buffer;\n  let offset = 0;\n  if (value === null) {\n    if (flag === constants_1.FLAG_GLOBAL) {\n      buffer = Buffer.alloc(bufferLength);\n      offset = serializeHeader(buffer, offset, key, flag);\n      return buffer;\n    }\n  } else if (typeof value === 'number' && Number.isInteger(value)) {\n    // is number\n    if (value === 0 || value === 1) {\n      buffer = Buffer.alloc(bufferLength);\n      offset = serializeHeader(buffer, offset, key, flag | value + 1 << 4);\n      return buffer;\n    } else if (-128 <= value && value < 128) {\n      buffer = Buffer.alloc(bufferLength + 1);\n      offset = serializeHeader(buffer, offset, key, flag | 3 << 4);\n      buffer.writeInt8(value, offset);\n      return buffer;\n    } else if (-32768 <= value && value < 32768) {\n      buffer = Buffer.alloc(bufferLength + 2);\n      offset = serializeHeader(buffer, offset, key, flag | 4 << 4);\n      buffer.writeInt16LE(value, offset);\n      return buffer;\n    } else if (-2147483648 <= value && value < 2147483648) {\n      buffer = Buffer.alloc(bufferLength + 4);\n      offset = serializeHeader(buffer, offset, key, flag | 5 << 4);\n      buffer.writeInt32LE(value, offset);\n      return buffer;\n    } else {\n      buffer = Buffer.alloc(bufferLength + 8);\n      offset = serializeHeader(buffer, offset, key, flag | 7 << 4);\n      buffer.writeDoubleLE(value, offset);\n      return buffer;\n    }\n  } else if (typeof value === 'number') {\n    // is float\n    buffer = Buffer.alloc(bufferLength + 8);\n    offset = serializeHeader(buffer, offset, key, flag | 7 << 4);\n    buffer.writeDoubleLE(value, offset);\n    return buffer;\n  } else if (typeof value === 'string') {\n    // is string\n    const utf8Bytes = Buffer.byteLength(value, 'utf8');\n    if (utf8Bytes < 256) {\n      buffer = Buffer.alloc(bufferLength + 1 + utf8Bytes);\n      offset = serializeHeader(buffer, offset, key, flag | 8 << 4);\n      buffer.writeUint8(utf8Bytes, offset++);\n    } else if (utf8Bytes < 65536) {\n      buffer = Buffer.alloc(bufferLength + 2 + utf8Bytes);\n      offset = serializeHeader(buffer, offset, key, flag | 9 << 4);\n      buffer.writeUInt16LE(utf8Bytes, offset);\n      offset += 2;\n    } else {\n      buffer = Buffer.alloc(bufferLength + 4 + utf8Bytes);\n      offset = serializeHeader(buffer, offset, key, flag | 10 << 4);\n      buffer.writeUInt32LE(utf8Bytes, offset);\n      offset += 4;\n    }\n    buffer.write(value, offset, 'utf8');\n    return buffer;\n  }\n  throw 'missing';\n}\nfunction serializeHeader(buffer, offset, key, flag) {\n  if (key < 256) {\n    buffer.writeUInt8(flag, offset);\n    offset += 1;\n    buffer.writeUInt8(key, offset);\n    offset += 1;\n  } else {\n    buffer.writeUInt8(flag | constants_1.FLAG_BYTE, offset);\n    offset += 1;\n    buffer.writeUInt16LE(key, offset);\n    offset += 2;\n  }\n  return offset;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","encodeWAM","constants_1","require","getHeaderBitLength","key","binaryInfo","buffer","encodeWAMHeader","encodeEvents","console","log","totalSize","map","a","length","reduce","b","Buffer","alloc","offset","forEach","buffer_","copy","headerBuffer","write","writeUInt8","protocolVersion","writeUInt16BE","sequence","push","encodeGlobalAttributes","globals","_value","entries","id","WEB_GLOBALS","find","name","serializeData","FLAG_GLOBAL","props","events","event","WEB_EVENTS","props_","extended","eventFlag","FLAG_EVENT","FLAG_EXTENDED","weight","i","fieldFlag","FLAG_FIELD","flag","bufferLength","serializeHeader","Number","isInteger","writeInt8","writeInt16LE","writeInt32LE","writeDoubleLE","utf8Bytes","byteLength","writeUint8","writeUInt16LE","writeUInt32LE","FLAG_BYTE"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/WAM/encode.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeWAM = void 0;\nconst constants_1 = require(\"./constants\");\nconst getHeaderBitLength = (key) => (key < 256 ? 2 : 3);\nconst encodeWAM = (binaryInfo) => {\n    binaryInfo.buffer = [];\n    encodeWAMHeader(binaryInfo);\n    encodeEvents(binaryInfo);\n    console.log(binaryInfo.buffer);\n    const totalSize = binaryInfo.buffer\n        .map((a) => a.length)\n        .reduce((a, b) => a + b);\n    const buffer = Buffer.alloc(totalSize);\n    let offset = 0;\n    binaryInfo.buffer.forEach((buffer_) => {\n        buffer_.copy(buffer, offset);\n        offset += buffer_.length;\n    });\n    return buffer;\n};\nexports.encodeWAM = encodeWAM;\nfunction encodeWAMHeader(binaryInfo) {\n    const headerBuffer = Buffer.alloc(8); // starting buffer\n    headerBuffer.write('WAM', 0, 'utf8');\n    headerBuffer.writeUInt8(binaryInfo.protocolVersion, 3);\n    headerBuffer.writeUInt8(1, 4); //random flag\n    headerBuffer.writeUInt16BE(binaryInfo.sequence, 5);\n    headerBuffer.writeUInt8(0, 7); // regular channel\n    binaryInfo.buffer.push(headerBuffer);\n}\nfunction encodeGlobalAttributes(binaryInfo, globals) {\n    for (const [key, _value] of Object.entries(globals)) {\n        const id = constants_1.WEB_GLOBALS.find(a => (a === null || a === void 0 ? void 0 : a.name) === key).id;\n        let value = _value;\n        if (typeof value === 'boolean') {\n            value = value ? 1 : 0;\n        }\n        binaryInfo.buffer.push(serializeData(id, value, constants_1.FLAG_GLOBAL));\n    }\n}\nfunction encodeEvents(binaryInfo) {\n    for (const [name, { props, globals },] of binaryInfo.events.map((a) => Object.entries(a)[0])) {\n        encodeGlobalAttributes(binaryInfo, globals);\n        const event = constants_1.WEB_EVENTS.find((a) => a.name === name);\n        const props_ = Object.entries(props);\n        let extended = false;\n        for (const [, value] of props_) {\n            extended || (extended = value !== null);\n        }\n        const eventFlag = extended ? constants_1.FLAG_EVENT : constants_1.FLAG_EVENT | constants_1.FLAG_EXTENDED;\n        binaryInfo.buffer.push(serializeData(event.id, -event.weight, eventFlag));\n        for (let i = 0; i < props_.length; i++) {\n            const [key, _value] = props_[i];\n            const id = (event.props)[key][0];\n            extended = i < (props_.length - 1);\n            let value = _value;\n            if (typeof value === 'boolean') {\n                value = value ? 1 : 0;\n            }\n            const fieldFlag = extended ? constants_1.FLAG_EVENT : constants_1.FLAG_FIELD | constants_1.FLAG_EXTENDED;\n            binaryInfo.buffer.push(serializeData(id, value, fieldFlag));\n        }\n    }\n}\nfunction serializeData(key, value, flag) {\n    const bufferLength = getHeaderBitLength(key);\n    let buffer;\n    let offset = 0;\n    if (value === null) {\n        if (flag === constants_1.FLAG_GLOBAL) {\n            buffer = Buffer.alloc(bufferLength);\n            offset = serializeHeader(buffer, offset, key, flag);\n            return buffer;\n        }\n    }\n    else if (typeof value === 'number' && Number.isInteger(value)) {\n        // is number\n        if (value === 0 || value === 1) {\n            buffer = Buffer.alloc(bufferLength);\n            offset = serializeHeader(buffer, offset, key, flag | ((value + 1) << 4));\n            return buffer;\n        }\n        else if (-128 <= value && value < 128) {\n            buffer = Buffer.alloc(bufferLength + 1);\n            offset = serializeHeader(buffer, offset, key, flag | (3 << 4));\n            buffer.writeInt8(value, offset);\n            return buffer;\n        }\n        else if (-32768 <= value && value < 32768) {\n            buffer = Buffer.alloc(bufferLength + 2);\n            offset = serializeHeader(buffer, offset, key, flag | (4 << 4));\n            buffer.writeInt16LE(value, offset);\n            return buffer;\n        }\n        else if (-2147483648 <= value && value < 2147483648) {\n            buffer = Buffer.alloc(bufferLength + 4);\n            offset = serializeHeader(buffer, offset, key, flag | (5 << 4));\n            buffer.writeInt32LE(value, offset);\n            return buffer;\n        }\n        else {\n            buffer = Buffer.alloc(bufferLength + 8);\n            offset = serializeHeader(buffer, offset, key, flag | (7 << 4));\n            buffer.writeDoubleLE(value, offset);\n            return buffer;\n        }\n    }\n    else if (typeof value === 'number') {\n        // is float\n        buffer = Buffer.alloc(bufferLength + 8);\n        offset = serializeHeader(buffer, offset, key, flag | (7 << 4));\n        buffer.writeDoubleLE(value, offset);\n        return buffer;\n    }\n    else if (typeof value === 'string') {\n        // is string\n        const utf8Bytes = Buffer.byteLength(value, 'utf8');\n        if (utf8Bytes < 256) {\n            buffer = Buffer.alloc(bufferLength + 1 + utf8Bytes);\n            offset = serializeHeader(buffer, offset, key, flag | (8 << 4));\n            buffer.writeUint8(utf8Bytes, offset++);\n        }\n        else if (utf8Bytes < 65536) {\n            buffer = Buffer.alloc(bufferLength + 2 + utf8Bytes);\n            offset = serializeHeader(buffer, offset, key, flag | (9 << 4));\n            buffer.writeUInt16LE(utf8Bytes, offset);\n            offset += 2;\n        }\n        else {\n            buffer = Buffer.alloc(bufferLength + 4 + utf8Bytes);\n            offset = serializeHeader(buffer, offset, key, flag | (10 << 4));\n            buffer.writeUInt32LE(utf8Bytes, offset);\n            offset += 4;\n        }\n        buffer.write(value, offset, 'utf8');\n        return buffer;\n    }\n    throw 'missing';\n}\nfunction serializeHeader(buffer, offset, key, flag) {\n    if (key < 256) {\n        buffer.writeUInt8(flag, offset);\n        offset += 1;\n        buffer.writeUInt8(key, offset);\n        offset += 1;\n    }\n    else {\n        buffer.writeUInt8(flag | constants_1.FLAG_BYTE, offset);\n        offset += 1;\n        buffer.writeUInt16LE(key, offset);\n        offset += 2;\n    }\n    return offset;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}