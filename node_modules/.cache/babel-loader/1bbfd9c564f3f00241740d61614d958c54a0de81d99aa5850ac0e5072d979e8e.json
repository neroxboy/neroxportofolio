{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MpcSv7Parser = void 0;\nconst debug_1 = require(\"debug\");\nconst BasicParser_1 = require(\"../../common/BasicParser\");\nconst APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\nconst BitReader_1 = require(\"./BitReader\");\nconst SV7 = require(\"./StreamVersion7\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MpcSv7Parser extends BasicParser_1.BasicParser {\n  constructor() {\n    super(...arguments);\n    this.audioLength = 0;\n  }\n  async parse() {\n    const header = await this.tokenizer.readToken(SV7.Header);\n    if (header.signature !== 'MP+') throw new Error('Unexpected magic number');\n    debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n    this.metadata.setFormat('container', 'Musepack, SV7');\n    this.metadata.setFormat('sampleRate', header.sampleFrequency);\n    const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n    this.duration = numberOfSamples / header.sampleFrequency;\n    this.metadata.setFormat('duration', this.duration);\n    this.bitreader = new BitReader_1.BitReader(this.tokenizer);\n    this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n    const version = await this.bitreader.read(8);\n    this.metadata.setFormat('codec', (version / 100).toFixed(2));\n    await this.skipAudioData(header.frameCount);\n    debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n  }\n  async skipAudioData(frameCount) {\n    while (frameCount-- > 0) {\n      const frameLength = await this.bitreader.read(20);\n      this.audioLength += 20 + frameLength;\n      await this.bitreader.ignore(frameLength);\n    }\n    // last frame\n    const lastFrameLength = await this.bitreader.read(11);\n    this.audioLength += lastFrameLength;\n    this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n  }\n}\nexports.MpcSv7Parser = MpcSv7Parser;","map":{"version":3,"names":["Object","defineProperty","exports","value","MpcSv7Parser","debug_1","require","BasicParser_1","APEv2Parser_1","BitReader_1","SV7","debug","default","BasicParser","constructor","arguments","audioLength","parse","header","tokenizer","readToken","Header","signature","Error","streamMajorVersion","streamMinorVersion","metadata","setFormat","sampleFrequency","numberOfSamples","frameCount","lastFrameLength","duration","bitreader","BitReader","midSideStereo","intensityStereo","version","read","toFixed","skipAudioData","position","APEv2Parser","tryParseApeHeader","options","frameLength","ignore"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MpcSv7Parser = void 0;\nconst debug_1 = require(\"debug\");\nconst BasicParser_1 = require(\"../../common/BasicParser\");\nconst APEv2Parser_1 = require(\"../../apev2/APEv2Parser\");\nconst BitReader_1 = require(\"./BitReader\");\nconst SV7 = require(\"./StreamVersion7\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MpcSv7Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new Error('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader_1.BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n    }\n}\nexports.MpcSv7Parser = MpcSv7Parser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}