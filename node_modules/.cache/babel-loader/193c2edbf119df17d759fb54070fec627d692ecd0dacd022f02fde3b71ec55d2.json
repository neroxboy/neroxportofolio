{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mobileRegisterFetch = exports.mobileRegisterEncrypt = exports.mobileRegister = exports.mobileRegisterExists = exports.mobileRegisterCode = exports.registrationParams = exports.makeRegistrationSocket = void 0;\n/* eslint-disable camelcase */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst Defaults_1 = require(\"../Defaults\");\nconst crypto_1 = require(\"../Utils/crypto\");\nconst WABinary_1 = require(\"../WABinary\");\nconst business_1 = require(\"./business\");\nfunction urlencode(str) {\n  return str.replace(/-/g, '%2d').replace(/_/g, '%5f').replace(/~/g, '%7e');\n}\nconst validRegistrationOptions = config => (config === null || config === void 0 ? void 0 : config.phoneNumberCountryCode) && config.phoneNumberNationalNumber && config.phoneNumberMobileCountryCode;\nconst makeRegistrationSocket = config => {\n  const sock = (0, business_1.makeBusinessSocket)(config);\n  const register = async code => {\n    if (!validRegistrationOptions(config.auth.creds.registration)) {\n      throw new Error('please specify the registration options');\n    }\n    const result = await mobileRegister({\n      ...sock.authState.creds,\n      ...sock.authState.creds.registration,\n      code\n    }, config.options);\n    sock.authState.creds.me = {\n      id: (0, WABinary_1.jidEncode)(result.login, 's.whatsapp.net'),\n      name: '~'\n    };\n    sock.authState.creds.registered = true;\n    sock.ev.emit('creds.update', sock.authState.creds);\n    return result;\n  };\n  const requestRegistrationCode = async registrationOptions => {\n    registrationOptions = registrationOptions || config.auth.creds.registration;\n    if (!validRegistrationOptions(registrationOptions)) {\n      throw new Error('Invalid registration options');\n    }\n    sock.authState.creds.registration = registrationOptions;\n    sock.ev.emit('creds.update', sock.authState.creds);\n    return mobileRegisterCode({\n      ...config.auth.creds,\n      ...registrationOptions\n    }, config.options);\n  };\n  return {\n    ...sock,\n    register,\n    requestRegistrationCode\n  };\n};\nexports.makeRegistrationSocket = makeRegistrationSocket;\nfunction convertBufferToUrlHex(buffer) {\n  var id = '';\n  buffer.forEach(x => {\n    // encode random identity_id buffer as percentage url encoding\n    id += `%${x.toString(16).padStart(2, '0').toLowerCase()}`;\n  });\n  return id;\n}\nfunction registrationParams(params) {\n  const e_regid = Buffer.alloc(4);\n  e_regid.writeInt32BE(params.registrationId);\n  const e_skey_id = Buffer.alloc(3);\n  e_skey_id.writeInt16BE(params.signedPreKey.keyId);\n  params.phoneNumberCountryCode = params.phoneNumberCountryCode.replace('+', '').trim();\n  params.phoneNumberNationalNumber = params.phoneNumberNationalNumber.replace(/[/-\\s)(]/g, '').trim();\n  return {\n    cc: params.phoneNumberCountryCode,\n    in: params.phoneNumberNationalNumber,\n    Rc: '0',\n    lg: 'en',\n    lc: 'GB',\n    mistyped: '6',\n    authkey: Buffer.from(params.noiseKey.public).toString('base64url'),\n    e_regid: e_regid.toString('base64url'),\n    e_keytype: 'BQ',\n    e_ident: Buffer.from(params.signedIdentityKey.public).toString('base64url'),\n    // e_skey_id: e_skey_id.toString('base64url'),\n    e_skey_id: 'AAAA',\n    e_skey_val: Buffer.from(params.signedPreKey.keyPair.public).toString('base64url'),\n    e_skey_sig: Buffer.from(params.signedPreKey.signature).toString('base64url'),\n    fdid: params.phoneId,\n    network_ratio_type: '1',\n    expid: params.deviceId,\n    simnum: '1',\n    hasinrc: '1',\n    pid: Math.floor(Math.random() * 1000).toString(),\n    id: convertBufferToUrlHex(params.identityId),\n    backup_token: convertBufferToUrlHex(params.backupToken),\n    token: (0, crypto_1.md5)(Buffer.concat([Defaults_1.MOBILE_TOKEN, Buffer.from(params.phoneNumberNationalNumber)])).toString('hex'),\n    fraud_checkpoint_code: params.captcha\n  };\n}\nexports.registrationParams = registrationParams;\n/**\n * Requests a registration code for the given phone number.\n */\nfunction mobileRegisterCode(params, fetchOptions) {\n  return mobileRegisterFetch('/code', {\n    params: {\n      ...registrationParams(params),\n      mcc: `${params.phoneNumberMobileCountryCode}`.padStart(3, '0'),\n      mnc: `${params.phoneNumberMobileNetworkCode || '001'}`.padStart(3, '0'),\n      sim_mcc: '000',\n      sim_mnc: '000',\n      method: (params === null || params === void 0 ? void 0 : params.method) || 'sms',\n      reason: '',\n      hasav: '1'\n    },\n    ...fetchOptions\n  });\n}\nexports.mobileRegisterCode = mobileRegisterCode;\nfunction mobileRegisterExists(params, fetchOptions) {\n  return mobileRegisterFetch('/exist', {\n    params: registrationParams(params),\n    ...fetchOptions\n  });\n}\nexports.mobileRegisterExists = mobileRegisterExists;\n/**\n * Registers the phone number on whatsapp with the received OTP code.\n */\nasync function mobileRegister(params, fetchOptions) {\n  //const result = await mobileRegisterFetch(`/reg_onboard_abprop?cc=${params.phoneNumberCountryCode}&in=${params.phoneNumberNationalNumber}&rc=0`)\n  return mobileRegisterFetch('/register', {\n    params: {\n      ...registrationParams(params),\n      code: params.code.replace('-', '')\n    },\n    ...fetchOptions\n  });\n}\nexports.mobileRegister = mobileRegister;\n/**\n * Encrypts the given string as AEAD aes-256-gcm with the public whatsapp key and a random keypair.\n */\nfunction mobileRegisterEncrypt(data) {\n  const keypair = crypto_1.Curve.generateKeyPair();\n  const key = crypto_1.Curve.sharedKey(keypair.private, Defaults_1.REGISTRATION_PUBLIC_KEY);\n  const buffer = (0, crypto_1.aesEncryptGCM)(Buffer.from(data), new Uint8Array(key), Buffer.alloc(12), Buffer.alloc(0));\n  return Buffer.concat([Buffer.from(keypair.public), buffer]).toString('base64url');\n}\nexports.mobileRegisterEncrypt = mobileRegisterEncrypt;\nasync function mobileRegisterFetch(path, opts = {}) {\n  let url = `${Defaults_1.MOBILE_REGISTRATION_ENDPOINT}${path}`;\n  if (opts.params) {\n    const parameter = [];\n    for (const param in opts.params) {\n      if (opts.params[param] !== null && opts.params[param] !== undefined) {\n        parameter.push(param + '=' + urlencode(opts.params[param]));\n      }\n    }\n    url += `?${parameter.join('&')}`;\n    delete opts.params;\n  }\n  if (!opts.headers) {\n    opts.headers = {};\n  }\n  opts.headers['User-Agent'] = Defaults_1.MOBILE_USERAGENT;\n  const response = await (0, axios_1.default)(url, opts);\n  var json = response.data;\n  if (response.status > 300 || json.reason) {\n    throw json;\n  }\n  if (json.status && !['ok', 'sent'].includes(json.status)) {\n    throw json;\n  }\n  return json;\n}\nexports.mobileRegisterFetch = mobileRegisterFetch;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","mobileRegisterFetch","mobileRegisterEncrypt","mobileRegister","mobileRegisterExists","mobileRegisterCode","registrationParams","makeRegistrationSocket","axios_1","require","Defaults_1","crypto_1","WABinary_1","business_1","urlencode","str","replace","validRegistrationOptions","config","phoneNumberCountryCode","phoneNumberNationalNumber","phoneNumberMobileCountryCode","sock","makeBusinessSocket","register","code","auth","creds","registration","Error","result","authState","options","me","id","jidEncode","login","name","registered","ev","emit","requestRegistrationCode","registrationOptions","convertBufferToUrlHex","buffer","forEach","x","toString","padStart","toLowerCase","params","e_regid","Buffer","alloc","writeInt32BE","registrationId","e_skey_id","writeInt16BE","signedPreKey","keyId","trim","cc","in","Rc","lg","lc","mistyped","authkey","from","noiseKey","public","e_keytype","e_ident","signedIdentityKey","e_skey_val","keyPair","e_skey_sig","signature","fdid","phoneId","network_ratio_type","expid","deviceId","simnum","hasinrc","pid","Math","floor","random","identityId","backup_token","backupToken","token","md5","concat","MOBILE_TOKEN","fraud_checkpoint_code","captcha","fetchOptions","mcc","mnc","phoneNumberMobileNetworkCode","sim_mcc","sim_mnc","method","reason","hasav","data","keypair","Curve","generateKeyPair","key","sharedKey","private","REGISTRATION_PUBLIC_KEY","aesEncryptGCM","Uint8Array","path","opts","url","MOBILE_REGISTRATION_ENDPOINT","parameter","param","undefined","push","join","headers","MOBILE_USERAGENT","response","default","json","status","includes"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Socket/registration.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mobileRegisterFetch = exports.mobileRegisterEncrypt = exports.mobileRegister = exports.mobileRegisterExists = exports.mobileRegisterCode = exports.registrationParams = exports.makeRegistrationSocket = void 0;\n/* eslint-disable camelcase */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst Defaults_1 = require(\"../Defaults\");\nconst crypto_1 = require(\"../Utils/crypto\");\nconst WABinary_1 = require(\"../WABinary\");\nconst business_1 = require(\"./business\");\nfunction urlencode(str) {\n    return str.replace(/-/g, '%2d').replace(/_/g, '%5f').replace(/~/g, '%7e');\n}\nconst validRegistrationOptions = (config) => (config === null || config === void 0 ? void 0 : config.phoneNumberCountryCode) &&\n    config.phoneNumberNationalNumber &&\n    config.phoneNumberMobileCountryCode;\nconst makeRegistrationSocket = (config) => {\n    const sock = (0, business_1.makeBusinessSocket)(config);\n    const register = async (code) => {\n        if (!validRegistrationOptions(config.auth.creds.registration)) {\n            throw new Error('please specify the registration options');\n        }\n        const result = await mobileRegister({ ...sock.authState.creds, ...sock.authState.creds.registration, code }, config.options);\n        sock.authState.creds.me = {\n            id: (0, WABinary_1.jidEncode)(result.login, 's.whatsapp.net'),\n            name: '~'\n        };\n        sock.authState.creds.registered = true;\n        sock.ev.emit('creds.update', sock.authState.creds);\n        return result;\n    };\n    const requestRegistrationCode = async (registrationOptions) => {\n        registrationOptions = registrationOptions || config.auth.creds.registration;\n        if (!validRegistrationOptions(registrationOptions)) {\n            throw new Error('Invalid registration options');\n        }\n        sock.authState.creds.registration = registrationOptions;\n        sock.ev.emit('creds.update', sock.authState.creds);\n        return mobileRegisterCode({ ...config.auth.creds, ...registrationOptions }, config.options);\n    };\n    return {\n        ...sock,\n        register,\n        requestRegistrationCode,\n    };\n};\nexports.makeRegistrationSocket = makeRegistrationSocket;\nfunction convertBufferToUrlHex(buffer) {\n    var id = '';\n    buffer.forEach((x) => {\n        // encode random identity_id buffer as percentage url encoding\n        id += `%${x.toString(16).padStart(2, '0').toLowerCase()}`;\n    });\n    return id;\n}\nfunction registrationParams(params) {\n    const e_regid = Buffer.alloc(4);\n    e_regid.writeInt32BE(params.registrationId);\n    const e_skey_id = Buffer.alloc(3);\n    e_skey_id.writeInt16BE(params.signedPreKey.keyId);\n    params.phoneNumberCountryCode = params.phoneNumberCountryCode.replace('+', '').trim();\n    params.phoneNumberNationalNumber = params.phoneNumberNationalNumber.replace(/[/-\\s)(]/g, '').trim();\n    return {\n        cc: params.phoneNumberCountryCode,\n        in: params.phoneNumberNationalNumber,\n        Rc: '0',\n        lg: 'en',\n        lc: 'GB',\n        mistyped: '6',\n        authkey: Buffer.from(params.noiseKey.public).toString('base64url'),\n        e_regid: e_regid.toString('base64url'),\n        e_keytype: 'BQ',\n        e_ident: Buffer.from(params.signedIdentityKey.public).toString('base64url'),\n        // e_skey_id: e_skey_id.toString('base64url'),\n        e_skey_id: 'AAAA',\n        e_skey_val: Buffer.from(params.signedPreKey.keyPair.public).toString('base64url'),\n        e_skey_sig: Buffer.from(params.signedPreKey.signature).toString('base64url'),\n        fdid: params.phoneId,\n        network_ratio_type: '1',\n        expid: params.deviceId,\n        simnum: '1',\n        hasinrc: '1',\n        pid: Math.floor(Math.random() * 1000).toString(),\n        id: convertBufferToUrlHex(params.identityId),\n        backup_token: convertBufferToUrlHex(params.backupToken),\n        token: (0, crypto_1.md5)(Buffer.concat([Defaults_1.MOBILE_TOKEN, Buffer.from(params.phoneNumberNationalNumber)])).toString('hex'),\n        fraud_checkpoint_code: params.captcha,\n    };\n}\nexports.registrationParams = registrationParams;\n/**\n * Requests a registration code for the given phone number.\n */\nfunction mobileRegisterCode(params, fetchOptions) {\n    return mobileRegisterFetch('/code', {\n        params: {\n            ...registrationParams(params),\n            mcc: `${params.phoneNumberMobileCountryCode}`.padStart(3, '0'),\n            mnc: `${params.phoneNumberMobileNetworkCode || '001'}`.padStart(3, '0'),\n            sim_mcc: '000',\n            sim_mnc: '000',\n            method: (params === null || params === void 0 ? void 0 : params.method) || 'sms',\n            reason: '',\n            hasav: '1'\n        },\n        ...fetchOptions,\n    });\n}\nexports.mobileRegisterCode = mobileRegisterCode;\nfunction mobileRegisterExists(params, fetchOptions) {\n    return mobileRegisterFetch('/exist', {\n        params: registrationParams(params),\n        ...fetchOptions\n    });\n}\nexports.mobileRegisterExists = mobileRegisterExists;\n/**\n * Registers the phone number on whatsapp with the received OTP code.\n */\nasync function mobileRegister(params, fetchOptions) {\n    //const result = await mobileRegisterFetch(`/reg_onboard_abprop?cc=${params.phoneNumberCountryCode}&in=${params.phoneNumberNationalNumber}&rc=0`)\n    return mobileRegisterFetch('/register', {\n        params: { ...registrationParams(params), code: params.code.replace('-', '') },\n        ...fetchOptions,\n    });\n}\nexports.mobileRegister = mobileRegister;\n/**\n * Encrypts the given string as AEAD aes-256-gcm with the public whatsapp key and a random keypair.\n */\nfunction mobileRegisterEncrypt(data) {\n    const keypair = crypto_1.Curve.generateKeyPair();\n    const key = crypto_1.Curve.sharedKey(keypair.private, Defaults_1.REGISTRATION_PUBLIC_KEY);\n    const buffer = (0, crypto_1.aesEncryptGCM)(Buffer.from(data), new Uint8Array(key), Buffer.alloc(12), Buffer.alloc(0));\n    return Buffer.concat([Buffer.from(keypair.public), buffer]).toString('base64url');\n}\nexports.mobileRegisterEncrypt = mobileRegisterEncrypt;\nasync function mobileRegisterFetch(path, opts = {}) {\n    let url = `${Defaults_1.MOBILE_REGISTRATION_ENDPOINT}${path}`;\n    if (opts.params) {\n        const parameter = [];\n        for (const param in opts.params) {\n            if (opts.params[param] !== null && opts.params[param] !== undefined) {\n                parameter.push(param + '=' + urlencode(opts.params[param]));\n            }\n        }\n        url += `?${parameter.join('&')}`;\n        delete opts.params;\n    }\n    if (!opts.headers) {\n        opts.headers = {};\n    }\n    opts.headers['User-Agent'] = Defaults_1.MOBILE_USERAGENT;\n    const response = await (0, axios_1.default)(url, opts);\n    var json = response.data;\n    if (response.status > 300 || json.reason) {\n        throw json;\n    }\n    if (json.status && !['ok', 'sent'].includes(json.status)) {\n        throw json;\n    }\n    return json;\n}\nexports.mobileRegisterFetch = mobileRegisterFetch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}