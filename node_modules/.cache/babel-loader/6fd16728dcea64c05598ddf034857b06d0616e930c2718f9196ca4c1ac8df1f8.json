{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUrlInfo = void 0;\nconst messages_1 = require(\"./messages\");\nconst messages_media_1 = require(\"./messages-media\");\nconst THUMBNAIL_WIDTH_PX = 192;\n/** Fetches an image and generates a thumbnail for it */\nconst getCompressedJpegThumbnail = async (url, {\n  thumbnailWidth,\n  fetchOpts\n}) => {\n  const stream = await (0, messages_media_1.getHttpStream)(url, fetchOpts);\n  const result = await (0, messages_media_1.extractImageThumb)(stream, thumbnailWidth);\n  return result;\n};\n/**\n * Given a piece of text, checks for any URL present, generates link preview for the same and returns it\n * Return undefined if the fetch failed or no URL was found\n * @param text first matched URL in text\n * @returns the URL info required to generate link preview\n */\nconst getUrlInfo = async (text, opts = {\n  thumbnailWidth: THUMBNAIL_WIDTH_PX,\n  fetchOpts: {\n    timeout: 3000\n  }\n}) => {\n  var _a;\n  try {\n    // retries\n    const retries = 0;\n    const maxRetry = 5;\n    const {\n      getLinkPreview\n    } = await import('link-preview-js');\n    let previewLink = text;\n    if (!text.startsWith('https://') && !text.startsWith('http://')) {\n      previewLink = 'https://' + previewLink;\n    }\n    const info = await getLinkPreview(previewLink, {\n      ...opts.fetchOpts,\n      followRedirects: 'follow',\n      handleRedirects: (baseURL, forwardedURL) => {\n        const urlObj = new URL(baseURL);\n        const forwardedURLObj = new URL(forwardedURL);\n        if (retries >= maxRetry) {\n          return false;\n        }\n        if (forwardedURLObj.hostname === urlObj.hostname || forwardedURLObj.hostname === 'www.' + urlObj.hostname || 'www.' + forwardedURLObj.hostname === urlObj.hostname) {\n          retries + 1;\n          return true;\n        } else {\n          return false;\n        }\n      },\n      headers: opts.fetchOpts\n    });\n    if (info && 'title' in info && info.title) {\n      const [image] = info.images;\n      const urlInfo = {\n        'canonical-url': info.url,\n        'matched-text': text,\n        title: info.title,\n        description: info.description,\n        originalThumbnailUrl: image\n      };\n      if (opts.uploadImage) {\n        const {\n          imageMessage\n        } = await (0, messages_1.prepareWAMessageMedia)({\n          image: {\n            url: image\n          }\n        }, {\n          upload: opts.uploadImage,\n          mediaTypeOverride: 'thumbnail-link',\n          options: opts.fetchOpts\n        });\n        urlInfo.jpegThumbnail = (imageMessage === null || imageMessage === void 0 ? void 0 : imageMessage.jpegThumbnail) ? Buffer.from(imageMessage.jpegThumbnail) : undefined;\n        urlInfo.highQualityThumbnail = imageMessage || undefined;\n      } else {\n        try {\n          urlInfo.jpegThumbnail = image ? (await getCompressedJpegThumbnail(image, opts)).buffer : undefined;\n        } catch (error) {\n          (_a = opts.logger) === null || _a === void 0 ? void 0 : _a.debug({\n            err: error.stack,\n            url: previewLink\n          }, 'error in generating thumbnail');\n        }\n      }\n      return urlInfo;\n    }\n  } catch (error) {\n    if (!error.message.includes('receive a valid')) {\n      throw error;\n    }\n  }\n};\nexports.getUrlInfo = getUrlInfo;","map":{"version":3,"names":["Object","defineProperty","exports","value","getUrlInfo","messages_1","require","messages_media_1","THUMBNAIL_WIDTH_PX","getCompressedJpegThumbnail","url","thumbnailWidth","fetchOpts","stream","getHttpStream","result","extractImageThumb","text","opts","timeout","_a","retries","maxRetry","getLinkPreview","previewLink","startsWith","info","followRedirects","handleRedirects","baseURL","forwardedURL","urlObj","URL","forwardedURLObj","hostname","headers","title","image","images","urlInfo","description","originalThumbnailUrl","uploadImage","imageMessage","prepareWAMessageMedia","upload","mediaTypeOverride","options","jpegThumbnail","Buffer","from","undefined","highQualityThumbnail","buffer","error","logger","debug","err","stack","message","includes"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Utils/link-preview.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUrlInfo = void 0;\nconst messages_1 = require(\"./messages\");\nconst messages_media_1 = require(\"./messages-media\");\nconst THUMBNAIL_WIDTH_PX = 192;\n/** Fetches an image and generates a thumbnail for it */\nconst getCompressedJpegThumbnail = async (url, { thumbnailWidth, fetchOpts }) => {\n    const stream = await (0, messages_media_1.getHttpStream)(url, fetchOpts);\n    const result = await (0, messages_media_1.extractImageThumb)(stream, thumbnailWidth);\n    return result;\n};\n/**\n * Given a piece of text, checks for any URL present, generates link preview for the same and returns it\n * Return undefined if the fetch failed or no URL was found\n * @param text first matched URL in text\n * @returns the URL info required to generate link preview\n */\nconst getUrlInfo = async (text, opts = {\n    thumbnailWidth: THUMBNAIL_WIDTH_PX,\n    fetchOpts: { timeout: 3000 }\n}) => {\n    var _a;\n    try {\n        // retries\n        const retries = 0;\n        const maxRetry = 5;\n        const { getLinkPreview } = await import('link-preview-js');\n        let previewLink = text;\n        if (!text.startsWith('https://') && !text.startsWith('http://')) {\n            previewLink = 'https://' + previewLink;\n        }\n        const info = await getLinkPreview(previewLink, {\n            ...opts.fetchOpts,\n            followRedirects: 'follow',\n            handleRedirects: (baseURL, forwardedURL) => {\n                const urlObj = new URL(baseURL);\n                const forwardedURLObj = new URL(forwardedURL);\n                if (retries >= maxRetry) {\n                    return false;\n                }\n                if (forwardedURLObj.hostname === urlObj.hostname\n                    || forwardedURLObj.hostname === 'www.' + urlObj.hostname\n                    || 'www.' + forwardedURLObj.hostname === urlObj.hostname) {\n                    retries + 1;\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            },\n            headers: opts.fetchOpts\n        });\n        if (info && 'title' in info && info.title) {\n            const [image] = info.images;\n            const urlInfo = {\n                'canonical-url': info.url,\n                'matched-text': text,\n                title: info.title,\n                description: info.description,\n                originalThumbnailUrl: image\n            };\n            if (opts.uploadImage) {\n                const { imageMessage } = await (0, messages_1.prepareWAMessageMedia)({ image: { url: image } }, {\n                    upload: opts.uploadImage,\n                    mediaTypeOverride: 'thumbnail-link',\n                    options: opts.fetchOpts\n                });\n                urlInfo.jpegThumbnail = (imageMessage === null || imageMessage === void 0 ? void 0 : imageMessage.jpegThumbnail)\n                    ? Buffer.from(imageMessage.jpegThumbnail)\n                    : undefined;\n                urlInfo.highQualityThumbnail = imageMessage || undefined;\n            }\n            else {\n                try {\n                    urlInfo.jpegThumbnail = image\n                        ? (await getCompressedJpegThumbnail(image, opts)).buffer\n                        : undefined;\n                }\n                catch (error) {\n                    (_a = opts.logger) === null || _a === void 0 ? void 0 : _a.debug({ err: error.stack, url: previewLink }, 'error in generating thumbnail');\n                }\n            }\n            return urlInfo;\n        }\n    }\n    catch (error) {\n        if (!error.message.includes('receive a valid')) {\n            throw error;\n        }\n    }\n};\nexports.getUrlInfo = getUrlInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}