{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractGroupMetadata = exports.makeGroupsSocket = void 0;\nconst WAProto_1 = require(\"../../WAProto\");\nconst Types_1 = require(\"../Types\");\nconst Utils_1 = require(\"../Utils\");\nconst WABinary_1 = require(\"../WABinary\");\nconst chats_1 = require(\"./chats\");\nconst makeGroupsSocket = config => {\n  const sock = (0, chats_1.makeChatsSocket)(config);\n  const {\n    authState,\n    ev,\n    query,\n    upsertMessage\n  } = sock;\n  const groupQuery = async (jid, type, content) => query({\n    tag: 'iq',\n    attrs: {\n      type,\n      xmlns: 'w:g2',\n      to: jid\n    },\n    content\n  });\n  const groupMetadata = async jid => {\n    const result = await groupQuery(jid, 'get', [{\n      tag: 'query',\n      attrs: {\n        request: 'interactive'\n      }\n    }]);\n    return (0, exports.extractGroupMetadata)(result);\n  };\n  const groupFetchAllParticipating = async () => {\n    const result = await query({\n      tag: 'iq',\n      attrs: {\n        to: '@g.us',\n        xmlns: 'w:g2',\n        type: 'get'\n      },\n      content: [{\n        tag: 'participating',\n        attrs: {},\n        content: [{\n          tag: 'participants',\n          attrs: {}\n        }, {\n          tag: 'description',\n          attrs: {}\n        }]\n      }]\n    });\n    const data = {};\n    const groupsChild = (0, WABinary_1.getBinaryNodeChild)(result, 'groups');\n    if (groupsChild) {\n      const groups = (0, WABinary_1.getBinaryNodeChildren)(groupsChild, 'group');\n      for (const groupNode of groups) {\n        const meta = (0, exports.extractGroupMetadata)({\n          tag: 'result',\n          attrs: {},\n          content: [groupNode]\n        });\n        data[meta.id] = meta;\n      }\n    }\n    sock.ev.emit('groups.update', Object.values(data));\n    return data;\n  };\n  sock.ws.on('CB:ib,,dirty', async node => {\n    const {\n      attrs\n    } = (0, WABinary_1.getBinaryNodeChild)(node, 'dirty');\n    if (attrs.type !== 'groups') {\n      return;\n    }\n    await groupFetchAllParticipating();\n    await sock.cleanDirtyBits('groups');\n  });\n  return {\n    ...sock,\n    groupMetadata,\n    groupCreate: async (subject, participants) => {\n      const key = (0, Utils_1.generateMessageID)();\n      const result = await groupQuery('@g.us', 'set', [{\n        tag: 'create',\n        attrs: {\n          subject,\n          key\n        },\n        content: participants.map(jid => ({\n          tag: 'participant',\n          attrs: {\n            jid\n          }\n        }))\n      }]);\n      return (0, exports.extractGroupMetadata)(result);\n    },\n    groupLeave: async id => {\n      await groupQuery('@g.us', 'set', [{\n        tag: 'leave',\n        attrs: {},\n        content: [{\n          tag: 'group',\n          attrs: {\n            id\n          }\n        }]\n      }]);\n    },\n    groupUpdateSubject: async (jid, subject) => {\n      await groupQuery(jid, 'set', [{\n        tag: 'subject',\n        attrs: {},\n        content: Buffer.from(subject, 'utf-8')\n      }]);\n    },\n    groupRequestParticipantsList: async jid => {\n      const result = await groupQuery(jid, 'get', [{\n        tag: 'membership_approval_requests',\n        attrs: {}\n      }]);\n      const node = (0, WABinary_1.getBinaryNodeChild)(result, 'membership_approval_requests');\n      const participants = (0, WABinary_1.getBinaryNodeChildren)(node, 'membership_approval_request');\n      return participants.map(v => v.attrs);\n    },\n    groupRequestParticipantsUpdate: async (jid, participants, action) => {\n      const result = await groupQuery(jid, 'set', [{\n        tag: 'membership_requests_action',\n        attrs: {},\n        content: [{\n          tag: action,\n          attrs: {},\n          content: participants.map(jid => ({\n            tag: 'participant',\n            attrs: {\n              jid\n            }\n          }))\n        }]\n      }]);\n      const node = (0, WABinary_1.getBinaryNodeChild)(result, 'membership_requests_action');\n      const nodeAction = (0, WABinary_1.getBinaryNodeChild)(node, action);\n      const participantsAffected = (0, WABinary_1.getBinaryNodeChildren)(nodeAction, 'participant');\n      return participantsAffected.map(p => {\n        return {\n          status: p.attrs.error || '200',\n          jid: p.attrs.jid\n        };\n      });\n    },\n    groupParticipantsUpdate: async (jid, participants, action) => {\n      const result = await groupQuery(jid, 'set', [{\n        tag: action,\n        attrs: {},\n        content: participants.map(jid => ({\n          tag: 'participant',\n          attrs: {\n            jid\n          }\n        }))\n      }]);\n      const node = (0, WABinary_1.getBinaryNodeChild)(result, action);\n      const participantsAffected = (0, WABinary_1.getBinaryNodeChildren)(node, 'participant');\n      return participantsAffected.map(p => {\n        return {\n          status: p.attrs.error || '200',\n          jid: p.attrs.jid,\n          content: p\n        };\n      });\n    },\n    groupUpdateDescription: async (jid, description) => {\n      var _a;\n      const metadata = await groupMetadata(jid);\n      const prev = (_a = metadata.descId) !== null && _a !== void 0 ? _a : null;\n      await groupQuery(jid, 'set', [{\n        tag: 'description',\n        attrs: {\n          ...(description ? {\n            id: (0, Utils_1.generateMessageID)()\n          } : {\n            delete: 'true'\n          }),\n          ...(prev ? {\n            prev\n          } : {})\n        },\n        content: description ? [{\n          tag: 'body',\n          attrs: {},\n          content: Buffer.from(description, 'utf-8')\n        }] : undefined\n      }]);\n    },\n    groupInviteCode: async jid => {\n      const result = await groupQuery(jid, 'get', [{\n        tag: 'invite',\n        attrs: {}\n      }]);\n      const inviteNode = (0, WABinary_1.getBinaryNodeChild)(result, 'invite');\n      return inviteNode === null || inviteNode === void 0 ? void 0 : inviteNode.attrs.code;\n    },\n    groupRevokeInvite: async jid => {\n      const result = await groupQuery(jid, 'set', [{\n        tag: 'invite',\n        attrs: {}\n      }]);\n      const inviteNode = (0, WABinary_1.getBinaryNodeChild)(result, 'invite');\n      return inviteNode === null || inviteNode === void 0 ? void 0 : inviteNode.attrs.code;\n    },\n    groupAcceptInvite: async code => {\n      const results = await groupQuery('@g.us', 'set', [{\n        tag: 'invite',\n        attrs: {\n          code\n        }\n      }]);\n      const result = (0, WABinary_1.getBinaryNodeChild)(results, 'group');\n      return result === null || result === void 0 ? void 0 : result.attrs.jid;\n    },\n    /**\n     * revoke a v4 invite for someone\n     * @param groupJid group jid\n     * @param invitedJid jid of person you invited\n     * @returns true if successful\n     */\n    groupRevokeInviteV4: async (groupJid, invitedJid) => {\n      const result = await groupQuery(groupJid, 'set', [{\n        tag: 'revoke',\n        attrs: {},\n        content: [{\n          tag: 'participant',\n          attrs: {\n            jid: invitedJid\n          }\n        }]\n      }]);\n      return !!result;\n    },\n    /**\n     * accept a GroupInviteMessage\n     * @param key the key of the invite message, or optionally only provide the jid of the person who sent the invite\n     * @param inviteMessage the message to accept\n     */\n    groupAcceptInviteV4: ev.createBufferedFunction(async (key, inviteMessage) => {\n      var _a;\n      key = typeof key === 'string' ? {\n        remoteJid: key\n      } : key;\n      const results = await groupQuery(inviteMessage.groupJid, 'set', [{\n        tag: 'accept',\n        attrs: {\n          code: inviteMessage.inviteCode,\n          expiration: inviteMessage.inviteExpiration.toString(),\n          admin: key.remoteJid\n        }\n      }]);\n      // if we have the full message key\n      // update the invite message to be expired\n      if (key.id) {\n        // create new invite message that is expired\n        inviteMessage = WAProto_1.proto.Message.GroupInviteMessage.fromObject(inviteMessage);\n        inviteMessage.inviteExpiration = 0;\n        inviteMessage.inviteCode = '';\n        ev.emit('messages.update', [{\n          key,\n          update: {\n            message: {\n              groupInviteMessage: inviteMessage\n            }\n          }\n        }]);\n      }\n      // generate the group add message\n      await upsertMessage({\n        key: {\n          remoteJid: inviteMessage.groupJid,\n          id: (0, Utils_1.generateMessageIDV2)((_a = sock.user) === null || _a === void 0 ? void 0 : _a.id),\n          fromMe: false,\n          participant: key.remoteJid\n        },\n        messageStubType: Types_1.WAMessageStubType.GROUP_PARTICIPANT_ADD,\n        messageStubParameters: [authState.creds.me.id],\n        participant: key.remoteJid,\n        messageTimestamp: (0, Utils_1.unixTimestampSeconds)()\n      }, 'notify');\n      return results.attrs.from;\n    }),\n    groupGetInviteInfo: async code => {\n      const results = await groupQuery('@g.us', 'get', [{\n        tag: 'invite',\n        attrs: {\n          code\n        }\n      }]);\n      return (0, exports.extractGroupMetadata)(results);\n    },\n    groupToggleEphemeral: async (jid, ephemeralExpiration) => {\n      const content = ephemeralExpiration ? {\n        tag: 'ephemeral',\n        attrs: {\n          expiration: ephemeralExpiration.toString()\n        }\n      } : {\n        tag: 'not_ephemeral',\n        attrs: {}\n      };\n      await groupQuery(jid, 'set', [content]);\n    },\n    groupSettingUpdate: async (jid, setting) => {\n      await groupQuery(jid, 'set', [{\n        tag: setting,\n        attrs: {}\n      }]);\n    },\n    groupMemberAddMode: async (jid, mode) => {\n      await groupQuery(jid, 'set', [{\n        tag: 'member_add_mode',\n        attrs: {},\n        content: mode\n      }]);\n    },\n    groupJoinApprovalMode: async (jid, mode) => {\n      await groupQuery(jid, 'set', [{\n        tag: 'membership_approval_mode',\n        attrs: {},\n        content: [{\n          tag: 'group_join',\n          attrs: {\n            state: mode\n          }\n        }]\n      }]);\n    },\n    groupFetchAllParticipating\n  };\n};\nexports.makeGroupsSocket = makeGroupsSocket;\nconst extractGroupMetadata = result => {\n  var _a, _b;\n  const group = (0, WABinary_1.getBinaryNodeChild)(result, 'group');\n  const descChild = (0, WABinary_1.getBinaryNodeChild)(group, 'description');\n  let desc;\n  let descId;\n  if (descChild) {\n    desc = (0, WABinary_1.getBinaryNodeChildString)(descChild, 'body');\n    descId = descChild.attrs.id;\n  }\n  const groupId = group.attrs.id.includes('@') ? group.attrs.id : (0, WABinary_1.jidEncode)(group.attrs.id, 'g.us');\n  const eph = (_a = (0, WABinary_1.getBinaryNodeChild)(group, 'ephemeral')) === null || _a === void 0 ? void 0 : _a.attrs.expiration;\n  const memberAddMode = (0, WABinary_1.getBinaryNodeChildString)(group, 'member_add_mode') === 'all_member_add';\n  const metadata = {\n    id: groupId,\n    subject: group.attrs.subject,\n    subjectOwner: group.attrs.s_o,\n    subjectTime: +group.attrs.s_t,\n    size: (0, WABinary_1.getBinaryNodeChildren)(group, 'participant').length,\n    creation: +group.attrs.creation,\n    owner: group.attrs.creator ? (0, WABinary_1.jidNormalizedUser)(group.attrs.creator) : undefined,\n    desc,\n    descId,\n    linkedParent: ((_b = (0, WABinary_1.getBinaryNodeChild)(group, 'linked_parent')) === null || _b === void 0 ? void 0 : _b.attrs.jid) || undefined,\n    restrict: !!(0, WABinary_1.getBinaryNodeChild)(group, 'locked'),\n    announce: !!(0, WABinary_1.getBinaryNodeChild)(group, 'announcement'),\n    isCommunity: !!(0, WABinary_1.getBinaryNodeChild)(group, 'parent'),\n    isCommunityAnnounce: !!(0, WABinary_1.getBinaryNodeChild)(group, 'default_sub_group'),\n    joinApprovalMode: !!(0, WABinary_1.getBinaryNodeChild)(group, 'membership_approval_mode'),\n    memberAddMode,\n    participants: (0, WABinary_1.getBinaryNodeChildren)(group, 'participant').map(({\n      attrs\n    }) => {\n      return {\n        id: attrs.jid,\n        admin: attrs.type || null\n      };\n    }),\n    ephemeralDuration: eph ? +eph : undefined\n  };\n  return metadata;\n};\nexports.extractGroupMetadata = extractGroupMetadata;","map":{"version":3,"names":["Object","defineProperty","exports","value","extractGroupMetadata","makeGroupsSocket","WAProto_1","require","Types_1","Utils_1","WABinary_1","chats_1","config","sock","makeChatsSocket","authState","ev","query","upsertMessage","groupQuery","jid","type","content","tag","attrs","xmlns","to","groupMetadata","result","request","groupFetchAllParticipating","data","groupsChild","getBinaryNodeChild","groups","getBinaryNodeChildren","groupNode","meta","id","emit","values","ws","on","node","cleanDirtyBits","groupCreate","subject","participants","key","generateMessageID","map","groupLeave","groupUpdateSubject","Buffer","from","groupRequestParticipantsList","v","groupRequestParticipantsUpdate","action","nodeAction","participantsAffected","p","status","error","groupParticipantsUpdate","groupUpdateDescription","description","_a","metadata","prev","descId","delete","undefined","groupInviteCode","inviteNode","code","groupRevokeInvite","groupAcceptInvite","results","groupRevokeInviteV4","groupJid","invitedJid","groupAcceptInviteV4","createBufferedFunction","inviteMessage","remoteJid","inviteCode","expiration","inviteExpiration","toString","admin","proto","Message","GroupInviteMessage","fromObject","update","message","groupInviteMessage","generateMessageIDV2","user","fromMe","participant","messageStubType","WAMessageStubType","GROUP_PARTICIPANT_ADD","messageStubParameters","creds","me","messageTimestamp","unixTimestampSeconds","groupGetInviteInfo","groupToggleEphemeral","ephemeralExpiration","groupSettingUpdate","setting","groupMemberAddMode","mode","groupJoinApprovalMode","state","_b","group","descChild","desc","getBinaryNodeChildString","groupId","includes","jidEncode","eph","memberAddMode","subjectOwner","s_o","subjectTime","s_t","size","length","creation","owner","creator","jidNormalizedUser","linkedParent","restrict","announce","isCommunity","isCommunityAnnounce","joinApprovalMode","ephemeralDuration"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Socket/groups.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractGroupMetadata = exports.makeGroupsSocket = void 0;\nconst WAProto_1 = require(\"../../WAProto\");\nconst Types_1 = require(\"../Types\");\nconst Utils_1 = require(\"../Utils\");\nconst WABinary_1 = require(\"../WABinary\");\nconst chats_1 = require(\"./chats\");\nconst makeGroupsSocket = (config) => {\n    const sock = (0, chats_1.makeChatsSocket)(config);\n    const { authState, ev, query, upsertMessage } = sock;\n    const groupQuery = async (jid, type, content) => (query({\n        tag: 'iq',\n        attrs: {\n            type,\n            xmlns: 'w:g2',\n            to: jid,\n        },\n        content\n    }));\n    const groupMetadata = async (jid) => {\n        const result = await groupQuery(jid, 'get', [{ tag: 'query', attrs: { request: 'interactive' } }]);\n        return (0, exports.extractGroupMetadata)(result);\n    };\n    const groupFetchAllParticipating = async () => {\n        const result = await query({\n            tag: 'iq',\n            attrs: {\n                to: '@g.us',\n                xmlns: 'w:g2',\n                type: 'get',\n            },\n            content: [\n                {\n                    tag: 'participating',\n                    attrs: {},\n                    content: [\n                        { tag: 'participants', attrs: {} },\n                        { tag: 'description', attrs: {} }\n                    ]\n                }\n            ]\n        });\n        const data = {};\n        const groupsChild = (0, WABinary_1.getBinaryNodeChild)(result, 'groups');\n        if (groupsChild) {\n            const groups = (0, WABinary_1.getBinaryNodeChildren)(groupsChild, 'group');\n            for (const groupNode of groups) {\n                const meta = (0, exports.extractGroupMetadata)({\n                    tag: 'result',\n                    attrs: {},\n                    content: [groupNode]\n                });\n                data[meta.id] = meta;\n            }\n        }\n        sock.ev.emit('groups.update', Object.values(data));\n        return data;\n    };\n    sock.ws.on('CB:ib,,dirty', async (node) => {\n        const { attrs } = (0, WABinary_1.getBinaryNodeChild)(node, 'dirty');\n        if (attrs.type !== 'groups') {\n            return;\n        }\n        await groupFetchAllParticipating();\n        await sock.cleanDirtyBits('groups');\n    });\n    return {\n        ...sock,\n        groupMetadata,\n        groupCreate: async (subject, participants) => {\n            const key = (0, Utils_1.generateMessageID)();\n            const result = await groupQuery('@g.us', 'set', [\n                {\n                    tag: 'create',\n                    attrs: {\n                        subject,\n                        key\n                    },\n                    content: participants.map(jid => ({\n                        tag: 'participant',\n                        attrs: { jid }\n                    }))\n                }\n            ]);\n            return (0, exports.extractGroupMetadata)(result);\n        },\n        groupLeave: async (id) => {\n            await groupQuery('@g.us', 'set', [\n                {\n                    tag: 'leave',\n                    attrs: {},\n                    content: [\n                        { tag: 'group', attrs: { id } }\n                    ]\n                }\n            ]);\n        },\n        groupUpdateSubject: async (jid, subject) => {\n            await groupQuery(jid, 'set', [\n                {\n                    tag: 'subject',\n                    attrs: {},\n                    content: Buffer.from(subject, 'utf-8')\n                }\n            ]);\n        },\n        groupRequestParticipantsList: async (jid) => {\n            const result = await groupQuery(jid, 'get', [\n                {\n                    tag: 'membership_approval_requests',\n                    attrs: {}\n                }\n            ]);\n            const node = (0, WABinary_1.getBinaryNodeChild)(result, 'membership_approval_requests');\n            const participants = (0, WABinary_1.getBinaryNodeChildren)(node, 'membership_approval_request');\n            return participants.map(v => v.attrs);\n        },\n        groupRequestParticipantsUpdate: async (jid, participants, action) => {\n            const result = await groupQuery(jid, 'set', [{\n                    tag: 'membership_requests_action',\n                    attrs: {},\n                    content: [\n                        {\n                            tag: action,\n                            attrs: {},\n                            content: participants.map(jid => ({\n                                tag: 'participant',\n                                attrs: { jid }\n                            }))\n                        }\n                    ]\n                }]);\n            const node = (0, WABinary_1.getBinaryNodeChild)(result, 'membership_requests_action');\n            const nodeAction = (0, WABinary_1.getBinaryNodeChild)(node, action);\n            const participantsAffected = (0, WABinary_1.getBinaryNodeChildren)(nodeAction, 'participant');\n            return participantsAffected.map(p => {\n                return { status: p.attrs.error || '200', jid: p.attrs.jid };\n            });\n        },\n        groupParticipantsUpdate: async (jid, participants, action) => {\n            const result = await groupQuery(jid, 'set', [\n                {\n                    tag: action,\n                    attrs: {},\n                    content: participants.map(jid => ({\n                        tag: 'participant',\n                        attrs: { jid }\n                    }))\n                }\n            ]);\n            const node = (0, WABinary_1.getBinaryNodeChild)(result, action);\n            const participantsAffected = (0, WABinary_1.getBinaryNodeChildren)(node, 'participant');\n            return participantsAffected.map(p => {\n                return { status: p.attrs.error || '200', jid: p.attrs.jid, content: p };\n            });\n        },\n        groupUpdateDescription: async (jid, description) => {\n            var _a;\n            const metadata = await groupMetadata(jid);\n            const prev = (_a = metadata.descId) !== null && _a !== void 0 ? _a : null;\n            await groupQuery(jid, 'set', [\n                {\n                    tag: 'description',\n                    attrs: {\n                        ...(description ? { id: (0, Utils_1.generateMessageID)() } : { delete: 'true' }),\n                        ...(prev ? { prev } : {})\n                    },\n                    content: description ? [\n                        { tag: 'body', attrs: {}, content: Buffer.from(description, 'utf-8') }\n                    ] : undefined\n                }\n            ]);\n        },\n        groupInviteCode: async (jid) => {\n            const result = await groupQuery(jid, 'get', [{ tag: 'invite', attrs: {} }]);\n            const inviteNode = (0, WABinary_1.getBinaryNodeChild)(result, 'invite');\n            return inviteNode === null || inviteNode === void 0 ? void 0 : inviteNode.attrs.code;\n        },\n        groupRevokeInvite: async (jid) => {\n            const result = await groupQuery(jid, 'set', [{ tag: 'invite', attrs: {} }]);\n            const inviteNode = (0, WABinary_1.getBinaryNodeChild)(result, 'invite');\n            return inviteNode === null || inviteNode === void 0 ? void 0 : inviteNode.attrs.code;\n        },\n        groupAcceptInvite: async (code) => {\n            const results = await groupQuery('@g.us', 'set', [{ tag: 'invite', attrs: { code } }]);\n            const result = (0, WABinary_1.getBinaryNodeChild)(results, 'group');\n            return result === null || result === void 0 ? void 0 : result.attrs.jid;\n        },\n        /**\n         * revoke a v4 invite for someone\n         * @param groupJid group jid\n         * @param invitedJid jid of person you invited\n         * @returns true if successful\n         */\n        groupRevokeInviteV4: async (groupJid, invitedJid) => {\n            const result = await groupQuery(groupJid, 'set', [{ tag: 'revoke', attrs: {}, content: [{ tag: 'participant', attrs: { jid: invitedJid } }] }]);\n            return !!result;\n        },\n        /**\n         * accept a GroupInviteMessage\n         * @param key the key of the invite message, or optionally only provide the jid of the person who sent the invite\n         * @param inviteMessage the message to accept\n         */\n        groupAcceptInviteV4: ev.createBufferedFunction(async (key, inviteMessage) => {\n            var _a;\n            key = typeof key === 'string' ? { remoteJid: key } : key;\n            const results = await groupQuery(inviteMessage.groupJid, 'set', [{\n                    tag: 'accept',\n                    attrs: {\n                        code: inviteMessage.inviteCode,\n                        expiration: inviteMessage.inviteExpiration.toString(),\n                        admin: key.remoteJid\n                    }\n                }]);\n            // if we have the full message key\n            // update the invite message to be expired\n            if (key.id) {\n                // create new invite message that is expired\n                inviteMessage = WAProto_1.proto.Message.GroupInviteMessage.fromObject(inviteMessage);\n                inviteMessage.inviteExpiration = 0;\n                inviteMessage.inviteCode = '';\n                ev.emit('messages.update', [\n                    {\n                        key,\n                        update: {\n                            message: {\n                                groupInviteMessage: inviteMessage\n                            }\n                        }\n                    }\n                ]);\n            }\n            // generate the group add message\n            await upsertMessage({\n                key: {\n                    remoteJid: inviteMessage.groupJid,\n                    id: (0, Utils_1.generateMessageIDV2)((_a = sock.user) === null || _a === void 0 ? void 0 : _a.id),\n                    fromMe: false,\n                    participant: key.remoteJid,\n                },\n                messageStubType: Types_1.WAMessageStubType.GROUP_PARTICIPANT_ADD,\n                messageStubParameters: [\n                    authState.creds.me.id\n                ],\n                participant: key.remoteJid,\n                messageTimestamp: (0, Utils_1.unixTimestampSeconds)()\n            }, 'notify');\n            return results.attrs.from;\n        }),\n        groupGetInviteInfo: async (code) => {\n            const results = await groupQuery('@g.us', 'get', [{ tag: 'invite', attrs: { code } }]);\n            return (0, exports.extractGroupMetadata)(results);\n        },\n        groupToggleEphemeral: async (jid, ephemeralExpiration) => {\n            const content = ephemeralExpiration ?\n                { tag: 'ephemeral', attrs: { expiration: ephemeralExpiration.toString() } } :\n                { tag: 'not_ephemeral', attrs: {} };\n            await groupQuery(jid, 'set', [content]);\n        },\n        groupSettingUpdate: async (jid, setting) => {\n            await groupQuery(jid, 'set', [{ tag: setting, attrs: {} }]);\n        },\n        groupMemberAddMode: async (jid, mode) => {\n            await groupQuery(jid, 'set', [{ tag: 'member_add_mode', attrs: {}, content: mode }]);\n        },\n        groupJoinApprovalMode: async (jid, mode) => {\n            await groupQuery(jid, 'set', [{ tag: 'membership_approval_mode', attrs: {}, content: [{ tag: 'group_join', attrs: { state: mode } }] }]);\n        },\n        groupFetchAllParticipating\n    };\n};\nexports.makeGroupsSocket = makeGroupsSocket;\nconst extractGroupMetadata = (result) => {\n    var _a, _b;\n    const group = (0, WABinary_1.getBinaryNodeChild)(result, 'group');\n    const descChild = (0, WABinary_1.getBinaryNodeChild)(group, 'description');\n    let desc;\n    let descId;\n    if (descChild) {\n        desc = (0, WABinary_1.getBinaryNodeChildString)(descChild, 'body');\n        descId = descChild.attrs.id;\n    }\n    const groupId = group.attrs.id.includes('@') ? group.attrs.id : (0, WABinary_1.jidEncode)(group.attrs.id, 'g.us');\n    const eph = (_a = (0, WABinary_1.getBinaryNodeChild)(group, 'ephemeral')) === null || _a === void 0 ? void 0 : _a.attrs.expiration;\n    const memberAddMode = (0, WABinary_1.getBinaryNodeChildString)(group, 'member_add_mode') === 'all_member_add';\n    const metadata = {\n        id: groupId,\n        subject: group.attrs.subject,\n        subjectOwner: group.attrs.s_o,\n        subjectTime: +group.attrs.s_t,\n        size: (0, WABinary_1.getBinaryNodeChildren)(group, 'participant').length,\n        creation: +group.attrs.creation,\n        owner: group.attrs.creator ? (0, WABinary_1.jidNormalizedUser)(group.attrs.creator) : undefined,\n        desc,\n        descId,\n        linkedParent: ((_b = (0, WABinary_1.getBinaryNodeChild)(group, 'linked_parent')) === null || _b === void 0 ? void 0 : _b.attrs.jid) || undefined,\n        restrict: !!(0, WABinary_1.getBinaryNodeChild)(group, 'locked'),\n        announce: !!(0, WABinary_1.getBinaryNodeChild)(group, 'announcement'),\n        isCommunity: !!(0, WABinary_1.getBinaryNodeChild)(group, 'parent'),\n        isCommunityAnnounce: !!(0, WABinary_1.getBinaryNodeChild)(group, 'default_sub_group'),\n        joinApprovalMode: !!(0, WABinary_1.getBinaryNodeChild)(group, 'membership_approval_mode'),\n        memberAddMode,\n        participants: (0, WABinary_1.getBinaryNodeChildren)(group, 'participant').map(({ attrs }) => {\n            return {\n                id: attrs.jid,\n                admin: (attrs.type || null),\n            };\n        }),\n        ephemeralDuration: eph ? +eph : undefined\n    };\n    return metadata;\n};\nexports.extractGroupMetadata = extractGroupMetadata;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}