{"ast":null,"code":"export const QOA_MIN_FILESIZE = 16;\nexport const QOA_MAX_CHANNELS = 8;\nexport const QOA_SLICE_LEN = 20;\nexport const QOA_SLICES_PER_FRAME = 256;\nexport const QOA_FRAME_LEN = QOA_SLICES_PER_FRAME * QOA_SLICE_LEN;\nexport const QOA_LMS_LEN = 4;\nexport const QOA_MAGIC = 0x716f6166; /* 'qoaf' */\nexport const QOA_FRAME_SIZE = (channels, slices) => Math.floor(8 + QOA_LMS_LEN * 4 * channels + 8 * slices * channels);\nexport function qoa_clamp(v, min, max) {\n  return v < min ? min : v > max ? max : v;\n}\nexport function LMS(h, w) {\n  const history = new Int16Array(h || 4);\n  const weights = new Int16Array(w || 4);\n  return {\n    history,\n    weights\n  };\n}\nexport function qoa_lms_predict(weights, history) {\n  return weights[0] * history[0] + weights[1] * history[1] + weights[2] * history[2] + weights[3] * history[3] >> 13;\n}\nexport function qoa_lms_update(weights, history, sample, residual) {\n  let delta = residual >> 4;\n  weights[0] += history[0] < 0 ? -delta : delta;\n  weights[1] += history[1] < 0 ? -delta : delta;\n  weights[2] += history[2] < 0 ? -delta : delta;\n  weights[3] += history[3] < 0 ? -delta : delta;\n  history[0] = history[1];\n  history[1] = history[2];\n  history[2] = history[3];\n  history[3] = sample;\n}\nexport const qoa_round = num => Math.sign(num) * Math.round(Math.abs(num));\n\n/* We have 16 different scalefactors. Like the quantized residuals these become\nless accurate at the higher end. In theory, the highest scalefactor that we\nwould need to encode the highest 16bit residual is (2**16)/8 = 8192. However we\nrely on the LMS filter to predict samples accurately enough that a maximum \nresidual of one quarter of the 16 bit range is high sufficent. I.e. with the \nscalefactor 2048 times the quant range of 8 we can encode residuals up to 2**14.\n\nThe scalefactor values are computed as:\nscalefactor_tab[s] <- round(pow(s + 1, 2.75)) */\n\nexport const qoa_scalefactor_tab = Array(16).fill().map((_, s) => qoa_round(Math.pow(s + 1, 2.75)));\n\n/* The dequant_tab maps each of the scalefactors and quantized residuals to \ntheir unscaled & dequantized version.\n\nSince qoa_div rounds away from the zero, the smallest entries are mapped to 3/4\ninstead of 1. The dequant_tab assumes the following dequantized values for each \nof the quant_tab indices and is computed as:\nfloat dqt[8] = {0.75, -0.75, 2.5, -2.5, 4.5, -4.5, 7, -7};\ndequant_tab[s][q] <- round(scalefactor_tab[s] * dqt[q]) */\n\nconst dqt = [0.75, -0.75, 2.5, -2.5, 4.5, -4.5, 7, -7];\nexport const qoa_dequant_tab = qoa_scalefactor_tab.map(sf => {\n  return dqt.map(dq => qoa_round(dq * sf));\n});","map":{"version":3,"names":["QOA_MIN_FILESIZE","QOA_MAX_CHANNELS","QOA_SLICE_LEN","QOA_SLICES_PER_FRAME","QOA_FRAME_LEN","QOA_LMS_LEN","QOA_MAGIC","QOA_FRAME_SIZE","channels","slices","Math","floor","qoa_clamp","v","min","max","LMS","h","w","history","Int16Array","weights","qoa_lms_predict","qoa_lms_update","sample","residual","delta","qoa_round","num","sign","round","abs","qoa_scalefactor_tab","Array","fill","map","_","s","pow","dqt","qoa_dequant_tab","sf","dq"],"sources":["C:/Users/vanitas/node_modules/qoa-format/lib/common.js"],"sourcesContent":["export const QOA_MIN_FILESIZE = 16;\nexport const QOA_MAX_CHANNELS = 8;\n\nexport const QOA_SLICE_LEN = 20;\nexport const QOA_SLICES_PER_FRAME = 256;\nexport const QOA_FRAME_LEN = QOA_SLICES_PER_FRAME * QOA_SLICE_LEN;\nexport const QOA_LMS_LEN = 4;\nexport const QOA_MAGIC = 0x716f6166; /* 'qoaf' */\nexport const QOA_FRAME_SIZE = (channels, slices) =>\n  Math.floor(8 + QOA_LMS_LEN * 4 * channels + 8 * slices * channels);\n\nexport function qoa_clamp(v, min, max) {\n  return v < min ? min : v > max ? max : v;\n}\n\nexport function LMS(h, w) {\n  const history = new Int16Array(h || 4);\n  const weights = new Int16Array(w || 4);\n  return { history, weights };\n}\n\nexport function qoa_lms_predict(weights, history) {\n  return (\n    (weights[0] * history[0] +\n      weights[1] * history[1] +\n      weights[2] * history[2] +\n      weights[3] * history[3]) >>\n    13\n  );\n}\n\nexport function qoa_lms_update(weights, history, sample, residual) {\n  let delta = residual >> 4;\n  weights[0] += history[0] < 0 ? -delta : delta;\n  weights[1] += history[1] < 0 ? -delta : delta;\n  weights[2] += history[2] < 0 ? -delta : delta;\n  weights[3] += history[3] < 0 ? -delta : delta;\n  history[0] = history[1];\n  history[1] = history[2];\n  history[2] = history[3];\n  history[3] = sample;\n}\n\nexport const qoa_round = (num) => Math.sign(num) * Math.round(Math.abs(num));\n\n/* We have 16 different scalefactors. Like the quantized residuals these become\nless accurate at the higher end. In theory, the highest scalefactor that we\nwould need to encode the highest 16bit residual is (2**16)/8 = 8192. However we\nrely on the LMS filter to predict samples accurately enough that a maximum \nresidual of one quarter of the 16 bit range is high sufficent. I.e. with the \nscalefactor 2048 times the quant range of 8 we can encode residuals up to 2**14.\n\nThe scalefactor values are computed as:\nscalefactor_tab[s] <- round(pow(s + 1, 2.75)) */\n\nexport const qoa_scalefactor_tab = Array(16)\n  .fill()\n  .map((_, s) => qoa_round(Math.pow(s + 1, 2.75)));\n\n/* The dequant_tab maps each of the scalefactors and quantized residuals to \ntheir unscaled & dequantized version.\n\nSince qoa_div rounds away from the zero, the smallest entries are mapped to 3/4\ninstead of 1. The dequant_tab assumes the following dequantized values for each \nof the quant_tab indices and is computed as:\nfloat dqt[8] = {0.75, -0.75, 2.5, -2.5, 4.5, -4.5, 7, -7};\ndequant_tab[s][q] <- round(scalefactor_tab[s] * dqt[q]) */\n\nconst dqt = [0.75, -0.75, 2.5, -2.5, 4.5, -4.5, 7, -7];\nexport const qoa_dequant_tab = qoa_scalefactor_tab.map((sf) => {\n  return dqt.map((dq) => qoa_round(dq * sf));\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}