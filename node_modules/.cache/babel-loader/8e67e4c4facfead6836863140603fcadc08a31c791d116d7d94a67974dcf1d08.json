{"ast":null,"code":"const axios = require('axios');\nconst {\n  v4: uuidv4\n} = require('uuid');\nconst {\n  Fullname,\n  ownernumber\n} = require('./settings'); // Adjusted import path\n\n// Konstanta\nconst SYSTEM_PROMPT = {\n  role: \"system\",\n  content: `Kamu adalah ${Fullname} ðŸŒŸ, asisten cerdas dari NEROXOFFC. Versi 1.0. Tugasmu adalah memberikan jawaban yang selalu berbeda untuk setiap pengguna, meskipun pertanyaannya sama. Jangan lupa untuk menggunakan penebalan pada poin penting dan menyebut nama pengguna jika tersedia. Jaga setiap interaksi tetap segar dan unik!, dan jika bertanya soal owner kamu ${ownernumber} adalah nomornya, dan pencipta asli kamu adalah Nerox.`\n};\nconst DEBUG = true;\n\n// Fungsi Utilitas\nfunction formatResponse(response) {\n  if (!response) return \"Maaf, saya tidak dapat memberikan jawaban saat ini.\";\n  response = response.replace(/Generated by BLACKBOX\\.AI, try unlimited chat https:\\/\\/www\\.blackbox\\.ai/g, '');\n  return response.trim().replace(/\\*\\*([^\\*]+)\\*\\*/g, \"*$1*\");\n}\n\n// Fungsi Utama Chat\nasync function chat(userMessage, sessionHistory) {\n  const body = {\n    messages: [SYSTEM_PROMPT, ...sessionHistory, {\n      content: userMessage,\n      role: \"user\"\n    }],\n    agentMode: \"gpt-4o\",\n    clickedAnswer2: false,\n    clickedAnswer3: false,\n    codeModelMode: true,\n    githubToken: null,\n    isChromeExt: false,\n    isMicMode: false,\n    previewToken: true,\n    trendingAgentMode: {},\n    visitFromDelta: null\n  };\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Model': 'gpt-4o'\n  };\n  let attempts = 0;\n  while (true) {\n    try {\n      attempts++;\n      if (DEBUG) console.log(`Percobaan ke-${attempts}`);\n      const response = await axios.post('https://api.blackbox.ai/api/chat', body, {\n        headers\n      });\n      if (response.data) {\n        if (DEBUG) console.log(\"Respons API diterima:\", response.data);\n        return formatResponse(response.data.replace(/(\\$\\@\\$.*?\\$\\@\\$)/g, ''));\n      }\n    } catch (error) {\n      if (DEBUG) console.error(`Mohon maaf ada kesalahan ke-${attempts}:`, error.message);\n    }\n  }\n}\n\n// Fungsi Auto Reply AI\nconst autoReplySky = async (m, skybreaker) => {\n  try {\n    const userMessage = m.text;\n    const sessionId = m.sender || uuidv4();\n    const session = {\n      history: [SYSTEM_PROMPT]\n    };\n    const response = await chat(userMessage, session.history);\n\n    // Use skybreaker.sendMessage directly\n    await skybreaker.sendMessage(m.chat, {\n      text: response,\n      quoted: m\n    }, {\n      ephemeral: false\n    });\n    session.history.push({\n      role: \"user\",\n      content: userMessage\n    });\n    session.history.push({\n      role: \"assistant\",\n      content: response\n    });\n  } catch (error) {\n    console.error(\"Error saat memproses Auto Reply AI:\", error.message);\n  }\n};\n\n// Fungsi Utama Module\nmodule.exports = {\n  autoAI: async function (m, args) {\n    const userMessage = m.text;\n    if (!userMessage || /^[.$/#@$]/.test(userMessage)) return false;\n    await autoReplySky(m);\n  },\n  autoReplySky,\n  chat\n};","map":{"version":3,"names":["axios","require","v4","uuidv4","Fullname","ownernumber","SYSTEM_PROMPT","role","content","DEBUG","formatResponse","response","replace","trim","chat","userMessage","sessionHistory","body","messages","agentMode","clickedAnswer2","clickedAnswer3","codeModelMode","githubToken","isChromeExt","isMicMode","previewToken","trendingAgentMode","visitFromDelta","headers","attempts","console","log","post","data","error","message","autoReplySky","m","skybreaker","text","sessionId","sender","session","history","sendMessage","quoted","ephemeral","push","module","exports","autoAI","args","test"],"sources":["C:/Users/vanitas/Downloads/tesskil/src/ChatRoom.js"],"sourcesContent":["const axios = require('axios');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst { Fullname, ownernumber } = require('./settings'); // Adjusted import path\r\n\r\n// Konstanta\r\nconst SYSTEM_PROMPT = {\r\n    role: \"system\",\r\n    content: `Kamu adalah ${Fullname} ðŸŒŸ, asisten cerdas dari NEROXOFFC. Versi 1.0. Tugasmu adalah memberikan jawaban yang selalu berbeda untuk setiap pengguna, meskipun pertanyaannya sama. Jangan lupa untuk menggunakan penebalan pada poin penting dan menyebut nama pengguna jika tersedia. Jaga setiap interaksi tetap segar dan unik!, dan jika bertanya soal owner kamu ${ownernumber} adalah nomornya, dan pencipta asli kamu adalah Nerox.`\r\n};\r\nconst DEBUG = true;\r\n\r\n// Fungsi Utilitas\r\nfunction formatResponse(response) {\r\n    if (!response) return \"Maaf, saya tidak dapat memberikan jawaban saat ini.\";\r\n    response = response.replace(/Generated by BLACKBOX\\.AI, try unlimited chat https:\\/\\/www\\.blackbox\\.ai/g, '');\r\n    return response.trim().replace(/\\*\\*([^\\*]+)\\*\\*/g, \"*$1*\");\r\n}\r\n\r\n// Fungsi Utama Chat\r\nasync function chat(userMessage, sessionHistory) {\r\n    const body = {\r\n        messages: [\r\n            SYSTEM_PROMPT,\r\n            ...sessionHistory,\r\n            { content: userMessage, role: \"user\" }\r\n        ],\r\n        agentMode: \"gpt-4o\",\r\n        clickedAnswer2: false,\r\n        clickedAnswer3: false,\r\n        codeModelMode: true,\r\n        githubToken: null,\r\n        isChromeExt: false,\r\n        isMicMode: false,\r\n        previewToken: true,\r\n        trendingAgentMode: {},\r\n        visitFromDelta: null\r\n    };\r\n\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'X-Model': 'gpt-4o'\r\n    };\r\n\r\n    let attempts = 0;\r\n    while (true) {\r\n        try {\r\n            attempts++;\r\n            if (DEBUG) console.log(`Percobaan ke-${attempts}`);\r\n\r\n            const response = await axios.post('https://api.blackbox.ai/api/chat', body, { headers });\r\n            if (response.data) {\r\n                if (DEBUG) console.log(\"Respons API diterima:\", response.data);\r\n                return formatResponse(response.data.replace(/(\\$\\@\\$.*?\\$\\@\\$)/g, ''));\r\n            }\r\n        } catch (error) {\r\n            if (DEBUG) console.error(`Mohon maaf ada kesalahan ke-${attempts}:`, error.message);\r\n        }\r\n    }\r\n}\r\n\r\n// Fungsi Auto Reply AI\r\nconst autoReplySky = async (m, skybreaker) => {\r\n    try {\r\n        const userMessage = m.text;\r\n        const sessionId = m.sender || uuidv4();\r\n\r\n        const session = { history: [SYSTEM_PROMPT] };\r\n\r\n        const response = await chat(userMessage, session.history);\r\n\r\n        // Use skybreaker.sendMessage directly\r\n        await skybreaker.sendMessage(m.chat, {\r\n            text: response,\r\n            quoted: m\r\n        }, { ephemeral: false });\r\n\r\n        session.history.push({ role: \"user\", content: userMessage });\r\n        session.history.push({ role: \"assistant\", content: response });\r\n    } catch (error) {\r\n        console.error(\"Error saat memproses Auto Reply AI:\", error.message);\r\n    }\r\n};\r\n\r\n// Fungsi Utama Module\r\nmodule.exports = {\r\n    autoAI: async function (m, args) {\r\n        const userMessage = m.text;\r\n\r\n        if (!userMessage || /^[.$/#@$]/.test(userMessage)) return false;\r\n\r\n        await autoReplySky(m);\r\n    },\r\n    autoReplySky,\r\n    chat\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}