{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LT_HASH_ANTI_TAMPERING = void 0;\nconst crypto_1 = require(\"./crypto\");\n/**\n * LT Hash is a summation based hash algorithm that maintains the integrity of a piece of data\n * over a series of mutations. You can add/remove mutations and it'll return a hash equal to\n * if the same series of mutations was made sequentially.\n */\nconst o = 128;\nclass d {\n  constructor(e) {\n    this.salt = e;\n  }\n  add(e, t) {\n    var r = this;\n    for (const item of t) {\n      e = r._addSingle(e, item);\n    }\n    return e;\n  }\n  subtract(e, t) {\n    var r = this;\n    for (const item of t) {\n      e = r._subtractSingle(e, item);\n    }\n    return e;\n  }\n  subtractThenAdd(e, t, r) {\n    var n = this;\n    return n.add(n.subtract(e, r), t);\n  }\n  _addSingle(e, t) {\n    var r = this;\n    const n = new Uint8Array((0, crypto_1.hkdf)(Buffer.from(t), o, {\n      info: r.salt\n    })).buffer;\n    return r.performPointwiseWithOverflow(e, n, (e, t) => e + t);\n  }\n  _subtractSingle(e, t) {\n    var r = this;\n    const n = new Uint8Array((0, crypto_1.hkdf)(Buffer.from(t), o, {\n      info: r.salt\n    })).buffer;\n    return r.performPointwiseWithOverflow(e, n, (e, t) => e - t);\n  }\n  performPointwiseWithOverflow(e, t, r) {\n    const n = new DataView(e),\n      i = new DataView(t),\n      a = new ArrayBuffer(n.byteLength),\n      s = new DataView(a);\n    for (let e = 0; e < n.byteLength; e += 2) {\n      s.setUint16(e, r(n.getUint16(e, !0), i.getUint16(e, !0)), !0);\n    }\n    return a;\n  }\n}\nexports.LT_HASH_ANTI_TAMPERING = new d('WhatsApp Patch Integrity');","map":{"version":3,"names":["Object","defineProperty","exports","value","LT_HASH_ANTI_TAMPERING","crypto_1","require","o","d","constructor","e","salt","add","t","r","item","_addSingle","subtract","_subtractSingle","subtractThenAdd","n","Uint8Array","hkdf","Buffer","from","info","buffer","performPointwiseWithOverflow","DataView","i","a","ArrayBuffer","byteLength","s","setUint16","getUint16"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Utils/lt-hash.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LT_HASH_ANTI_TAMPERING = void 0;\nconst crypto_1 = require(\"./crypto\");\n/**\n * LT Hash is a summation based hash algorithm that maintains the integrity of a piece of data\n * over a series of mutations. You can add/remove mutations and it'll return a hash equal to\n * if the same series of mutations was made sequentially.\n */\nconst o = 128;\nclass d {\n    constructor(e) {\n        this.salt = e;\n    }\n    add(e, t) {\n        var r = this;\n        for (const item of t) {\n            e = r._addSingle(e, item);\n        }\n        return e;\n    }\n    subtract(e, t) {\n        var r = this;\n        for (const item of t) {\n            e = r._subtractSingle(e, item);\n        }\n        return e;\n    }\n    subtractThenAdd(e, t, r) {\n        var n = this;\n        return n.add(n.subtract(e, r), t);\n    }\n    _addSingle(e, t) {\n        var r = this;\n        const n = new Uint8Array((0, crypto_1.hkdf)(Buffer.from(t), o, { info: r.salt })).buffer;\n        return r.performPointwiseWithOverflow(e, n, ((e, t) => e + t));\n    }\n    _subtractSingle(e, t) {\n        var r = this;\n        const n = new Uint8Array((0, crypto_1.hkdf)(Buffer.from(t), o, { info: r.salt })).buffer;\n        return r.performPointwiseWithOverflow(e, n, ((e, t) => e - t));\n    }\n    performPointwiseWithOverflow(e, t, r) {\n        const n = new DataView(e), i = new DataView(t), a = new ArrayBuffer(n.byteLength), s = new DataView(a);\n        for (let e = 0; e < n.byteLength; e += 2) {\n            s.setUint16(e, r(n.getUint16(e, !0), i.getUint16(e, !0)), !0);\n        }\n        return a;\n    }\n}\nexports.LT_HASH_ANTI_TAMPERING = new d('WhatsApp Patch Integrity');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}