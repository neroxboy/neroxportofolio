{"ast":null,"code":"const SenderMessageKey = require('./sender_message_key');\n//const HKDF = require('./hkdf');\nconst crypto = require('libsignal/src/crypto');\nclass SenderChainKey {\n  MESSAGE_KEY_SEED = Buffer.from([0x01]);\n  CHAIN_KEY_SEED = Buffer.from([0x02]);\n  iteration = 0;\n  chainKey = Buffer.alloc(0);\n  constructor(iteration, chainKey) {\n    this.iteration = iteration;\n    this.chainKey = chainKey;\n  }\n  getIteration() {\n    return this.iteration;\n  }\n  getSenderMessageKey() {\n    return new SenderMessageKey(this.iteration, this.getDerivative(this.MESSAGE_KEY_SEED, this.chainKey));\n  }\n  getNext() {\n    return new SenderChainKey(this.iteration + 1, this.getDerivative(this.CHAIN_KEY_SEED, this.chainKey));\n  }\n  getSeed() {\n    return typeof this.chainKey === 'string' ? Buffer.from(this.chainKey, 'base64') : this.chainKey;\n  }\n  getDerivative(seed, key) {\n    key = typeof key === 'string' ? Buffer.from(key, 'base64') : key;\n    const hash = crypto.calculateMAC(key, seed);\n    //const hash = new Hash().hmac_hash(key, seed, 'sha256', '');\n\n    return hash;\n  }\n}\nmodule.exports = SenderChainKey;","map":{"version":3,"names":["SenderMessageKey","require","crypto","SenderChainKey","MESSAGE_KEY_SEED","Buffer","from","CHAIN_KEY_SEED","iteration","chainKey","alloc","constructor","getIteration","getSenderMessageKey","getDerivative","getNext","getSeed","seed","key","hash","calculateMAC","module","exports"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/WASignalGroup/sender_chain_key.js"],"sourcesContent":["const SenderMessageKey = require('./sender_message_key');\n//const HKDF = require('./hkdf');\nconst crypto = require('libsignal/src/crypto');\n\nclass SenderChainKey {\n  MESSAGE_KEY_SEED = Buffer.from([0x01]);\n\n  CHAIN_KEY_SEED = Buffer.from([0x02]);\n\n  iteration = 0;\n\n  chainKey = Buffer.alloc(0);\n\n  constructor(iteration, chainKey) {\n    this.iteration = iteration;\n    this.chainKey = chainKey;\n  }\n\n  getIteration() {\n    return this.iteration;\n  }\n\n  getSenderMessageKey() {\n    return new SenderMessageKey(\n      this.iteration,\n      this.getDerivative(this.MESSAGE_KEY_SEED, this.chainKey)\n    );\n  }\n\n  getNext() {\n    return new SenderChainKey(\n      this.iteration + 1,\n      this.getDerivative(this.CHAIN_KEY_SEED, this.chainKey)\n    );\n  }\n\n  getSeed() {\n    return typeof this.chainKey === 'string' ? Buffer.from(this.chainKey, 'base64') : this.chainKey;\n  }\n\n  getDerivative(seed, key) {\n    key = typeof key === 'string' ? Buffer.from(key, 'base64') : key;\n    const hash = crypto.calculateMAC(key, seed);\n    //const hash = new Hash().hmac_hash(key, seed, 'sha256', '');\n    \n    return hash;\n  }\n}\n\nmodule.exports = SenderChainKey;"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACxD;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAE9C,MAAME,cAAc,CAAC;EACnBC,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAEtCC,cAAc,GAAGF,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAEpCE,SAAS,GAAG,CAAC;EAEbC,QAAQ,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC;EAE1BC,WAAWA,CAACH,SAAS,EAAEC,QAAQ,EAAE;IAC/B,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEAG,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACJ,SAAS;EACvB;EAEAK,mBAAmBA,CAAA,EAAG;IACpB,OAAO,IAAIb,gBAAgB,CACzB,IAAI,CAACQ,SAAS,EACd,IAAI,CAACM,aAAa,CAAC,IAAI,CAACV,gBAAgB,EAAE,IAAI,CAACK,QAAQ,CACzD,CAAC;EACH;EAEAM,OAAOA,CAAA,EAAG;IACR,OAAO,IAAIZ,cAAc,CACvB,IAAI,CAACK,SAAS,GAAG,CAAC,EAClB,IAAI,CAACM,aAAa,CAAC,IAAI,CAACP,cAAc,EAAE,IAAI,CAACE,QAAQ,CACvD,CAAC;EACH;EAEAO,OAAOA,CAAA,EAAG;IACR,OAAO,OAAO,IAAI,CAACP,QAAQ,KAAK,QAAQ,GAAGJ,MAAM,CAACC,IAAI,CAAC,IAAI,CAACG,QAAQ,EAAE,QAAQ,CAAC,GAAG,IAAI,CAACA,QAAQ;EACjG;EAEAK,aAAaA,CAACG,IAAI,EAAEC,GAAG,EAAE;IACvBA,GAAG,GAAG,OAAOA,GAAG,KAAK,QAAQ,GAAGb,MAAM,CAACC,IAAI,CAACY,GAAG,EAAE,QAAQ,CAAC,GAAGA,GAAG;IAChE,MAAMC,IAAI,GAAGjB,MAAM,CAACkB,YAAY,CAACF,GAAG,EAAED,IAAI,CAAC;IAC3C;;IAEA,OAAOE,IAAI;EACb;AACF;AAEAE,MAAM,CAACC,OAAO,GAAGnB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}