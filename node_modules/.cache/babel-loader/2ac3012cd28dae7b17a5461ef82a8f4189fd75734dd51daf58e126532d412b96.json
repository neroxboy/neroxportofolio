{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://wiki.multimedia.cx/index.php/ADTS\n\nAAAAAAAA AAAABCCD EEFFFFGH HHIJKLMM MMMMMMMM MMMOOOOO OOOOOOPP (QQQQQQQQ QQQQQQQQ)\n\nAACHeader consists of 7 or 9 bytes (without or with CRC).\nLetter  Length (bits)  Description\nA  12  syncword 0xFFF, all bits must be 1\nB  1   MPEG Version: 0 for MPEG-4, 1 for MPEG-2\nC  2   Layer: always 0\nD  1   protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\nE  2   profile, the MPEG-4 Audio Object Type minus 1\nF  4   MPEG-4 Sampling Frequency Index (15 is forbidden)\nG  1   private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\nH  3   MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\nI  1   originality, set to 0 when encoding, ignore when decoding\nJ  1   home, set to 0 when encoding, ignore when decoding\nK  1   copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\nL  1   copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\nM  13  frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\nO  11  Buffer fullness // 0x7FF for VBR\nP  2   Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\nQ  16  CRC if protection absent is 0 \n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport { bytesToString } from \"../../utilities.js\";\nimport { reserved, bad, none, sixteenBitCRC, rate96000, rate88200, rate64000, rate48000, rate44100, rate32000, rate24000, rate22050, rate16000, rate12000, rate11025, rate8000, rate7350, channelMappings, getChannelMapping, monophonic, lfe, bitDepth, channelMode, sampleRate, channels, copyrightId, copyrightIdStart, bufferFullness, isHome, isOriginal, isPrivate, layer, length, mpegVersion, numberAACFrames, profile, protection, frameLength, description, samples, sampleRateBits, profileBits, channelModeBits, buffer, readRawData, getHeader, setHeader, uint8Array, dataView } from \"../../constants.js\";\nimport CodecHeader from \"../CodecHeader.js\";\nconst mpegVersionValues = {\n  0b00000000: \"MPEG-4\",\n  0b00001000: \"MPEG-2\"\n};\nconst layerValues = {\n  0b00000000: \"valid\",\n  0b00000010: bad,\n  0b00000100: bad,\n  0b00000110: bad\n};\nconst protectionValues = {\n  0b00000000: sixteenBitCRC,\n  0b00000001: none\n};\nconst profileValues = {\n  0b00000000: \"AAC Main\",\n  0b01000000: \"AAC LC (Low Complexity)\",\n  0b10000000: \"AAC SSR (Scalable Sample Rate)\",\n  0b11000000: \"AAC LTP (Long Term Prediction)\"\n};\nconst sampleRates = {\n  0b00000000: rate96000,\n  0b00000100: rate88200,\n  0b00001000: rate64000,\n  0b00001100: rate48000,\n  0b00010000: rate44100,\n  0b00010100: rate32000,\n  0b00011000: rate24000,\n  0b00011100: rate22050,\n  0b00100000: rate16000,\n  0b00100100: rate12000,\n  0b00101000: rate11025,\n  0b00101100: rate8000,\n  0b00110000: rate7350,\n  0b00110100: reserved,\n  0b00111000: reserved,\n  0b00111100: \"frequency is written explicitly\"\n};\n\n// prettier-ignore\nconst channelModeValues = {\n  0b000000000: {\n    [channels]: 0,\n    [description]: \"Defined in AOT Specific Config\"\n  },\n  /*\n  'monophonic (mono)'\n  'stereo (left, right)'\n  'linear surround (front center, front left, front right)'\n  'quadraphonic (front center, front left, front right, rear center)'\n  '5.0 surround (front center, front left, front right, rear left, rear right)'\n  '5.1 surround (front center, front left, front right, rear left, rear right, LFE)'\n  '7.1 surround (front center, front left, front right, side left, side right, rear left, rear right, LFE)'\n  */\n  0b001000000: {\n    [channels]: 1,\n    [description]: monophonic\n  },\n  0b010000000: {\n    [channels]: 2,\n    [description]: getChannelMapping(2, channelMappings[0][0])\n  },\n  0b011000000: {\n    [channels]: 3,\n    [description]: getChannelMapping(3, channelMappings[1][3])\n  },\n  0b100000000: {\n    [channels]: 4,\n    [description]: getChannelMapping(4, channelMappings[1][3], channelMappings[3][4])\n  },\n  0b101000000: {\n    [channels]: 5,\n    [description]: getChannelMapping(5, channelMappings[1][3], channelMappings[3][0])\n  },\n  0b110000000: {\n    [channels]: 6,\n    [description]: getChannelMapping(6, channelMappings[1][3], channelMappings[3][0], lfe)\n  },\n  0b111000000: {\n    [channels]: 8,\n    [description]: getChannelMapping(8, channelMappings[1][3], channelMappings[2][0], channelMappings[3][0], lfe)\n  }\n};\nexport default class AACHeader extends CodecHeader {\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    const header = {};\n\n    // Must be at least seven bytes. Out of data\n    const data = yield* codecParser[readRawData](7, readOffset);\n\n    // Check header cache\n    const key = bytesToString([data[0], data[1], data[2], data[3] & 0b11111100 | data[6] & 0b00000011 // frame length, buffer fullness varies so don't cache it\n    ]);\n    const cachedHeader = headerCache[getHeader](key);\n    if (!cachedHeader) {\n      // Frame sync (all bits must be set): `11111111|1111`:\n      if (data[0] !== 0xff || data[1] < 0xf0) return null;\n\n      // Byte (2 of 7)\n      // * `1111BCCD`\n      // * `....B...`: MPEG Version: 0 for MPEG-4, 1 for MPEG-2\n      // * `.....CC.`: Layer: always 0\n      // * `.......D`: protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\n      header[mpegVersion] = mpegVersionValues[data[1] & 0b00001000];\n      header[layer] = layerValues[data[1] & 0b00000110];\n      if (header[layer] === bad) return null;\n      const protectionBit = data[1] & 0b00000001;\n      header[protection] = protectionValues[protectionBit];\n      header[length] = protectionBit ? 7 : 9;\n\n      // Byte (3 of 7)\n      // * `EEFFFFGH`\n      // * `EE......`: profile, the MPEG-4 Audio Object Type minus 1\n      // * `..FFFF..`: MPEG-4 Sampling Frequency Index (15 is forbidden)\n      // * `......G.`: private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\n      header[profileBits] = data[2] & 0b11000000;\n      header[sampleRateBits] = data[2] & 0b00111100;\n      const privateBit = data[2] & 0b00000010;\n      header[profile] = profileValues[header[profileBits]];\n      header[sampleRate] = sampleRates[header[sampleRateBits]];\n      if (header[sampleRate] === reserved) return null;\n      header[isPrivate] = !!privateBit;\n\n      // Byte (3,4 of 7)\n      // * `.......H|HH......`: MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\n      header[channelModeBits] = (data[2] << 8 | data[3]) & 0b111000000;\n      header[channelMode] = channelModeValues[header[channelModeBits]][description];\n      header[channels] = channelModeValues[header[channelModeBits]][channels];\n\n      // Byte (4 of 7)\n      // * `HHIJKLMM`\n      // * `..I.....`: originality, set to 0 when encoding, ignore when decoding\n      // * `...J....`: home, set to 0 when encoding, ignore when decoding\n      // * `....K...`: copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\n      // * `.....L..`: copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\n      header[isOriginal] = !!(data[3] & 0b00100000);\n      header[isHome] = !!(data[3] & 0b00001000);\n      header[copyrightId] = !!(data[3] & 0b00001000);\n      header[copyrightIdStart] = !!(data[3] & 0b00000100);\n      header[bitDepth] = 16;\n      header[samples] = 1024;\n\n      // Byte (7 of 7)\n      // * `......PP` Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\n      header[numberAACFrames] = data[6] & 0b00000011;\n      {\n        const {\n          length,\n          channelModeBits,\n          profileBits,\n          sampleRateBits,\n          frameLength,\n          samples,\n          numberAACFrames,\n          ...codecUpdateFields\n        } = header;\n        headerCache[setHeader](key, header, codecUpdateFields);\n      }\n    } else {\n      Object.assign(header, cachedHeader);\n    }\n\n    // Byte (4,5,6 of 7)\n    // * `.......MM|MMMMMMMM|MMM.....`: frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\n    header[frameLength] = (data[3] << 11 | data[4] << 3 | data[5] >> 5) & 0x1fff;\n    if (!header[frameLength]) return null;\n\n    // Byte (6,7 of 7)\n    // * `...OOOOO|OOOOOO..`: Buffer fullness\n    const bufferFullnessBits = (data[5] << 6 | data[6] >> 2) & 0x7ff;\n    header[bufferFullness] = bufferFullnessBits === 0x7ff ? \"VBR\" : bufferFullnessBits;\n    return new AACHeader(header);\n  }\n\n  /**\n   * @private\n   * Call AACHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n    this[copyrightId] = header[copyrightId];\n    this[copyrightIdStart] = header[copyrightIdStart];\n    this[bufferFullness] = header[bufferFullness];\n    this[isHome] = header[isHome];\n    this[isOriginal] = header[isOriginal];\n    this[isPrivate] = header[isPrivate];\n    this[layer] = header[layer];\n    this[length] = header[length];\n    this[mpegVersion] = header[mpegVersion];\n    this[numberAACFrames] = header[numberAACFrames];\n    this[profile] = header[profile];\n    this[protection] = header[protection];\n  }\n  get audioSpecificConfig() {\n    // Audio Specific Configuration\n    // * `000EEFFF|F0HHH000`:\n    // * `000EE...|........`: Object Type (profileBit + 1)\n    // * `.....FFF|F.......`: Sample Rate\n    // * `........|.0HHH...`: Channel Configuration\n    // * `........|.....0..`: Frame Length (1024)\n    // * `........|......0.`: does not depend on core coder\n    // * `........|.......0`: Not Extension\n    const header = headerStore.get(this);\n    const audioSpecificConfig = header[profileBits] + 0x40 << 5 | header[sampleRateBits] << 5 | header[channelModeBits] >> 3;\n    const bytes = new uint8Array(2);\n    new dataView(bytes[buffer]).setUint16(0, audioSpecificConfig, false);\n    return bytes;\n  }\n}","map":{"version":3,"names":["headerStore","bytesToString","reserved","bad","none","sixteenBitCRC","rate96000","rate88200","rate64000","rate48000","rate44100","rate32000","rate24000","rate22050","rate16000","rate12000","rate11025","rate8000","rate7350","channelMappings","getChannelMapping","monophonic","lfe","bitDepth","channelMode","sampleRate","channels","copyrightId","copyrightIdStart","bufferFullness","isHome","isOriginal","isPrivate","layer","length","mpegVersion","numberAACFrames","profile","protection","frameLength","description","samples","sampleRateBits","profileBits","channelModeBits","buffer","readRawData","getHeader","setHeader","uint8Array","dataView","CodecHeader","mpegVersionValues","layerValues","protectionValues","profileValues","sampleRates","channelModeValues","AACHeader","codecParser","headerCache","readOffset","header","data","key","cachedHeader","protectionBit","privateBit","codecUpdateFields","Object","assign","bufferFullnessBits","constructor","audioSpecificConfig","get","bytes","setUint16"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/codecs/aac/AACHeader.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://wiki.multimedia.cx/index.php/ADTS\n\nAAAAAAAA AAAABCCD EEFFFFGH HHIJKLMM MMMMMMMM MMMOOOOO OOOOOOPP (QQQQQQQQ QQQQQQQQ)\n\nAACHeader consists of 7 or 9 bytes (without or with CRC).\nLetter  Length (bits)  Description\nA  12  syncword 0xFFF, all bits must be 1\nB  1   MPEG Version: 0 for MPEG-4, 1 for MPEG-2\nC  2   Layer: always 0\nD  1   protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\nE  2   profile, the MPEG-4 Audio Object Type minus 1\nF  4   MPEG-4 Sampling Frequency Index (15 is forbidden)\nG  1   private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\nH  3   MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\nI  1   originality, set to 0 when encoding, ignore when decoding\nJ  1   home, set to 0 when encoding, ignore when decoding\nK  1   copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\nL  1   copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\nM  13  frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\nO  11  Buffer fullness // 0x7FF for VBR\nP  2   Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\nQ  16  CRC if protection absent is 0 \n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport { bytesToString } from \"../../utilities.js\";\nimport {\n  reserved,\n  bad,\n  none,\n  sixteenBitCRC,\n  rate96000,\n  rate88200,\n  rate64000,\n  rate48000,\n  rate44100,\n  rate32000,\n  rate24000,\n  rate22050,\n  rate16000,\n  rate12000,\n  rate11025,\n  rate8000,\n  rate7350,\n  channelMappings,\n  getChannelMapping,\n  monophonic,\n  lfe,\n  bitDepth,\n  channelMode,\n  sampleRate,\n  channels,\n  copyrightId,\n  copyrightIdStart,\n  bufferFullness,\n  isHome,\n  isOriginal,\n  isPrivate,\n  layer,\n  length,\n  mpegVersion,\n  numberAACFrames,\n  profile,\n  protection,\n  frameLength,\n  description,\n  samples,\n  sampleRateBits,\n  profileBits,\n  channelModeBits,\n  buffer,\n  readRawData,\n  getHeader,\n  setHeader,\n  uint8Array,\n  dataView,\n} from \"../../constants.js\";\n\nimport CodecHeader from \"../CodecHeader.js\";\n\nconst mpegVersionValues = {\n  0b00000000: \"MPEG-4\",\n  0b00001000: \"MPEG-2\",\n};\n\nconst layerValues = {\n  0b00000000: \"valid\",\n  0b00000010: bad,\n  0b00000100: bad,\n  0b00000110: bad,\n};\n\nconst protectionValues = {\n  0b00000000: sixteenBitCRC,\n  0b00000001: none,\n};\n\nconst profileValues = {\n  0b00000000: \"AAC Main\",\n  0b01000000: \"AAC LC (Low Complexity)\",\n  0b10000000: \"AAC SSR (Scalable Sample Rate)\",\n  0b11000000: \"AAC LTP (Long Term Prediction)\",\n};\n\nconst sampleRates = {\n  0b00000000: rate96000,\n  0b00000100: rate88200,\n  0b00001000: rate64000,\n  0b00001100: rate48000,\n  0b00010000: rate44100,\n  0b00010100: rate32000,\n  0b00011000: rate24000,\n  0b00011100: rate22050,\n  0b00100000: rate16000,\n  0b00100100: rate12000,\n  0b00101000: rate11025,\n  0b00101100: rate8000,\n  0b00110000: rate7350,\n  0b00110100: reserved,\n  0b00111000: reserved,\n  0b00111100: \"frequency is written explicitly\",\n};\n\n// prettier-ignore\nconst channelModeValues = {\n  0b000000000: { [channels]: 0, [description]: \"Defined in AOT Specific Config\" },\n  /*\n  'monophonic (mono)'\n  'stereo (left, right)'\n  'linear surround (front center, front left, front right)'\n  'quadraphonic (front center, front left, front right, rear center)'\n  '5.0 surround (front center, front left, front right, rear left, rear right)'\n  '5.1 surround (front center, front left, front right, rear left, rear right, LFE)'\n  '7.1 surround (front center, front left, front right, side left, side right, rear left, rear right, LFE)'\n  */\n  0b001000000: { [channels]: 1, [description]: monophonic },\n  0b010000000: { [channels]: 2, [description]: getChannelMapping(2,channelMappings[0][0]) },\n  0b011000000: { [channels]: 3, [description]: getChannelMapping(3,channelMappings[1][3]), },\n  0b100000000: { [channels]: 4, [description]: getChannelMapping(4,channelMappings[1][3],channelMappings[3][4]), },\n  0b101000000: { [channels]: 5, [description]: getChannelMapping(5,channelMappings[1][3],channelMappings[3][0]), },\n  0b110000000: { [channels]: 6, [description]: getChannelMapping(6,channelMappings[1][3],channelMappings[3][0],lfe), },\n  0b111000000: { [channels]: 8, [description]: getChannelMapping(8,channelMappings[1][3],channelMappings[2][0],channelMappings[3][0],lfe), },\n};\n\nexport default class AACHeader extends CodecHeader {\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    const header = {};\n\n    // Must be at least seven bytes. Out of data\n    const data = yield* codecParser[readRawData](7, readOffset);\n\n    // Check header cache\n    const key = bytesToString([\n      data[0],\n      data[1],\n      data[2],\n      (data[3] & 0b11111100) | (data[6] & 0b00000011), // frame length, buffer fullness varies so don't cache it\n    ]);\n    const cachedHeader = headerCache[getHeader](key);\n\n    if (!cachedHeader) {\n      // Frame sync (all bits must be set): `11111111|1111`:\n      if (data[0] !== 0xff || data[1] < 0xf0) return null;\n\n      // Byte (2 of 7)\n      // * `1111BCCD`\n      // * `....B...`: MPEG Version: 0 for MPEG-4, 1 for MPEG-2\n      // * `.....CC.`: Layer: always 0\n      // * `.......D`: protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\n      header[mpegVersion] = mpegVersionValues[data[1] & 0b00001000];\n\n      header[layer] = layerValues[data[1] & 0b00000110];\n      if (header[layer] === bad) return null;\n\n      const protectionBit = data[1] & 0b00000001;\n      header[protection] = protectionValues[protectionBit];\n      header[length] = protectionBit ? 7 : 9;\n\n      // Byte (3 of 7)\n      // * `EEFFFFGH`\n      // * `EE......`: profile, the MPEG-4 Audio Object Type minus 1\n      // * `..FFFF..`: MPEG-4 Sampling Frequency Index (15 is forbidden)\n      // * `......G.`: private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\n      header[profileBits] = data[2] & 0b11000000;\n      header[sampleRateBits] = data[2] & 0b00111100;\n      const privateBit = data[2] & 0b00000010;\n\n      header[profile] = profileValues[header[profileBits]];\n\n      header[sampleRate] = sampleRates[header[sampleRateBits]];\n      if (header[sampleRate] === reserved) return null;\n\n      header[isPrivate] = !!privateBit;\n\n      // Byte (3,4 of 7)\n      // * `.......H|HH......`: MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\n      header[channelModeBits] = ((data[2] << 8) | data[3]) & 0b111000000;\n      header[channelMode] =\n        channelModeValues[header[channelModeBits]][description];\n      header[channels] = channelModeValues[header[channelModeBits]][channels];\n\n      // Byte (4 of 7)\n      // * `HHIJKLMM`\n      // * `..I.....`: originality, set to 0 when encoding, ignore when decoding\n      // * `...J....`: home, set to 0 when encoding, ignore when decoding\n      // * `....K...`: copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\n      // * `.....L..`: copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\n      header[isOriginal] = !!(data[3] & 0b00100000);\n      header[isHome] = !!(data[3] & 0b00001000);\n      header[copyrightId] = !!(data[3] & 0b00001000);\n      header[copyrightIdStart] = !!(data[3] & 0b00000100);\n      header[bitDepth] = 16;\n      header[samples] = 1024;\n\n      // Byte (7 of 7)\n      // * `......PP` Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\n      header[numberAACFrames] = data[6] & 0b00000011;\n\n      {\n        const {\n          length,\n          channelModeBits,\n          profileBits,\n          sampleRateBits,\n          frameLength,\n          samples,\n          numberAACFrames,\n          ...codecUpdateFields\n        } = header;\n        headerCache[setHeader](key, header, codecUpdateFields);\n      }\n    } else {\n      Object.assign(header, cachedHeader);\n    }\n\n    // Byte (4,5,6 of 7)\n    // * `.......MM|MMMMMMMM|MMM.....`: frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\n    header[frameLength] =\n      ((data[3] << 11) | (data[4] << 3) | (data[5] >> 5)) & 0x1fff;\n    if (!header[frameLength]) return null;\n\n    // Byte (6,7 of 7)\n    // * `...OOOOO|OOOOOO..`: Buffer fullness\n    const bufferFullnessBits = ((data[5] << 6) | (data[6] >> 2)) & 0x7ff;\n    header[bufferFullness] =\n      bufferFullnessBits === 0x7ff ? \"VBR\" : bufferFullnessBits;\n\n    return new AACHeader(header);\n  }\n\n  /**\n   * @private\n   * Call AACHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n\n    this[copyrightId] = header[copyrightId];\n    this[copyrightIdStart] = header[copyrightIdStart];\n    this[bufferFullness] = header[bufferFullness];\n    this[isHome] = header[isHome];\n    this[isOriginal] = header[isOriginal];\n    this[isPrivate] = header[isPrivate];\n    this[layer] = header[layer];\n    this[length] = header[length];\n    this[mpegVersion] = header[mpegVersion];\n    this[numberAACFrames] = header[numberAACFrames];\n    this[profile] = header[profile];\n    this[protection] = header[protection];\n  }\n\n  get audioSpecificConfig() {\n    // Audio Specific Configuration\n    // * `000EEFFF|F0HHH000`:\n    // * `000EE...|........`: Object Type (profileBit + 1)\n    // * `.....FFF|F.......`: Sample Rate\n    // * `........|.0HHH...`: Channel Configuration\n    // * `........|.....0..`: Frame Length (1024)\n    // * `........|......0.`: does not depend on core coder\n    // * `........|.......0`: Not Extension\n    const header = headerStore.get(this);\n\n    const audioSpecificConfig =\n      ((header[profileBits] + 0x40) << 5) |\n      (header[sampleRateBits] << 5) |\n      (header[channelModeBits] >> 3);\n\n    const bytes = new uint8Array(2);\n    new dataView(bytes[buffer]).setUint16(0, audioSpecificConfig, false);\n    return bytes;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}