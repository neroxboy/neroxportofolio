{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n// https://id3.org/Developer%20Information\n\nimport { length, version, readRawData } from \"../constants.js\";\nconst unsynchronizationFlag = \"unsynchronizationFlag\";\nconst extendedHeaderFlag = \"extendedHeaderFlag\";\nconst experimentalFlag = \"experimentalFlag\";\nconst footerPresent = \"footerPresent\";\nexport default class ID3v2 {\n  static *getID3v2Header(codecParser, headerCache, readOffset) {\n    const headerLength = 10;\n    const header = {};\n    let data = yield* codecParser[readRawData](3, readOffset);\n    // Byte (0-2 of 9)\n    // ID3\n    if (data[0] !== 0x49 || data[1] !== 0x44 || data[2] !== 0x33) return null;\n    data = yield* codecParser[readRawData](headerLength, readOffset);\n\n    // Byte (3-4 of 9)\n    // * `BBBBBBBB|........`: Major version\n    // * `........|BBBBBBBB`: Minor version\n    header[version] = `id3v2.${data[3]}.${data[4]}`;\n\n    // Byte (5 of 9)\n    // * `....0000.: Zeros (flags not implemented yet)\n    if (data[5] & 0b00001111) return null;\n\n    // Byte (5 of 9)\n    // * `CDEF0000`: Flags\n    // * `C.......`: Unsynchronisation (indicates whether or not unsynchronisation is used)\n    // * `.D......`: Extended header (indicates whether or not the header is followed by an extended header)\n    // * `..E.....`: Experimental indicator (indicates whether or not the tag is in an experimental stage)\n    // * `...F....`: Footer present (indicates that a footer is present at the very end of the tag)\n    header[unsynchronizationFlag] = !!(data[5] & 0b10000000);\n    header[extendedHeaderFlag] = !!(data[5] & 0b01000000);\n    header[experimentalFlag] = !!(data[5] & 0b00100000);\n    header[footerPresent] = !!(data[5] & 0b00010000);\n\n    // Byte (6-9 of 9)\n    // * `0.......|0.......|0.......|0.......`: Zeros\n    if (data[6] & 0b10000000 || data[7] & 0b10000000 || data[8] & 0b10000000 || data[9] & 0b10000000) return null;\n\n    // Byte (6-9 of 9)\n    // * `.FFFFFFF|.FFFFFFF|.FFFFFFF|.FFFFFFF`: Tag Length\n    // The ID3v2 tag size is encoded with four bytes where the most significant bit (bit 7)\n    // is set to zero in every byte, making a total of 28 bits. The zeroed bits are ignored,\n    // so a 257 bytes long tag is represented as $00 00 02 01.\n    const dataLength = data[6] << 21 | data[7] << 14 | data[8] << 7 | data[9];\n    header[length] = headerLength + dataLength;\n    return new ID3v2(header);\n  }\n  constructor(header) {\n    this[version] = header[version];\n    this[unsynchronizationFlag] = header[unsynchronizationFlag];\n    this[extendedHeaderFlag] = header[extendedHeaderFlag];\n    this[experimentalFlag] = header[experimentalFlag];\n    this[footerPresent] = header[footerPresent];\n    this[length] = header[length];\n  }\n}","map":{"version":3,"names":["length","version","readRawData","unsynchronizationFlag","extendedHeaderFlag","experimentalFlag","footerPresent","ID3v2","getID3v2Header","codecParser","headerCache","readOffset","headerLength","header","data","dataLength","constructor"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/metadata/ID3v2.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n// https://id3.org/Developer%20Information\n\nimport { length, version, readRawData } from \"../constants.js\";\n\nconst unsynchronizationFlag = \"unsynchronizationFlag\";\nconst extendedHeaderFlag = \"extendedHeaderFlag\";\nconst experimentalFlag = \"experimentalFlag\";\nconst footerPresent = \"footerPresent\";\n\nexport default class ID3v2 {\n  static *getID3v2Header(codecParser, headerCache, readOffset) {\n    const headerLength = 10;\n    const header = {};\n\n    let data = yield* codecParser[readRawData](3, readOffset);\n    // Byte (0-2 of 9)\n    // ID3\n    if (data[0] !== 0x49 || data[1] !== 0x44 || data[2] !== 0x33) return null;\n\n    data = yield* codecParser[readRawData](headerLength, readOffset);\n\n    // Byte (3-4 of 9)\n    // * `BBBBBBBB|........`: Major version\n    // * `........|BBBBBBBB`: Minor version\n    header[version] = `id3v2.${data[3]}.${data[4]}`;\n\n    // Byte (5 of 9)\n    // * `....0000.: Zeros (flags not implemented yet)\n    if (data[5] & 0b00001111) return null;\n\n    // Byte (5 of 9)\n    // * `CDEF0000`: Flags\n    // * `C.......`: Unsynchronisation (indicates whether or not unsynchronisation is used)\n    // * `.D......`: Extended header (indicates whether or not the header is followed by an extended header)\n    // * `..E.....`: Experimental indicator (indicates whether or not the tag is in an experimental stage)\n    // * `...F....`: Footer present (indicates that a footer is present at the very end of the tag)\n    header[unsynchronizationFlag] = !!(data[5] & 0b10000000);\n    header[extendedHeaderFlag] = !!(data[5] & 0b01000000);\n    header[experimentalFlag] = !!(data[5] & 0b00100000);\n    header[footerPresent] = !!(data[5] & 0b00010000);\n\n    // Byte (6-9 of 9)\n    // * `0.......|0.......|0.......|0.......`: Zeros\n    if (\n      data[6] & 0b10000000 ||\n      data[7] & 0b10000000 ||\n      data[8] & 0b10000000 ||\n      data[9] & 0b10000000\n    )\n      return null;\n\n    // Byte (6-9 of 9)\n    // * `.FFFFFFF|.FFFFFFF|.FFFFFFF|.FFFFFFF`: Tag Length\n    // The ID3v2 tag size is encoded with four bytes where the most significant bit (bit 7)\n    // is set to zero in every byte, making a total of 28 bits. The zeroed bits are ignored,\n    // so a 257 bytes long tag is represented as $00 00 02 01.\n    const dataLength =\n      (data[6] << 21) | (data[7] << 14) | (data[8] << 7) | data[9];\n\n    header[length] = headerLength + dataLength;\n\n    return new ID3v2(header);\n  }\n\n  constructor(header) {\n    this[version] = header[version];\n    this[unsynchronizationFlag] = header[unsynchronizationFlag];\n    this[extendedHeaderFlag] = header[extendedHeaderFlag];\n    this[experimentalFlag] = header[experimentalFlag];\n    this[footerPresent] = header[footerPresent];\n    this[length] = header[length];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}