{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ID3v2Parser = void 0;\nconst Token = require(\"token-types\");\nconst util = require(\"../common/Util\");\nconst FrameParser_1 = require(\"./FrameParser\");\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\nclass ID3v2Parser {\n  static removeUnsyncBytes(buffer) {\n    let readI = 0;\n    let writeI = 0;\n    while (readI < buffer.length - 1) {\n      if (readI !== writeI) {\n        buffer[writeI] = buffer[readI];\n      }\n      readI += buffer[readI] === 0xFF && buffer[readI + 1] === 0 ? 2 : 1;\n      writeI++;\n    }\n    if (readI < buffer.length) {\n      buffer[writeI++] = buffer[readI];\n    }\n    return buffer.slice(0, writeI);\n  }\n  static getFrameHeaderLength(majorVer) {\n    switch (majorVer) {\n      case 2:\n        return 6;\n      case 3:\n      case 4:\n        return 10;\n      default:\n        throw new Error('header versionIndex is incorrect');\n    }\n  }\n  static readFrameFlags(b) {\n    return {\n      status: {\n        tag_alter_preservation: util.getBit(b, 0, 6),\n        file_alter_preservation: util.getBit(b, 0, 5),\n        read_only: util.getBit(b, 0, 4)\n      },\n      format: {\n        grouping_identity: util.getBit(b, 1, 7),\n        compression: util.getBit(b, 1, 3),\n        encryption: util.getBit(b, 1, 2),\n        unsynchronisation: util.getBit(b, 1, 1),\n        data_length_indicator: util.getBit(b, 1, 0)\n      }\n    };\n  }\n  static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n    const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n    switch (majorVer) {\n      case 2:\n        return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n      case 3:\n      case 4:\n        if (frameHeader.flags.format.unsynchronisation) {\n          uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n        }\n        if (frameHeader.flags.format.data_length_indicator) {\n          uint8Array = uint8Array.slice(4, uint8Array.length);\n        }\n        return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n  }\n  /**\n   * Create a combined tag key, of tag & description\n   * @param tag e.g.: COM\n   * @param description e.g. iTunPGAP\n   * @returns string e.g. COM:iTunPGAP\n   */\n  static makeDescriptionTagName(tag, description) {\n    return tag + (description ? ':' + description : '');\n  }\n  async parse(metadata, tokenizer, options) {\n    this.tokenizer = tokenizer;\n    this.metadata = metadata;\n    this.options = options;\n    const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n    if (id3Header.fileIdentifier !== 'ID3') {\n      throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n    }\n    this.id3Header = id3Header;\n    this.headerType = 'ID3v2.' + id3Header.version.major;\n    return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n  }\n  async parseExtendedHeader() {\n    const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n    const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n    return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n  }\n  async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n    await this.tokenizer.ignore(dataRemaining);\n    return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n  }\n  async parseId3Data(dataLen) {\n    const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n    for (const tag of this.parseMetadata(uint8Array)) {\n      if (tag.id === 'TXXX') {\n        if (tag.value) {\n          for (const text of tag.value.text) {\n            this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n          }\n        }\n      } else if (tag.id === 'COM') {\n        for (const value of tag.value) {\n          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n        }\n      } else if (tag.id === 'COMM') {\n        for (const value of tag.value) {\n          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\n        }\n      } else if (Array.isArray(tag.value)) {\n        for (const value of tag.value) {\n          this.addTag(tag.id, value);\n        }\n      } else {\n        this.addTag(tag.id, tag.value);\n      }\n    }\n  }\n  addTag(id, value) {\n    this.metadata.addTag(this.headerType, id, value);\n  }\n  parseMetadata(data) {\n    let offset = 0;\n    const tags = [];\n    while (true) {\n      if (offset === data.length) break;\n      const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n      if (offset + frameHeaderLength > data.length) {\n        this.metadata.addWarning('Illegal ID3v2 tag length');\n        break;\n      }\n      const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n      const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n      const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n      const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n      if (values) {\n        tags.push({\n          id: frameHeader.id,\n          value: values\n        });\n      }\n    }\n    return tags;\n  }\n  readFrameHeader(uint8Array, majorVer) {\n    let header;\n    switch (majorVer) {\n      case 2:\n        header = {\n          id: Buffer.from(uint8Array.slice(0, 3)).toString('ascii'),\n          length: Token.UINT24_BE.get(uint8Array, 3)\n        };\n        if (!header.id.match(/[A-Z0-9]{3}/g)) {\n          this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n        }\n        break;\n      case 3:\n      case 4:\n        header = {\n          id: Buffer.from(uint8Array.slice(0, 4)).toString('ascii'),\n          length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n          flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n        };\n        if (!header.id.match(/[A-Z0-9]{4}/g)) {\n          this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n        }\n        break;\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n    return header;\n  }\n}\nexports.ID3v2Parser = ID3v2Parser;","map":{"version":3,"names":["Object","defineProperty","exports","value","ID3v2Parser","Token","require","util","FrameParser_1","ID3v2Token_1","removeUnsyncBytes","buffer","readI","writeI","length","slice","getFrameHeaderLength","majorVer","Error","readFrameFlags","b","status","tag_alter_preservation","getBit","file_alter_preservation","read_only","format","grouping_identity","compression","encryption","unsynchronisation","data_length_indicator","readFrameData","uint8Array","frameHeader","includeCovers","warningCollector","frameParser","FrameParser","readData","id","flags","makeDescriptionTagName","tag","description","parse","metadata","tokenizer","options","id3Header","readToken","ID3v2Header","fileIdentifier","headerType","version","major","isExtendedHeader","parseExtendedHeader","parseId3Data","size","extendedHeader","ExtendedHeader","dataRemaining","len","parseExtendedHeaderData","extendedHeaderSize","ignore","dataLen","Uint8ArrayType","parseMetadata","text","addTag","Array","isArray","data","offset","tags","frameHeaderLength","addWarning","frameHeaderBytes","readFrameHeader","frameDataBytes","values","skipCovers","push","header","Buffer","from","toString","UINT24_BE","get","match","UINT32SYNCSAFE","UINT32_BE"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ID3v2Parser = void 0;\nconst Token = require(\"token-types\");\nconst util = require(\"../common/Util\");\nconst FrameParser_1 = require(\"./FrameParser\");\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\nclass ID3v2Parser {\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw new Error('header versionIndex is incorrect');\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags.format.data_length_indicator) {\n                    uint8Array = uint8Array.slice(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? ':' + description : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = ('ID3v2.' + id3Header.version.major);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            if (tag.id === 'TXXX') {\n                if (tag.value) {\n                    for (const text of tag.value.text) {\n                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n                    }\n                }\n            }\n            else if (tag.id === 'COM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n                }\n            }\n            else if (tag.id === 'COMM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\n                }\n            }\n            else if (Array.isArray(tag.value)) {\n                for (const value of tag.value) {\n                    this.addTag(tag.id, value);\n                }\n            }\n            else {\n                this.addTag(tag.id, tag.value);\n            }\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: Buffer.from(uint8Array.slice(0, 3)).toString('ascii'),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: Buffer.from(uint8Array.slice(0, 4)).toString('ascii'),\n                    length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n        return header;\n    }\n}\nexports.ID3v2Parser = ID3v2Parser;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAME,aAAa,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAMG,YAAY,GAAGH,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMF,WAAW,CAAC;EACd,OAAOM,iBAAiBA,CAACC,MAAM,EAAE;IAC7B,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,MAAM,GAAG,CAAC;IACd,OAAOD,KAAK,GAAGD,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;MAC9B,IAAIF,KAAK,KAAKC,MAAM,EAAE;QAClBF,MAAM,CAACE,MAAM,CAAC,GAAGF,MAAM,CAACC,KAAK,CAAC;MAClC;MACAA,KAAK,IAAKD,MAAM,CAACC,KAAK,CAAC,KAAK,IAAI,IAAID,MAAM,CAACC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC;MACpEC,MAAM,EAAE;IACZ;IACA,IAAID,KAAK,GAAGD,MAAM,CAACG,MAAM,EAAE;MACvBH,MAAM,CAACE,MAAM,EAAE,CAAC,GAAGF,MAAM,CAACC,KAAK,CAAC;IACpC;IACA,OAAOD,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEF,MAAM,CAAC;EAClC;EACA,OAAOG,oBAAoBA,CAACC,QAAQ,EAAE;IAClC,QAAQA,QAAQ;MACZ,KAAK,CAAC;QACF,OAAO,CAAC;MACZ,KAAK,CAAC;MACN,KAAK,CAAC;QACF,OAAO,EAAE;MACb;QACI,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IAC3D;EACJ;EACA,OAAOC,cAAcA,CAACC,CAAC,EAAE;IACrB,OAAO;MACHC,MAAM,EAAE;QACJC,sBAAsB,EAAEf,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC5CI,uBAAuB,EAAEjB,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC7CK,SAAS,EAAElB,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC;MAClC,CAAC;MACDM,MAAM,EAAE;QACJC,iBAAiB,EAAEpB,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvCQ,WAAW,EAAErB,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACjCS,UAAU,EAAEtB,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChCU,iBAAiB,EAAEvB,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvCW,qBAAqB,EAAExB,IAAI,CAACgB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC;MAC9C;IACJ,CAAC;EACL;EACA,OAAOY,aAAaA,CAACC,UAAU,EAAEC,WAAW,EAAEjB,QAAQ,EAAEkB,aAAa,EAAEC,gBAAgB,EAAE;IACrF,MAAMC,WAAW,GAAG,IAAI7B,aAAa,CAAC8B,WAAW,CAACrB,QAAQ,EAAEmB,gBAAgB,CAAC;IAC7E,QAAQnB,QAAQ;MACZ,KAAK,CAAC;QACF,OAAOoB,WAAW,CAACE,QAAQ,CAACN,UAAU,EAAEC,WAAW,CAACM,EAAE,EAAEL,aAAa,CAAC;MAC1E,KAAK,CAAC;MACN,KAAK,CAAC;QACF,IAAID,WAAW,CAACO,KAAK,CAACf,MAAM,CAACI,iBAAiB,EAAE;UAC5CG,UAAU,GAAG7B,WAAW,CAACM,iBAAiB,CAACuB,UAAU,CAAC;QAC1D;QACA,IAAIC,WAAW,CAACO,KAAK,CAACf,MAAM,CAACK,qBAAqB,EAAE;UAChDE,UAAU,GAAGA,UAAU,CAAClB,KAAK,CAAC,CAAC,EAAEkB,UAAU,CAACnB,MAAM,CAAC;QACvD;QACA,OAAOuB,WAAW,CAACE,QAAQ,CAACN,UAAU,EAAEC,WAAW,CAACM,EAAE,EAAEL,aAAa,CAAC;MAC1E;QACI,MAAM,IAAIjB,KAAK,CAAC,uBAAuB,GAAGD,QAAQ,CAAC;IAC3D;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOyB,sBAAsBA,CAACC,GAAG,EAAEC,WAAW,EAAE;IAC5C,OAAOD,GAAG,IAAIC,WAAW,GAAG,GAAG,GAAGA,WAAW,GAAG,EAAE,CAAC;EACvD;EACA,MAAMC,KAAKA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACtC,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,OAAO,GAAGA,OAAO;IACtB,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACF,SAAS,CAACG,SAAS,CAACzC,YAAY,CAAC0C,WAAW,CAAC;IAC1E,IAAIF,SAAS,CAACG,cAAc,KAAK,KAAK,EAAE;MACpC,MAAM,IAAIlC,KAAK,CAAC,2DAA2D,CAAC;IAChF;IACA,IAAI,CAAC+B,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACI,UAAU,GAAI,QAAQ,GAAGJ,SAAS,CAACK,OAAO,CAACC,KAAM;IACtD,OAAON,SAAS,CAACR,KAAK,CAACe,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAACC,YAAY,CAACT,SAAS,CAACU,IAAI,CAAC;EAC5G;EACA,MAAMF,mBAAmBA,CAAA,EAAG;IACxB,MAAMG,cAAc,GAAG,MAAM,IAAI,CAACb,SAAS,CAACG,SAAS,CAACzC,YAAY,CAACoD,cAAc,CAAC;IAClF,MAAMC,aAAa,GAAGF,cAAc,CAACD,IAAI,GAAGlD,YAAY,CAACoD,cAAc,CAACE,GAAG;IAC3E,OAAOD,aAAa,GAAG,CAAC,GAAG,IAAI,CAACE,uBAAuB,CAACF,aAAa,EAAEF,cAAc,CAACD,IAAI,CAAC,GAAG,IAAI,CAACD,YAAY,CAAC,IAAI,CAACT,SAAS,CAACU,IAAI,GAAGC,cAAc,CAACD,IAAI,CAAC;EAC9J;EACA,MAAMK,uBAAuBA,CAACF,aAAa,EAAEG,kBAAkB,EAAE;IAC7D,MAAM,IAAI,CAAClB,SAAS,CAACmB,MAAM,CAACJ,aAAa,CAAC;IAC1C,OAAO,IAAI,CAACJ,YAAY,CAAC,IAAI,CAACT,SAAS,CAACU,IAAI,GAAGM,kBAAkB,CAAC;EACtE;EACA,MAAMP,YAAYA,CAACS,OAAO,EAAE;IACxB,MAAMlC,UAAU,GAAG,MAAM,IAAI,CAACc,SAAS,CAACG,SAAS,CAAC,IAAI7C,KAAK,CAAC+D,cAAc,CAACD,OAAO,CAAC,CAAC;IACpF,KAAK,MAAMxB,GAAG,IAAI,IAAI,CAAC0B,aAAa,CAACpC,UAAU,CAAC,EAAE;MAC9C,IAAIU,GAAG,CAACH,EAAE,KAAK,MAAM,EAAE;QACnB,IAAIG,GAAG,CAACxC,KAAK,EAAE;UACX,KAAK,MAAMmE,IAAI,IAAI3B,GAAG,CAACxC,KAAK,CAACmE,IAAI,EAAE;YAC/B,IAAI,CAACC,MAAM,CAACnE,WAAW,CAACsC,sBAAsB,CAACC,GAAG,CAACH,EAAE,EAAEG,GAAG,CAACxC,KAAK,CAACyC,WAAW,CAAC,EAAE0B,IAAI,CAAC;UACxF;QACJ;MACJ,CAAC,MACI,IAAI3B,GAAG,CAACH,EAAE,KAAK,KAAK,EAAE;QACvB,KAAK,MAAMrC,KAAK,IAAIwC,GAAG,CAACxC,KAAK,EAAE;UAC3B,IAAI,CAACoE,MAAM,CAACnE,WAAW,CAACsC,sBAAsB,CAACC,GAAG,CAACH,EAAE,EAAErC,KAAK,CAACyC,WAAW,CAAC,EAAEzC,KAAK,CAACmE,IAAI,CAAC;QAC1F;MACJ,CAAC,MACI,IAAI3B,GAAG,CAACH,EAAE,KAAK,MAAM,EAAE;QACxB,KAAK,MAAMrC,KAAK,IAAIwC,GAAG,CAACxC,KAAK,EAAE;UAC3B,IAAI,CAACoE,MAAM,CAACnE,WAAW,CAACsC,sBAAsB,CAACC,GAAG,CAACH,EAAE,EAAErC,KAAK,CAACyC,WAAW,CAAC,EAAEzC,KAAK,CAAC;QACrF;MACJ,CAAC,MACI,IAAIqE,KAAK,CAACC,OAAO,CAAC9B,GAAG,CAACxC,KAAK,CAAC,EAAE;QAC/B,KAAK,MAAMA,KAAK,IAAIwC,GAAG,CAACxC,KAAK,EAAE;UAC3B,IAAI,CAACoE,MAAM,CAAC5B,GAAG,CAACH,EAAE,EAAErC,KAAK,CAAC;QAC9B;MACJ,CAAC,MACI;QACD,IAAI,CAACoE,MAAM,CAAC5B,GAAG,CAACH,EAAE,EAAEG,GAAG,CAACxC,KAAK,CAAC;MAClC;IACJ;EACJ;EACAoE,MAAMA,CAAC/B,EAAE,EAAErC,KAAK,EAAE;IACd,IAAI,CAAC2C,QAAQ,CAACyB,MAAM,CAAC,IAAI,CAAClB,UAAU,EAAEb,EAAE,EAAErC,KAAK,CAAC;EACpD;EACAkE,aAAaA,CAACK,IAAI,EAAE;IAChB,IAAIC,MAAM,GAAG,CAAC;IACd,MAAMC,IAAI,GAAG,EAAE;IACf,OAAO,IAAI,EAAE;MACT,IAAID,MAAM,KAAKD,IAAI,CAAC5D,MAAM,EACtB;MACJ,MAAM+D,iBAAiB,GAAGzE,WAAW,CAACY,oBAAoB,CAAC,IAAI,CAACiC,SAAS,CAACK,OAAO,CAACC,KAAK,CAAC;MACxF,IAAIoB,MAAM,GAAGE,iBAAiB,GAAGH,IAAI,CAAC5D,MAAM,EAAE;QAC1C,IAAI,CAACgC,QAAQ,CAACgC,UAAU,CAAC,0BAA0B,CAAC;QACpD;MACJ;MACA,MAAMC,gBAAgB,GAAGL,IAAI,CAAC3D,KAAK,CAAC4D,MAAM,EAAEA,MAAM,IAAIE,iBAAiB,CAAC;MACxE,MAAM3C,WAAW,GAAG,IAAI,CAAC8C,eAAe,CAACD,gBAAgB,EAAE,IAAI,CAAC9B,SAAS,CAACK,OAAO,CAACC,KAAK,CAAC;MACxF,MAAM0B,cAAc,GAAGP,IAAI,CAAC3D,KAAK,CAAC4D,MAAM,EAAEA,MAAM,IAAIzC,WAAW,CAACpB,MAAM,CAAC;MACvE,MAAMoE,MAAM,GAAG9E,WAAW,CAAC4B,aAAa,CAACiD,cAAc,EAAE/C,WAAW,EAAE,IAAI,CAACe,SAAS,CAACK,OAAO,CAACC,KAAK,EAAE,CAAC,IAAI,CAACP,OAAO,CAACmC,UAAU,EAAE,IAAI,CAACrC,QAAQ,CAAC;MAC5I,IAAIoC,MAAM,EAAE;QACRN,IAAI,CAACQ,IAAI,CAAC;UAAE5C,EAAE,EAAEN,WAAW,CAACM,EAAE;UAAErC,KAAK,EAAE+E;QAAO,CAAC,CAAC;MACpD;IACJ;IACA,OAAON,IAAI;EACf;EACAI,eAAeA,CAAC/C,UAAU,EAAEhB,QAAQ,EAAE;IAClC,IAAIoE,MAAM;IACV,QAAQpE,QAAQ;MACZ,KAAK,CAAC;QACFoE,MAAM,GAAG;UACL7C,EAAE,EAAE8C,MAAM,CAACC,IAAI,CAACtD,UAAU,CAAClB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACyE,QAAQ,CAAC,OAAO,CAAC;UACzD1E,MAAM,EAAET,KAAK,CAACoF,SAAS,CAACC,GAAG,CAACzD,UAAU,EAAE,CAAC;QAC7C,CAAC;QACD,IAAI,CAACoD,MAAM,CAAC7C,EAAE,CAACmD,KAAK,CAAC,cAAc,CAAC,EAAE;UAClC,IAAI,CAAC7C,QAAQ,CAACgC,UAAU,CAAC,iBAAiB,IAAI,CAAC7B,SAAS,CAACK,OAAO,CAACC,KAAK,qBAAqB8B,MAAM,CAAC7C,EAAE,EAAE,CAAC;QAC3G;QACA;MACJ,KAAK,CAAC;MACN,KAAK,CAAC;QACF6C,MAAM,GAAG;UACL7C,EAAE,EAAE8C,MAAM,CAACC,IAAI,CAACtD,UAAU,CAAClB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACyE,QAAQ,CAAC,OAAO,CAAC;UACzD1E,MAAM,EAAE,CAACG,QAAQ,KAAK,CAAC,GAAGR,YAAY,CAACmF,cAAc,GAAGvF,KAAK,CAACwF,SAAS,EAAEH,GAAG,CAACzD,UAAU,EAAE,CAAC,CAAC;UAC3FQ,KAAK,EAAErC,WAAW,CAACe,cAAc,CAACc,UAAU,CAAClB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QAC7D,CAAC;QACD,IAAI,CAACsE,MAAM,CAAC7C,EAAE,CAACmD,KAAK,CAAC,cAAc,CAAC,EAAE;UAClC,IAAI,CAAC7C,QAAQ,CAACgC,UAAU,CAAC,iBAAiB,IAAI,CAAC7B,SAAS,CAACK,OAAO,CAACC,KAAK,qBAAqB8B,MAAM,CAAC7C,EAAE,EAAE,CAAC;QAC3G;QACA;MACJ;QACI,MAAM,IAAItB,KAAK,CAAC,uBAAuB,GAAGD,QAAQ,CAAC;IAC3D;IACA,OAAOoE,MAAM;EACjB;AACJ;AACAnF,OAAO,CAACE,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}