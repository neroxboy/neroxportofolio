{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RandomFileReader = void 0;\nconst fs = require(\"fs\");\n/**\n * Provides abstract file access via the IRandomRead interface\n */\nclass RandomFileReader {\n  constructor(fileHandle, filePath, fileSize) {\n    this.fileHandle = fileHandle;\n    this.filePath = filePath;\n    this.fileSize = fileSize;\n  }\n  /**\n   * Read from a given position of an abstracted file or buffer.\n   * @param buffer {Buffer} is the buffer that the data will be written to.\n   * @param offset {number} is the offset in the buffer to start writing at.\n   * @param length {number}is an integer specifying the number of bytes to read.\n   * @param position {number} is an argument specifying where to begin reading from in the file.\n   * @return {Promise<number>} bytes read\n   */\n  async randomRead(buffer, offset, length, position) {\n    const result = await this.fileHandle.read(buffer, offset, length, position);\n    return result.bytesRead;\n  }\n  async close() {\n    return this.fileHandle.close();\n  }\n  static async init(filePath, fileSize) {\n    const fileHandle = await fs.promises.open(filePath, 'r');\n    return new RandomFileReader(fileHandle, filePath, fileSize);\n  }\n}\nexports.RandomFileReader = RandomFileReader;","map":{"version":3,"names":["Object","defineProperty","exports","value","RandomFileReader","fs","require","constructor","fileHandle","filePath","fileSize","randomRead","buffer","offset","length","position","result","read","bytesRead","close","init","promises","open"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/common/RandomFileReader.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RandomFileReader = void 0;\nconst fs = require(\"fs\");\n/**\n * Provides abstract file access via the IRandomRead interface\n */\nclass RandomFileReader {\n    constructor(fileHandle, filePath, fileSize) {\n        this.fileHandle = fileHandle;\n        this.filePath = filePath;\n        this.fileSize = fileSize;\n    }\n    /**\n     * Read from a given position of an abstracted file or buffer.\n     * @param buffer {Buffer} is the buffer that the data will be written to.\n     * @param offset {number} is the offset in the buffer to start writing at.\n     * @param length {number}is an integer specifying the number of bytes to read.\n     * @param position {number} is an argument specifying where to begin reading from in the file.\n     * @return {Promise<number>} bytes read\n     */\n    async randomRead(buffer, offset, length, position) {\n        const result = await this.fileHandle.read(buffer, offset, length, position);\n        return result.bytesRead;\n    }\n    async close() {\n        return this.fileHandle.close();\n    }\n    static async init(filePath, fileSize) {\n        const fileHandle = await fs.promises.open(filePath, 'r');\n        return new RandomFileReader(fileHandle, filePath, fileSize);\n    }\n}\nexports.RandomFileReader = RandomFileReader;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB;AACA;AACA;AACA,MAAMF,gBAAgB,CAAC;EACnBG,WAAWA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACxC,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,UAAUA,CAACC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAE;IAC/C,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACR,UAAU,CAACS,IAAI,CAACL,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,CAAC;IAC3E,OAAOC,MAAM,CAACE,SAAS;EAC3B;EACA,MAAMC,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACX,UAAU,CAACW,KAAK,CAAC,CAAC;EAClC;EACA,aAAaC,IAAIA,CAACX,QAAQ,EAAEC,QAAQ,EAAE;IAClC,MAAMF,UAAU,GAAG,MAAMH,EAAE,CAACgB,QAAQ,CAACC,IAAI,CAACb,QAAQ,EAAE,GAAG,CAAC;IACxD,OAAO,IAAIL,gBAAgB,CAACI,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;EAC/D;AACJ;AACAR,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}