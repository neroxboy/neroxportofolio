{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsfUtil = void 0;\nconst Token = require(\"token-types\");\nconst util = require(\"../common/Util\");\nclass AsfUtil {\n  static getParserForAttr(i) {\n    return AsfUtil.attributeParsers[i];\n  }\n  static parseUnicodeAttr(uint8Array) {\n    return util.stripNulls(util.decodeString(uint8Array, 'utf16le'));\n  }\n  static parseByteArrayAttr(buf) {\n    return Buffer.from(buf);\n  }\n  static parseBoolAttr(buf, offset = 0) {\n    return AsfUtil.parseWordAttr(buf, offset) === 1;\n  }\n  static parseDWordAttr(buf, offset = 0) {\n    return buf.readUInt32LE(offset);\n  }\n  static parseQWordAttr(buf, offset = 0) {\n    return Token.UINT64_LE.get(buf, offset);\n  }\n  static parseWordAttr(buf, offset = 0) {\n    return buf.readUInt16LE(offset);\n  }\n}\nAsfUtil.attributeParsers = [AsfUtil.parseUnicodeAttr, AsfUtil.parseByteArrayAttr, AsfUtil.parseBoolAttr, AsfUtil.parseDWordAttr, AsfUtil.parseQWordAttr, AsfUtil.parseWordAttr, AsfUtil.parseByteArrayAttr];\nexports.AsfUtil = AsfUtil;","map":{"version":3,"names":["Object","defineProperty","exports","value","AsfUtil","Token","require","util","getParserForAttr","i","attributeParsers","parseUnicodeAttr","uint8Array","stripNulls","decodeString","parseByteArrayAttr","buf","Buffer","from","parseBoolAttr","offset","parseWordAttr","parseDWordAttr","readUInt32LE","parseQWordAttr","UINT64_LE","get","readUInt16LE"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/asf/AsfUtil.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AsfUtil = void 0;\nconst Token = require(\"token-types\");\nconst util = require(\"../common/Util\");\nclass AsfUtil {\n    static getParserForAttr(i) {\n        return AsfUtil.attributeParsers[i];\n    }\n    static parseUnicodeAttr(uint8Array) {\n        return util.stripNulls(util.decodeString(uint8Array, 'utf16le'));\n    }\n    static parseByteArrayAttr(buf) {\n        return Buffer.from(buf);\n    }\n    static parseBoolAttr(buf, offset = 0) {\n        return AsfUtil.parseWordAttr(buf, offset) === 1;\n    }\n    static parseDWordAttr(buf, offset = 0) {\n        return buf.readUInt32LE(offset);\n    }\n    static parseQWordAttr(buf, offset = 0) {\n        return Token.UINT64_LE.get(buf, offset);\n    }\n    static parseWordAttr(buf, offset = 0) {\n        return buf.readUInt16LE(offset);\n    }\n}\nAsfUtil.attributeParsers = [\n    AsfUtil.parseUnicodeAttr,\n    AsfUtil.parseByteArrayAttr,\n    AsfUtil.parseBoolAttr,\n    AsfUtil.parseDWordAttr,\n    AsfUtil.parseQWordAttr,\n    AsfUtil.parseWordAttr,\n    AsfUtil.parseByteArrayAttr\n];\nexports.AsfUtil = AsfUtil;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAMF,OAAO,CAAC;EACV,OAAOI,gBAAgBA,CAACC,CAAC,EAAE;IACvB,OAAOL,OAAO,CAACM,gBAAgB,CAACD,CAAC,CAAC;EACtC;EACA,OAAOE,gBAAgBA,CAACC,UAAU,EAAE;IAChC,OAAOL,IAAI,CAACM,UAAU,CAACN,IAAI,CAACO,YAAY,CAACF,UAAU,EAAE,SAAS,CAAC,CAAC;EACpE;EACA,OAAOG,kBAAkBA,CAACC,GAAG,EAAE;IAC3B,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC;EAC3B;EACA,OAAOG,aAAaA,CAACH,GAAG,EAAEI,MAAM,GAAG,CAAC,EAAE;IAClC,OAAOhB,OAAO,CAACiB,aAAa,CAACL,GAAG,EAAEI,MAAM,CAAC,KAAK,CAAC;EACnD;EACA,OAAOE,cAAcA,CAACN,GAAG,EAAEI,MAAM,GAAG,CAAC,EAAE;IACnC,OAAOJ,GAAG,CAACO,YAAY,CAACH,MAAM,CAAC;EACnC;EACA,OAAOI,cAAcA,CAACR,GAAG,EAAEI,MAAM,GAAG,CAAC,EAAE;IACnC,OAAOf,KAAK,CAACoB,SAAS,CAACC,GAAG,CAACV,GAAG,EAAEI,MAAM,CAAC;EAC3C;EACA,OAAOC,aAAaA,CAACL,GAAG,EAAEI,MAAM,GAAG,CAAC,EAAE;IAClC,OAAOJ,GAAG,CAACW,YAAY,CAACP,MAAM,CAAC;EACnC;AACJ;AACAhB,OAAO,CAACM,gBAAgB,GAAG,CACvBN,OAAO,CAACO,gBAAgB,EACxBP,OAAO,CAACW,kBAAkB,EAC1BX,OAAO,CAACe,aAAa,EACrBf,OAAO,CAACkB,cAAc,EACtBlB,OAAO,CAACoB,cAAc,EACtBpB,OAAO,CAACiB,aAAa,EACrBjB,OAAO,CAACW,kBAAkB,CAC7B;AACDb,OAAO,CAACE,OAAO,GAAGA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}