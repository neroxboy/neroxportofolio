{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RandomUint8ArrayReader = void 0;\n/**\n * Provides abstract Uint8Array access via the IRandomRead interface\n */\nclass RandomUint8ArrayReader {\n  constructor(uint8Array) {\n    this.uint8Array = uint8Array;\n    this.fileSize = uint8Array.length;\n  }\n  /**\n   * Read from a given position of an abstracted file or buffer.\n   * @param uint8Array - Uint8Array that the data will be written to.\n   * @param offset - Offset in the buffer to start writing at.\n   * @param length - Integer specifying the number of bytes to read.\n   * @param position - Specifies where to begin reading from in the file.\n   * @return Promise providing bytes read\n   */\n  async randomRead(uint8Array, offset, length, position) {\n    uint8Array.set(this.uint8Array.subarray(position, position + length), offset);\n    return length;\n  }\n}\nexports.RandomUint8ArrayReader = RandomUint8ArrayReader;","map":{"version":3,"names":["Object","defineProperty","exports","value","RandomUint8ArrayReader","constructor","uint8Array","fileSize","length","randomRead","offset","position","set","subarray"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RandomUint8ArrayReader = void 0;\n/**\n * Provides abstract Uint8Array access via the IRandomRead interface\n */\nclass RandomUint8ArrayReader {\n    constructor(uint8Array) {\n        this.uint8Array = uint8Array;\n        this.fileSize = uint8Array.length;\n    }\n    /**\n     * Read from a given position of an abstracted file or buffer.\n     * @param uint8Array - Uint8Array that the data will be written to.\n     * @param offset - Offset in the buffer to start writing at.\n     * @param length - Integer specifying the number of bytes to read.\n     * @param position - Specifies where to begin reading from in the file.\n     * @return Promise providing bytes read\n     */\n    async randomRead(uint8Array, offset, length, position) {\n        uint8Array.set(this.uint8Array.subarray(position, position + length), offset);\n        return length;\n    }\n}\nexports.RandomUint8ArrayReader = RandomUint8ArrayReader;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAG,KAAK,CAAC;AACvC;AACA;AACA;AACA,MAAMA,sBAAsB,CAAC;EACzBC,WAAWA,CAACC,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGD,UAAU,CAACE,MAAM;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,UAAUA,CAACH,UAAU,EAAEI,MAAM,EAAEF,MAAM,EAAEG,QAAQ,EAAE;IACnDL,UAAU,CAACM,GAAG,CAAC,IAAI,CAACN,UAAU,CAACO,QAAQ,CAACF,QAAQ,EAAEA,QAAQ,GAAGH,MAAM,CAAC,EAAEE,MAAM,CAAC;IAC7E,OAAOF,MAAM;EACjB;AACJ;AACAN,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}