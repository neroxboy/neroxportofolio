{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { getHeader, setHeader, checkCodecUpdate, reset, enable } from \"../constants.js\";\nexport default class HeaderCache {\n  constructor(onCodecHeader, onCodecUpdate) {\n    this._onCodecHeader = onCodecHeader;\n    this._onCodecUpdate = onCodecUpdate;\n    this[reset]();\n  }\n  [enable]() {\n    this._isEnabled = true;\n  }\n  [reset]() {\n    this._headerCache = new Map();\n    this._codecUpdateData = new WeakMap();\n    this._codecHeaderSent = false;\n    this._codecShouldUpdate = false;\n    this._bitrate = null;\n    this._isEnabled = false;\n  }\n  [checkCodecUpdate](bitrate, totalDuration) {\n    if (this._onCodecUpdate) {\n      if (this._bitrate !== bitrate) {\n        this._bitrate = bitrate;\n        this._codecShouldUpdate = true;\n      }\n\n      // only update if codec data is available\n      const codecData = this._codecUpdateData.get(this._headerCache.get(this._currentHeader));\n      if (this._codecShouldUpdate && codecData) {\n        this._onCodecUpdate({\n          bitrate,\n          ...codecData\n        }, totalDuration);\n      }\n      this._codecShouldUpdate = false;\n    }\n  }\n  [getHeader](key) {\n    const header = this._headerCache.get(key);\n    if (header) {\n      this._updateCurrentHeader(key);\n    }\n    return header;\n  }\n  [setHeader](key, header, codecUpdateFields) {\n    if (this._isEnabled) {\n      if (!this._codecHeaderSent) {\n        this._onCodecHeader({\n          ...header\n        });\n        this._codecHeaderSent = true;\n      }\n      this._updateCurrentHeader(key);\n      this._headerCache.set(key, header);\n      this._codecUpdateData.set(header, codecUpdateFields);\n    }\n  }\n  _updateCurrentHeader(key) {\n    if (this._onCodecUpdate && key !== this._currentHeader) {\n      this._codecShouldUpdate = true;\n      this._currentHeader = key;\n    }\n  }\n}","map":{"version":3,"names":["getHeader","setHeader","checkCodecUpdate","reset","enable","HeaderCache","constructor","onCodecHeader","onCodecUpdate","_onCodecHeader","_onCodecUpdate","_isEnabled","_headerCache","Map","_codecUpdateData","WeakMap","_codecHeaderSent","_codecShouldUpdate","_bitrate","bitrate","totalDuration","codecData","get","_currentHeader","key","header","_updateCurrentHeader","codecUpdateFields","set"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/codecs/HeaderCache.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport {\n  getHeader,\n  setHeader,\n  checkCodecUpdate,\n  reset,\n  enable,\n} from \"../constants.js\";\n\nexport default class HeaderCache {\n  constructor(onCodecHeader, onCodecUpdate) {\n    this._onCodecHeader = onCodecHeader;\n    this._onCodecUpdate = onCodecUpdate;\n    this[reset]();\n  }\n\n  [enable]() {\n    this._isEnabled = true;\n  }\n\n  [reset]() {\n    this._headerCache = new Map();\n    this._codecUpdateData = new WeakMap();\n    this._codecHeaderSent = false;\n    this._codecShouldUpdate = false;\n    this._bitrate = null;\n    this._isEnabled = false;\n  }\n\n  [checkCodecUpdate](bitrate, totalDuration) {\n    if (this._onCodecUpdate) {\n      if (this._bitrate !== bitrate) {\n        this._bitrate = bitrate;\n        this._codecShouldUpdate = true;\n      }\n\n      // only update if codec data is available\n      const codecData = this._codecUpdateData.get(\n        this._headerCache.get(this._currentHeader),\n      );\n\n      if (this._codecShouldUpdate && codecData) {\n        this._onCodecUpdate(\n          {\n            bitrate,\n            ...codecData,\n          },\n          totalDuration,\n        );\n      }\n\n      this._codecShouldUpdate = false;\n    }\n  }\n\n  [getHeader](key) {\n    const header = this._headerCache.get(key);\n\n    if (header) {\n      this._updateCurrentHeader(key);\n    }\n\n    return header;\n  }\n\n  [setHeader](key, header, codecUpdateFields) {\n    if (this._isEnabled) {\n      if (!this._codecHeaderSent) {\n        this._onCodecHeader({ ...header });\n        this._codecHeaderSent = true;\n      }\n      this._updateCurrentHeader(key);\n\n      this._headerCache.set(key, header);\n      this._codecUpdateData.set(header, codecUpdateFields);\n    }\n  }\n\n  _updateCurrentHeader(key) {\n    if (this._onCodecUpdate && key !== this._currentHeader) {\n      this._codecShouldUpdate = true;\n      this._currentHeader = key;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACEA,SAAS,EACTC,SAAS,EACTC,gBAAgB,EAChBC,KAAK,EACLC,MAAM,QACD,iBAAiB;AAExB,eAAe,MAAMC,WAAW,CAAC;EAC/BC,WAAWA,CAACC,aAAa,EAAEC,aAAa,EAAE;IACxC,IAAI,CAACC,cAAc,GAAGF,aAAa;IACnC,IAAI,CAACG,cAAc,GAAGF,aAAa;IACnC,IAAI,CAACL,KAAK,CAAC,CAAC,CAAC;EACf;EAEA,CAACC,MAAM,IAAI;IACT,IAAI,CAACO,UAAU,GAAG,IAAI;EACxB;EAEA,CAACR,KAAK,IAAI;IACR,IAAI,CAACS,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC7B,IAAI,CAACC,gBAAgB,GAAG,IAAIC,OAAO,CAAC,CAAC;IACrC,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,kBAAkB,GAAG,KAAK;IAC/B,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACP,UAAU,GAAG,KAAK;EACzB;EAEA,CAACT,gBAAgB,EAAEiB,OAAO,EAAEC,aAAa,EAAE;IACzC,IAAI,IAAI,CAACV,cAAc,EAAE;MACvB,IAAI,IAAI,CAACQ,QAAQ,KAAKC,OAAO,EAAE;QAC7B,IAAI,CAACD,QAAQ,GAAGC,OAAO;QACvB,IAAI,CAACF,kBAAkB,GAAG,IAAI;MAChC;;MAEA;MACA,MAAMI,SAAS,GAAG,IAAI,CAACP,gBAAgB,CAACQ,GAAG,CACzC,IAAI,CAACV,YAAY,CAACU,GAAG,CAAC,IAAI,CAACC,cAAc,CAC3C,CAAC;MAED,IAAI,IAAI,CAACN,kBAAkB,IAAII,SAAS,EAAE;QACxC,IAAI,CAACX,cAAc,CACjB;UACES,OAAO;UACP,GAAGE;QACL,CAAC,EACDD,aACF,CAAC;MACH;MAEA,IAAI,CAACH,kBAAkB,GAAG,KAAK;IACjC;EACF;EAEA,CAACjB,SAAS,EAAEwB,GAAG,EAAE;IACf,MAAMC,MAAM,GAAG,IAAI,CAACb,YAAY,CAACU,GAAG,CAACE,GAAG,CAAC;IAEzC,IAAIC,MAAM,EAAE;MACV,IAAI,CAACC,oBAAoB,CAACF,GAAG,CAAC;IAChC;IAEA,OAAOC,MAAM;EACf;EAEA,CAACxB,SAAS,EAAEuB,GAAG,EAAEC,MAAM,EAAEE,iBAAiB,EAAE;IAC1C,IAAI,IAAI,CAAChB,UAAU,EAAE;MACnB,IAAI,CAAC,IAAI,CAACK,gBAAgB,EAAE;QAC1B,IAAI,CAACP,cAAc,CAAC;UAAE,GAAGgB;QAAO,CAAC,CAAC;QAClC,IAAI,CAACT,gBAAgB,GAAG,IAAI;MAC9B;MACA,IAAI,CAACU,oBAAoB,CAACF,GAAG,CAAC;MAE9B,IAAI,CAACZ,YAAY,CAACgB,GAAG,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAClC,IAAI,CAACX,gBAAgB,CAACc,GAAG,CAACH,MAAM,EAAEE,iBAAiB,CAAC;IACtD;EACF;EAEAD,oBAAoBA,CAACF,GAAG,EAAE;IACxB,IAAI,IAAI,CAACd,cAAc,IAAIc,GAAG,KAAK,IAAI,CAACD,cAAc,EAAE;MACtD,IAAI,CAACN,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACM,cAAc,GAAGC,GAAG;IAC3B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}