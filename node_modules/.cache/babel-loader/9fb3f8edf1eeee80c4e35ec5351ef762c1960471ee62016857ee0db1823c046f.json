{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsfParser = void 0;\nconst debug_1 = require(\"debug\");\nconst type_1 = require(\"../type\");\nconst GUID_1 = require(\"./GUID\");\nconst AsfObject = require(\"./AsfObject\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ASF');\nconst headerType = 'asf';\n/**\n * Windows Media Metadata Usage Guidelines\n * - Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\n *\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01\n * - https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n */\nclass AsfParser extends BasicParser_1.BasicParser {\n  async parse() {\n    const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n    if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\n      throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n    }\n    try {\n      await this.parseObjectHeader(header.numberOfHeaderObjects);\n    } catch (err) {\n      debug('Error while parsing ASF: %s', err);\n    }\n  }\n  async parseObjectHeader(numberOfObjectHeaders) {\n    let tags;\n    do {\n      // Parse common header of the ASF Object (3.1)\n      const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n      // Parse data part of the ASF Object\n      debug('header GUID=%s', header.objectId.str);\n      switch (header.objectId.str) {\n        case AsfObject.FilePropertiesObject.guid.str:\n          // 3.2\n          const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n          this.metadata.setFormat('duration', Number(fpo.playDuration / BigInt(1000)) / 10000 - Number(fpo.preroll) / 1000);\n          this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n          break;\n        case AsfObject.StreamPropertiesObject.guid.str:\n          // 3.3\n          const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n          this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n          break;\n        case AsfObject.HeaderExtensionObject.guid.str:\n          // 3.4\n          const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n          await this.parseExtensionObject(extHeader.extensionDataSize);\n          break;\n        case AsfObject.ContentDescriptionObjectState.guid.str:\n          // 3.10\n          tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n          this.addTags(tags);\n          break;\n        case AsfObject.ExtendedContentDescriptionObjectState.guid.str:\n          // 3.11\n          tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n          this.addTags(tags);\n          break;\n        case GUID_1.default.CodecListObject.str:\n          const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n          codecs.forEach(codec => {\n            this.metadata.addStreamInfo({\n              type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n              codecName: codec.codecName\n            });\n          });\n          const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n          this.metadata.setFormat('codec', audioCodecs);\n          break;\n        case GUID_1.default.StreamBitratePropertiesObject.str:\n          // ToDo?\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n        case GUID_1.default.PaddingObject.str:\n          // ToDo: register bytes pad\n          debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n        default:\n          this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n          debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n          await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n      }\n    } while (--numberOfObjectHeaders);\n    // done\n  }\n  addTags(tags) {\n    tags.forEach(tag => {\n      this.metadata.addTag(headerType, tag.id, tag.value);\n    });\n  }\n  async parseExtensionObject(extensionSize) {\n    do {\n      // Parse common header of the ASF Object (3.1)\n      const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n      const remaining = header.objectSize - AsfObject.HeaderObjectToken.len;\n      // Parse data part of the ASF Object\n      switch (header.objectId.str) {\n        case AsfObject.ExtendedStreamPropertiesObjectState.guid.str:\n          // 4.1\n          // ToDo: extended stream header properties are ignored\n          await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n          break;\n        case AsfObject.MetadataObjectState.guid.str:\n          // 4.7\n          const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n          this.addTags(moTags);\n          break;\n        case AsfObject.MetadataLibraryObjectState.guid.str:\n          // 4.8\n          const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n          this.addTags(mlTags);\n          break;\n        case GUID_1.default.PaddingObject.str:\n          // ToDo: register bytes pad\n          await this.tokenizer.ignore(remaining);\n          break;\n        case GUID_1.default.CompatibilityObject.str:\n          this.tokenizer.ignore(remaining);\n          break;\n        case GUID_1.default.ASF_Index_Placeholder_Object.str:\n          await this.tokenizer.ignore(remaining);\n          break;\n        default:\n          this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n          // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n          await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n          break;\n      }\n      extensionSize -= header.objectSize;\n    } while (extensionSize > 0);\n  }\n}\nexports.AsfParser = AsfParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","AsfParser","debug_1","require","type_1","GUID_1","AsfObject","BasicParser_1","debug","default","headerType","BasicParser","parse","header","tokenizer","readToken","TopLevelHeaderObjectToken","objectId","equals","HeaderObject","Error","str","parseObjectHeader","numberOfHeaderObjects","err","numberOfObjectHeaders","tags","HeaderObjectToken","FilePropertiesObject","guid","fpo","metadata","setFormat","Number","playDuration","BigInt","preroll","maximumBitrate","StreamPropertiesObject","spo","streamType","HeaderExtensionObject","extHeader","parseExtensionObject","extensionDataSize","ContentDescriptionObjectState","addTags","ExtendedContentDescriptionObjectState","CodecListObject","codecs","readCodecEntries","forEach","codec","addStreamInfo","type","videoCodec","TrackType","video","audio","codecName","audioCodecs","filter","audioCodec","map","join","StreamBitratePropertiesObject","ignore","objectSize","len","PaddingObject","addWarning","IgnoreObjectState","tag","addTag","id","extensionSize","remaining","ExtendedStreamPropertiesObjectState","MetadataObjectState","moTags","MetadataLibraryObjectState","mlTags","CompatibilityObject","ASF_Index_Placeholder_Object"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/asf/AsfParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AsfParser = void 0;\nconst debug_1 = require(\"debug\");\nconst type_1 = require(\"../type\");\nconst GUID_1 = require(\"./GUID\");\nconst AsfObject = require(\"./AsfObject\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ASF');\nconst headerType = 'asf';\n/**\n * Windows Media Metadata Usage Guidelines\n * - Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\n *\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01\n * - https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n */\nclass AsfParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\n            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n        }\n        try {\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\n        }\n        catch (err) {\n            debug('Error while parsing ASF: %s', err);\n        }\n    }\n    async parseObjectHeader(numberOfObjectHeaders) {\n        let tags;\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            // Parse data part of the ASF Object\n            debug('header GUID=%s', header.objectId.str);\n            switch (header.objectId.str) {\n                case AsfObject.FilePropertiesObject.guid.str: // 3.2\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n                    this.metadata.setFormat('duration', Number(fpo.playDuration / BigInt(1000)) / 10000 - Number(fpo.preroll) / 1000);\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n                    break;\n                case AsfObject.StreamPropertiesObject.guid.str: // 3.3\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n                    break;\n                case AsfObject.HeaderExtensionObject.guid.str: // 3.4\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\n                    break;\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case GUID_1.default.CodecListObject.str:\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n                    codecs.forEach(codec => {\n                        this.metadata.addStreamInfo({\n                            type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n                            codecName: codec.codecName\n                        });\n                    });\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n                    this.metadata.setFormat('codec', audioCodecs);\n                    break;\n                case GUID_1.default.StreamBitratePropertiesObject.str:\n                    // ToDo?\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n            }\n        } while (--numberOfObjectHeaders);\n        // done\n    }\n    addTags(tags) {\n        tags.forEach(tag => {\n            this.metadata.addTag(headerType, tag.id, tag.value);\n        });\n    }\n    async parseExtensionObject(extensionSize) {\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            const remaining = header.objectSize - AsfObject.HeaderObjectToken.len;\n            // Parse data part of the ASF Object\n            switch (header.objectId.str) {\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\n                    // ToDo: extended stream header properties are ignored\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n                    break;\n                case AsfObject.MetadataObjectState.guid.str: // 4.7\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n                    this.addTags(moTags);\n                    break;\n                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n                    this.addTags(mlTags);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                case GUID_1.default.CompatibilityObject.str:\n                    this.tokenizer.ignore(remaining);\n                    break;\n                case GUID_1.default.ASF_Index_Placeholder_Object.str:\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n                    break;\n            }\n            extensionSize -= header.objectSize;\n        } while (extensionSize > 0);\n    }\n}\nexports.AsfParser = AsfParser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}