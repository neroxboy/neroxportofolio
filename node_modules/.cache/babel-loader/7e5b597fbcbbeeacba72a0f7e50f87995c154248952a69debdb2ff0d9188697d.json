{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore } from \"../../globals.js\";\nimport { codecFrames, data, pageSequenceNumber, codec, segments, logError, parseOggPage, enable, getHeaderFromUint8Array } from \"../../constants.js\";\nimport Parser from \"../Parser.js\";\nimport OpusFrame from \"./OpusFrame.js\";\nimport OpusHeader from \"./OpusHeader.js\";\nexport default class OpusParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this.Frame = OpusFrame;\n    this.Header = OpusHeader;\n    onCodec(this[codec]);\n    this._identificationHeader = null;\n  }\n  get [codec]() {\n    return \"opus\";\n  }\n\n  /**\n   * @todo implement continued page support\n   */\n  [parseOggPage](oggPage) {\n    if (oggPage[pageSequenceNumber] === 0) {\n      // Identification header\n\n      this._headerCache[enable]();\n      this._identificationHeader = oggPage[data];\n    } else if (oggPage[pageSequenceNumber] === 1) {\n      // OpusTags\n    } else {\n      oggPage[codecFrames] = frameStore.get(oggPage)[segments].map(segment => {\n        const header = OpusHeader[getHeaderFromUint8Array](this._identificationHeader, segment, this._headerCache);\n        if (header) return new OpusFrame(segment, header);\n        this._codecParser[logError](\"Failed to parse Ogg Opus Header\", \"Not a valid Ogg Opus file\");\n      });\n    }\n    return oggPage;\n  }\n}","map":{"version":3,"names":["frameStore","codecFrames","data","pageSequenceNumber","codec","segments","logError","parseOggPage","enable","getHeaderFromUint8Array","Parser","OpusFrame","OpusHeader","OpusParser","constructor","codecParser","headerCache","onCodec","Frame","Header","_identificationHeader","oggPage","_headerCache","get","map","segment","header","_codecParser"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/codecs/opus/OpusParser.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore } from \"../../globals.js\";\nimport {\n  codecFrames,\n  data,\n  pageSequenceNumber,\n  codec,\n  segments,\n  logError,\n  parseOggPage,\n  enable,\n  getHeaderFromUint8Array,\n} from \"../../constants.js\";\nimport Parser from \"../Parser.js\";\nimport OpusFrame from \"./OpusFrame.js\";\nimport OpusHeader from \"./OpusHeader.js\";\n\nexport default class OpusParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this.Frame = OpusFrame;\n    this.Header = OpusHeader;\n\n    onCodec(this[codec]);\n    this._identificationHeader = null;\n  }\n\n  get [codec]() {\n    return \"opus\";\n  }\n\n  /**\n   * @todo implement continued page support\n   */\n  [parseOggPage](oggPage) {\n    if (oggPage[pageSequenceNumber] === 0) {\n      // Identification header\n\n      this._headerCache[enable]();\n      this._identificationHeader = oggPage[data];\n    } else if (oggPage[pageSequenceNumber] === 1) {\n      // OpusTags\n    } else {\n      oggPage[codecFrames] = frameStore\n        .get(oggPage)\n        [segments].map((segment) => {\n          const header = OpusHeader[getHeaderFromUint8Array](\n            this._identificationHeader,\n            segment,\n            this._headerCache,\n          );\n\n          if (header) return new OpusFrame(segment, header);\n\n          this._codecParser[logError](\n            \"Failed to parse Ogg Opus Header\",\n            \"Not a valid Ogg Opus file\",\n          );\n        });\n    }\n\n    return oggPage;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SACEC,WAAW,EACXC,IAAI,EACJC,kBAAkB,EAClBC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,YAAY,EACZC,MAAM,EACNC,uBAAuB,QAClB,oBAAoB;AAC3B,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,UAAU,MAAM,iBAAiB;AAExC,eAAe,MAAMC,UAAU,SAASH,MAAM,CAAC;EAC7CI,WAAWA,CAACC,WAAW,EAAEC,WAAW,EAAEC,OAAO,EAAE;IAC7C,KAAK,CAACF,WAAW,EAAEC,WAAW,CAAC;IAC/B,IAAI,CAACE,KAAK,GAAGP,SAAS;IACtB,IAAI,CAACQ,MAAM,GAAGP,UAAU;IAExBK,OAAO,CAAC,IAAI,CAACb,KAAK,CAAC,CAAC;IACpB,IAAI,CAACgB,qBAAqB,GAAG,IAAI;EACnC;EAEA,KAAKhB,KAAK,IAAI;IACZ,OAAO,MAAM;EACf;;EAEA;AACF;AACA;EACE,CAACG,YAAY,EAAEc,OAAO,EAAE;IACtB,IAAIA,OAAO,CAAClB,kBAAkB,CAAC,KAAK,CAAC,EAAE;MACrC;;MAEA,IAAI,CAACmB,YAAY,CAACd,MAAM,CAAC,CAAC,CAAC;MAC3B,IAAI,CAACY,qBAAqB,GAAGC,OAAO,CAACnB,IAAI,CAAC;IAC5C,CAAC,MAAM,IAAImB,OAAO,CAAClB,kBAAkB,CAAC,KAAK,CAAC,EAAE;MAC5C;IAAA,CACD,MAAM;MACLkB,OAAO,CAACpB,WAAW,CAAC,GAAGD,UAAU,CAC9BuB,GAAG,CAACF,OAAO,CAAC,CACZhB,QAAQ,CAAC,CAACmB,GAAG,CAAEC,OAAO,IAAK;QAC1B,MAAMC,MAAM,GAAGd,UAAU,CAACH,uBAAuB,CAAC,CAChD,IAAI,CAACW,qBAAqB,EAC1BK,OAAO,EACP,IAAI,CAACH,YACP,CAAC;QAED,IAAII,MAAM,EAAE,OAAO,IAAIf,SAAS,CAACc,OAAO,EAAEC,MAAM,CAAC;QAEjD,IAAI,CAACC,YAAY,CAACrB,QAAQ,CAAC,CACzB,iCAAiC,EACjC,2BACF,CAAC;MACH,CAAC,CAAC;IACN;IAEA,OAAOe,OAAO;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}