{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;\nconst Token = require(\"token-types\");\nconst FourCC_1 = require(\"../common/FourCC\");\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.ChunkHeader = {\n  len: 12,\n  get: (buf, off) => {\n    return {\n      id: FourCC_1.FourCcToken.get(buf, off),\n      size: Token.UINT64_LE.get(buf, off + 4)\n    };\n  }\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.DsdChunk = {\n  len: 16,\n  get: (buf, off) => {\n    return {\n      fileSize: Token.INT64_LE.get(buf, off),\n      metadataPointer: Token.INT64_LE.get(buf, off + 8)\n    };\n  }\n};\nvar ChannelType;\n(function (ChannelType) {\n  ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\n  ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\n  ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\n  ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\n  ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\n  ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\n  ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.FormatChunk = {\n  len: 40,\n  get: (buf, off) => {\n    return {\n      formatVersion: Token.INT32_LE.get(buf, off),\n      formatID: Token.INT32_LE.get(buf, off + 4),\n      channelType: Token.INT32_LE.get(buf, off + 8),\n      channelNum: Token.INT32_LE.get(buf, off + 12),\n      samplingFrequency: Token.INT32_LE.get(buf, off + 16),\n      bitsPerSample: Token.INT32_LE.get(buf, off + 20),\n      sampleCount: Token.INT64_LE.get(buf, off + 24),\n      blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\n    };\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","FormatChunk","ChannelType","DsdChunk","ChunkHeader","Token","require","FourCC_1","len","get","buf","off","id","FourCcToken","size","UINT64_LE","fileSize","INT64_LE","metadataPointer","formatVersion","INT32_LE","formatID","channelType","channelNum","samplingFrequency","bitsPerSample","sampleCount","blockSizePerChannel"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/dsf/DsfChunk.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;\nconst Token = require(\"token-types\");\nconst FourCC_1 = require(\"../common/FourCC\");\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.ChunkHeader = {\n    len: 12,\n    get: (buf, off) => {\n        return { id: FourCC_1.FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };\n    }\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.DsdChunk = {\n    len: 16,\n    get: (buf, off) => {\n        return {\n            fileSize: Token.INT64_LE.get(buf, off),\n            metadataPointer: Token.INT64_LE.get(buf, off + 8)\n        };\n    }\n};\nvar ChannelType;\n(function (ChannelType) {\n    ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\n    ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\n    ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\n    ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\n    ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\n    ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\n    ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.FormatChunk = {\n    len: 40,\n    get: (buf, off) => {\n        return {\n            formatVersion: Token.INT32_LE.get(buf, off),\n            formatID: Token.INT32_LE.get(buf, off + 4),\n            channelType: Token.INT32_LE.get(buf, off + 8),\n            channelNum: Token.INT32_LE.get(buf, off + 12),\n            samplingFrequency: Token.INT32_LE.get(buf, off + 16),\n            bitsPerSample: Token.INT32_LE.get(buf, off + 20),\n            sampleCount: Token.INT64_LE.get(buf, off + 24),\n            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\n        };\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,WAAW,GAAGH,OAAO,CAACI,QAAQ,GAAGJ,OAAO,CAACK,WAAW,GAAG,KAAK,CAAC;AAC3F,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C;AACA;AACA;AACAP,OAAO,CAACK,WAAW,GAAG;EAClBI,GAAG,EAAE,EAAE;EACPC,GAAG,EAAEA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACf,OAAO;MAAEC,EAAE,EAAEL,QAAQ,CAACM,WAAW,CAACJ,GAAG,CAACC,GAAG,EAAEC,GAAG,CAAC;MAAEG,IAAI,EAAET,KAAK,CAACU,SAAS,CAACN,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,CAAC;IAAE,CAAC;EAC9F;AACJ,CAAC;AACD;AACA;AACA;AACAZ,OAAO,CAACI,QAAQ,GAAG;EACfK,GAAG,EAAE,EAAE;EACPC,GAAG,EAAEA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACf,OAAO;MACHK,QAAQ,EAAEX,KAAK,CAACY,QAAQ,CAACR,GAAG,CAACC,GAAG,EAAEC,GAAG,CAAC;MACtCO,eAAe,EAAEb,KAAK,CAACY,QAAQ,CAACR,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,CAAC;IACpD,CAAC;EACL;AACJ,CAAC;AACD,IAAIT,WAAW;AACf,CAAC,UAAUA,WAAW,EAAE;EACpBA,WAAW,CAACA,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EAC7CA,WAAW,CAACA,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EACjDA,WAAW,CAACA,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EACrDA,WAAW,CAACA,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EAC7CA,WAAW,CAACA,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACzDA,WAAW,CAACA,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACzDA,WAAW,CAACA,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;AACjE,CAAC,EAAEA,WAAW,GAAGH,OAAO,CAACG,WAAW,KAAKH,OAAO,CAACG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AACnE;AACA;AACA;AACAH,OAAO,CAACE,WAAW,GAAG;EAClBO,GAAG,EAAE,EAAE;EACPC,GAAG,EAAEA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACf,OAAO;MACHQ,aAAa,EAAEd,KAAK,CAACe,QAAQ,CAACX,GAAG,CAACC,GAAG,EAAEC,GAAG,CAAC;MAC3CU,QAAQ,EAAEhB,KAAK,CAACe,QAAQ,CAACX,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC;MAC1CW,WAAW,EAAEjB,KAAK,CAACe,QAAQ,CAACX,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC;MAC7CY,UAAU,EAAElB,KAAK,CAACe,QAAQ,CAACX,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,EAAE,CAAC;MAC7Ca,iBAAiB,EAAEnB,KAAK,CAACe,QAAQ,CAACX,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,EAAE,CAAC;MACpDc,aAAa,EAAEpB,KAAK,CAACe,QAAQ,CAACX,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,EAAE,CAAC;MAChDe,WAAW,EAAErB,KAAK,CAACY,QAAQ,CAACR,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,EAAE,CAAC;MAC9CgB,mBAAmB,EAAEtB,KAAK,CAACe,QAAQ,CAACX,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,EAAE;IACzD,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}