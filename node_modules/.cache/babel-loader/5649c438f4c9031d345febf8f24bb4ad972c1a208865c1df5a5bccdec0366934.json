{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\nvar util = require(\"./util/minimal\");\nvar Buffer = util.Buffer;\n\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\nfunction BufferWriter() {\n  Writer.call(this);\n}\n\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n  return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n  buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n  // also works for plain array values\n}\n/* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n  if (val.copy)\n    // Buffer values\n    val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n  // plain array values\n  buf[pos++] = val[i++];\n};\n\n/**\r\n * @override\r\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n  if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n  var len = value.length >>> 0;\n  this.uint32(len);\n  if (len) this._push(writeBytesBuffer, len, value);\n  return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n  if (val.length < 40)\n    // plain js is faster for short strings (probably due to redundant assertions)\n    util.utf8.write(val, buf, pos);else buf.utf8Write(val, pos);\n}\n\n/**\r\n * @override\r\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n  var len = Buffer.byteLength(value);\n  this.uint32(len);\n  if (len) this._push(writeStringBuffer, len, value);\n  return this;\n};\n\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */","map":{"version":3,"names":["module","exports","BufferWriter","Writer","require","prototype","Object","create","constructor","util","Buffer","call","alloc","alloc_buffer","size","_Buffer_allocUnsafe","writeBytesBuffer","Uint8Array","set","name","writeBytesBuffer_set","val","buf","pos","writeBytesBuffer_copy","copy","length","i","bytes","write_bytes_buffer","value","isString","_Buffer_from","len","uint32","_push","writeStringBuffer","utf8","write","utf8Write","string","write_string_buffer","byteLength"],"sources":["C:/Users/vanitas/node_modules/libsignal/node_modules/protobufjs/src/writer_buffer.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}