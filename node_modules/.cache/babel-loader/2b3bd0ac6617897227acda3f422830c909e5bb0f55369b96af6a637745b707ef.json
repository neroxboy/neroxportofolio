{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractID3Parser = void 0;\nconst core_1 = require(\"strtok3/lib/core\");\nconst debug_1 = require(\"debug\");\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\nconst ID3v2Parser_1 = require(\"./ID3v2Parser\");\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\n  constructor() {\n    super(...arguments);\n    this.id3parser = new ID3v2Parser_1.ID3v2Parser();\n  }\n  static async startsWithID3v2Header(tokenizer) {\n    return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\n  }\n  async parse() {\n    try {\n      await this.parseID3v2();\n    } catch (err) {\n      if (err instanceof core_1.EndOfStreamError) {\n        debug(`End-of-stream`);\n      } else {\n        throw err;\n      }\n    }\n  }\n  finalize() {\n    return;\n  }\n  async parseID3v2() {\n    await this.tryReadId3v2Headers();\n    debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n    await this.postId3v2Parse();\n    if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n      this.finalize();\n    } else {\n      const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\n      await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\n      this.finalize();\n    }\n  }\n  async tryReadId3v2Headers() {\n    const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\n    if (id3Header.fileIdentifier === 'ID3') {\n      debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n      await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n      return this.tryReadId3v2Headers();\n    }\n  }\n}\nexports.AbstractID3Parser = AbstractID3Parser;","map":{"version":3,"names":["Object","defineProperty","exports","value","AbstractID3Parser","core_1","require","debug_1","ID3v2Token_1","ID3v2Parser_1","ID3v1Parser_1","BasicParser_1","debug","default","BasicParser","constructor","arguments","id3parser","ID3v2Parser","startsWithID3v2Header","tokenizer","peekToken","ID3v2Header","fileIdentifier","parse","parseID3v2","err","EndOfStreamError","finalize","tryReadId3v2Headers","position","postId3v2Parse","options","skipPostHeaders","metadata","hasAny","id3v1parser","ID3v1Parser","init","id3Header"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractID3Parser = void 0;\nconst core_1 = require(\"strtok3/lib/core\");\nconst debug_1 = require(\"debug\");\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\nconst ID3v2Parser_1 = require(\"./ID3v2Parser\");\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser_1.ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof core_1.EndOfStreamError) {\n                debug(`End-of-stream`);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\n            await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\nexports.AbstractID3Parser = AbstractID3Parser;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAO,CAAC;AAChC,MAAME,YAAY,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMG,aAAa,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAMI,aAAa,GAAGJ,OAAO,CAAC,sBAAsB,CAAC;AACrD,MAAMK,aAAa,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AACtD,MAAMM,KAAK,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,2BAA2B,CAAC;AAC/D;AACA;AACA;AACA,MAAMT,iBAAiB,SAASO,aAAa,CAACG,WAAW,CAAC;EACtDC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,IAAIR,aAAa,CAACS,WAAW,CAAC,CAAC;EACpD;EACA,aAAaC,qBAAqBA,CAACC,SAAS,EAAE;IAC1C,OAAO,CAAC,MAAMA,SAAS,CAACC,SAAS,CAACb,YAAY,CAACc,WAAW,CAAC,EAAEC,cAAc,KAAK,KAAK;EACzF;EACA,MAAMC,KAAKA,CAAA,EAAG;IACV,IAAI;MACA,MAAM,IAAI,CAACC,UAAU,CAAC,CAAC;IAC3B,CAAC,CACD,OAAOC,GAAG,EAAE;MACR,IAAIA,GAAG,YAAYrB,MAAM,CAACsB,gBAAgB,EAAE;QACxCf,KAAK,CAAC,eAAe,CAAC;MAC1B,CAAC,MACI;QACD,MAAMc,GAAG;MACb;IACJ;EACJ;EACAE,QAAQA,CAAA,EAAG;IACP;EACJ;EACA,MAAMH,UAAUA,CAAA,EAAG;IACf,MAAM,IAAI,CAACI,mBAAmB,CAAC,CAAC;IAChCjB,KAAK,CAAC,gDAAgD,EAAE,IAAI,CAACQ,SAAS,CAACU,QAAQ,CAAC;IAChF,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;IAC3B,IAAI,IAAI,CAACC,OAAO,CAACC,eAAe,IAAI,IAAI,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACxD,IAAI,CAACP,QAAQ,CAAC,CAAC;IACnB,CAAC,MACI;MACD,MAAMQ,WAAW,GAAG,IAAI1B,aAAa,CAAC2B,WAAW,CAAC,CAAC;MACnD,MAAMD,WAAW,CAACE,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAE,IAAI,CAACd,SAAS,EAAE,IAAI,CAACY,OAAO,CAAC,CAACR,KAAK,CAAC,CAAC;MAC3E,IAAI,CAACI,QAAQ,CAAC,CAAC;IACnB;EACJ;EACA,MAAMC,mBAAmBA,CAAA,EAAG;IACxB,MAAMU,SAAS,GAAG,MAAM,IAAI,CAACnB,SAAS,CAACC,SAAS,CAACb,YAAY,CAACc,WAAW,CAAC;IAC1E,IAAIiB,SAAS,CAAChB,cAAc,KAAK,KAAK,EAAE;MACpCX,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAACQ,SAAS,CAACU,QAAQ,CAAC;MAC5D,MAAM,IAAI,CAACb,SAAS,CAACO,KAAK,CAAC,IAAI,CAACU,QAAQ,EAAE,IAAI,CAACd,SAAS,EAAE,IAAI,CAACY,OAAO,CAAC;MACvE,OAAO,IAAI,CAACH,mBAAmB,CAAC,CAAC;IACrC;EACJ;AACJ;AACA3B,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}