{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readAndEmitEventStream = exports.captureEventStream = void 0;\nconst events_1 = __importDefault(require(\"events\"));\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\nconst readline_1 = require(\"readline\");\nconst generics_1 = require(\"./generics\");\nconst make_mutex_1 = require(\"./make-mutex\");\n/**\n * Captures events from a baileys event emitter & stores them in a file\n * @param ev The event emitter to read events from\n * @param filename File to save to\n */\nconst captureEventStream = (ev, filename) => {\n  const oldEmit = ev.emit;\n  // write mutex so data is appended in order\n  const writeMutex = (0, make_mutex_1.makeMutex)();\n  // monkey patch eventemitter to capture all events\n  ev.emit = function (...args) {\n    const content = JSON.stringify({\n      timestamp: Date.now(),\n      event: args[0],\n      data: args[1]\n    }) + '\\n';\n    const result = oldEmit.apply(ev, args);\n    writeMutex.mutex(async () => {\n      await (0, promises_1.writeFile)(filename, content, {\n        flag: 'a'\n      });\n    });\n    return result;\n  };\n};\nexports.captureEventStream = captureEventStream;\n/**\n * Read event file and emit events from there\n * @param filename filename containing event data\n * @param delayIntervalMs delay between each event emit\n */\nconst readAndEmitEventStream = (filename, delayIntervalMs = 0) => {\n  const ev = new events_1.default();\n  const fireEvents = async () => {\n    // from: https://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js\n    const fileStream = (0, fs_1.createReadStream)(filename);\n    const rl = (0, readline_1.createInterface)({\n      input: fileStream,\n      crlfDelay: Infinity\n    });\n    // Note: we use the crlfDelay option to recognize all instances of CR LF\n    // ('\\r\\n') in input.txt as a single line break.\n    for await (const line of rl) {\n      if (line) {\n        const {\n          event,\n          data\n        } = JSON.parse(line);\n        ev.emit(event, data);\n        delayIntervalMs && (await (0, generics_1.delay)(delayIntervalMs));\n      }\n    }\n    fileStream.close();\n  };\n  return {\n    ev,\n    task: fireEvents()\n  };\n};\nexports.readAndEmitEventStream = readAndEmitEventStream;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","readAndEmitEventStream","captureEventStream","events_1","require","fs_1","promises_1","readline_1","generics_1","make_mutex_1","ev","filename","oldEmit","emit","writeMutex","makeMutex","args","content","JSON","stringify","timestamp","Date","now","event","data","result","apply","mutex","writeFile","flag","delayIntervalMs","default","fireEvents","fileStream","createReadStream","rl","createInterface","input","crlfDelay","Infinity","line","parse","delay","close","task"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Utils/baileys-event-stream.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readAndEmitEventStream = exports.captureEventStream = void 0;\nconst events_1 = __importDefault(require(\"events\"));\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\nconst readline_1 = require(\"readline\");\nconst generics_1 = require(\"./generics\");\nconst make_mutex_1 = require(\"./make-mutex\");\n/**\n * Captures events from a baileys event emitter & stores them in a file\n * @param ev The event emitter to read events from\n * @param filename File to save to\n */\nconst captureEventStream = (ev, filename) => {\n    const oldEmit = ev.emit;\n    // write mutex so data is appended in order\n    const writeMutex = (0, make_mutex_1.makeMutex)();\n    // monkey patch eventemitter to capture all events\n    ev.emit = function (...args) {\n        const content = JSON.stringify({ timestamp: Date.now(), event: args[0], data: args[1] }) + '\\n';\n        const result = oldEmit.apply(ev, args);\n        writeMutex.mutex(async () => {\n            await (0, promises_1.writeFile)(filename, content, { flag: 'a' });\n        });\n        return result;\n    };\n};\nexports.captureEventStream = captureEventStream;\n/**\n * Read event file and emit events from there\n * @param filename filename containing event data\n * @param delayIntervalMs delay between each event emit\n */\nconst readAndEmitEventStream = (filename, delayIntervalMs = 0) => {\n    const ev = new events_1.default();\n    const fireEvents = async () => {\n        // from: https://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js\n        const fileStream = (0, fs_1.createReadStream)(filename);\n        const rl = (0, readline_1.createInterface)({\n            input: fileStream,\n            crlfDelay: Infinity\n        });\n        // Note: we use the crlfDelay option to recognize all instances of CR LF\n        // ('\\r\\n') in input.txt as a single line break.\n        for await (const line of rl) {\n            if (line) {\n                const { event, data } = JSON.parse(line);\n                ev.emit(event, data);\n                delayIntervalMs && await (0, generics_1.delay)(delayIntervalMs);\n            }\n        }\n        fileStream.close();\n    };\n    return {\n        ev,\n        task: fireEvents()\n    };\n};\nexports.readAndEmitEventStream = readAndEmitEventStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}