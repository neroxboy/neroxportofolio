{"ast":null,"code":"import { WASMAudioDecoderCommon } from \"@wasm-audio-decoders/common\";\nimport EmscriptenWASM from \"./EmscriptenWasm.js\";\nexport default function MPEGDecoder(options = {}) {\n  // injects dependencies when running as a web worker\n  // async\n  this._init = () => {\n    return new this._WASMAudioDecoderCommon().instantiate(this._EmscriptenWASM, this._module).then(common => {\n      this._common = common;\n      this._sampleRate = 0;\n      this._inputBytes = 0;\n      this._outputSamples = 0;\n      this._frameNumber = 0;\n      this._input = this._common.allocateTypedArray(this._inputSize, Uint8Array);\n      this._output = this._common.allocateTypedArray(this._outputSize, Float32Array);\n      const decoderPtr = this._common.allocateTypedArray(1, Uint32Array);\n      this._samplesDecodedPtr = this._common.allocateTypedArray(1, Uint32Array);\n      this._sampleRatePtr = this._common.allocateTypedArray(1, Uint32Array);\n      this._errorStringPtr = this._common.allocateTypedArray(1, Uint32Array);\n      const error = this._common.wasm.mpeg_frame_decoder_create(decoderPtr.ptr, options.enableGapless === false ? 0 : 1 // default to enabled\n      );\n      if (error) {\n        throw Error(this._getErrorMessage(error));\n      }\n      this._decoder = decoderPtr.buf[0];\n    });\n  };\n  Object.defineProperty(this, \"ready\", {\n    enumerable: true,\n    get: () => this._ready\n  });\n  this._getErrorMessage = error => error + \" \" + this._common.codeToString(this._errorStringPtr.buf[0]);\n\n  // async\n  this.reset = () => {\n    this.free();\n    return this._init();\n  };\n  this.free = () => {\n    this._common.wasm.mpeg_frame_decoder_destroy(this._decoder);\n    this._common.wasm.free(this._decoder);\n    this._common.free();\n  };\n  this.decode = data => {\n    let output = [],\n      errors = [],\n      samples = 0;\n    if (!(data instanceof Uint8Array)) throw Error(\"Data to decode must be Uint8Array. Instead got \" + typeof data);\n    feed: for (let dataOffset = 0, dataChunkLength = 0; dataOffset < data.length; dataOffset += dataChunkLength) {\n      const dataChunk = data.subarray(dataOffset, this._input.len + dataOffset);\n      dataChunkLength = dataChunk.length;\n      this._inputBytes += dataChunkLength;\n      this._input.buf.set(dataChunk);\n\n      // feed data in chunks as large as the input buffer\n      let error = this._common.wasm.mpeg_decoder_feed(this._decoder, this._input.ptr, dataChunkLength);\n      if (error === -10) {\n        continue feed; // MPG123_NEED_MORE\n      }\n\n      // decode data in chunks as large as the input buffer\n      read: while (true) {\n        this._samplesDecodedPtr.buf[0] = 0;\n        error = this._common.wasm.mpeg_decoder_read(this._decoder, this._output.ptr, this._output.len, this._samplesDecodedPtr.ptr, this._sampleRatePtr.ptr, this._errorStringPtr.ptr);\n        const samplesDecoded = this._samplesDecodedPtr.buf[0];\n        this._outputSamples += samplesDecoded;\n        if (samplesDecoded) {\n          samples += samplesDecoded;\n          output.push([this._output.buf.slice(0, samplesDecoded), this._output.buf.slice(samplesDecoded, samplesDecoded * 2)]);\n        }\n        if (error == -11) {\n          continue read; // MPG123_NEW_FORMAT, usually the start of a new stream\n        } else if (error === -10) {\n          continue feed; // MPG123_NEED_MORE\n        } else if (error) {\n          const message = this._getErrorMessage(error);\n          console.error(\"mpg123-decoder: \" + message);\n          this._common.addError(errors, message, 0, this._frameNumber, this._inputBytes, this._outputSamples);\n        }\n      }\n    }\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(errors, output, 2, samples, this._sampleRatePtr.buf[0]);\n  };\n  this.decodeFrame = mpegFrame => {\n    const decoded = this.decode(mpegFrame);\n    this._frameNumber++;\n    return decoded;\n  };\n  this.decodeFrames = mpegFrames => {\n    let output = [],\n      errors = [],\n      samples = 0,\n      i = 0;\n    while (i < mpegFrames.length) {\n      const decoded = this.decodeFrame(mpegFrames[i++]);\n      output.push(decoded.channelData);\n      errors = errors.concat(decoded.errors);\n      samples += decoded.samplesDecoded;\n    }\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(errors, output, 2, samples, this._sampleRatePtr.buf[0]);\n  };\n\n  // constructor\n\n  // injects dependencies when running as a web worker\n  this._isWebWorker = MPEGDecoder.isWebWorker;\n  this._WASMAudioDecoderCommon = MPEGDecoder.WASMAudioDecoderCommon || WASMAudioDecoderCommon;\n  this._EmscriptenWASM = MPEGDecoder.EmscriptenWASM || EmscriptenWASM;\n  this._module = MPEGDecoder.module;\n  this._inputSize = 2 ** 16;\n  this._outputSize = 2889 * 16 * 2;\n  this._ready = this._init();\n  return this;\n}","map":{"version":3,"names":["WASMAudioDecoderCommon","EmscriptenWASM","MPEGDecoder","options","_init","_WASMAudioDecoderCommon","instantiate","_EmscriptenWASM","_module","then","common","_common","_sampleRate","_inputBytes","_outputSamples","_frameNumber","_input","allocateTypedArray","_inputSize","Uint8Array","_output","_outputSize","Float32Array","decoderPtr","Uint32Array","_samplesDecodedPtr","_sampleRatePtr","_errorStringPtr","error","wasm","mpeg_frame_decoder_create","ptr","enableGapless","Error","_getErrorMessage","_decoder","buf","Object","defineProperty","enumerable","get","_ready","codeToString","reset","free","mpeg_frame_decoder_destroy","decode","data","output","errors","samples","feed","dataOffset","dataChunkLength","length","dataChunk","subarray","len","set","mpeg_decoder_feed","read","mpeg_decoder_read","samplesDecoded","push","slice","message","console","addError","getDecodedAudioMultiChannel","decodeFrame","mpegFrame","decoded","decodeFrames","mpegFrames","i","channelData","concat","_isWebWorker","isWebWorker","module"],"sources":["C:/Users/vanitas/node_modules/mpg123-decoder/src/MPEGDecoder.js"],"sourcesContent":["import { WASMAudioDecoderCommon } from \"@wasm-audio-decoders/common\";\n\nimport EmscriptenWASM from \"./EmscriptenWasm.js\";\n\nexport default function MPEGDecoder(options = {}) {\n  // injects dependencies when running as a web worker\n  // async\n  this._init = () => {\n    return new this._WASMAudioDecoderCommon()\n      .instantiate(this._EmscriptenWASM, this._module)\n      .then((common) => {\n        this._common = common;\n\n        this._sampleRate = 0;\n        this._inputBytes = 0;\n        this._outputSamples = 0;\n        this._frameNumber = 0;\n\n        this._input = this._common.allocateTypedArray(\n          this._inputSize,\n          Uint8Array,\n        );\n\n        this._output = this._common.allocateTypedArray(\n          this._outputSize,\n          Float32Array,\n        );\n\n        const decoderPtr = this._common.allocateTypedArray(1, Uint32Array);\n        this._samplesDecodedPtr = this._common.allocateTypedArray(\n          1,\n          Uint32Array,\n        );\n        this._sampleRatePtr = this._common.allocateTypedArray(1, Uint32Array);\n        this._errorStringPtr = this._common.allocateTypedArray(1, Uint32Array);\n\n        const error = this._common.wasm.mpeg_frame_decoder_create(\n          decoderPtr.ptr,\n          options.enableGapless === false ? 0 : 1, // default to enabled\n        );\n\n        if (error) {\n          throw Error(this._getErrorMessage(error));\n        }\n\n        this._decoder = decoderPtr.buf[0];\n      });\n  };\n\n  Object.defineProperty(this, \"ready\", {\n    enumerable: true,\n    get: () => this._ready,\n  });\n\n  this._getErrorMessage = (error) =>\n    error + \" \" + this._common.codeToString(this._errorStringPtr.buf[0]);\n\n  // async\n  this.reset = () => {\n    this.free();\n    return this._init();\n  };\n\n  this.free = () => {\n    this._common.wasm.mpeg_frame_decoder_destroy(this._decoder);\n    this._common.wasm.free(this._decoder);\n\n    this._common.free();\n  };\n\n  this.decode = (data) => {\n    let output = [],\n      errors = [],\n      samples = 0;\n\n    if (!(data instanceof Uint8Array))\n      throw Error(\n        \"Data to decode must be Uint8Array. Instead got \" + typeof data,\n      );\n\n    feed: for (\n      let dataOffset = 0, dataChunkLength = 0;\n      dataOffset < data.length;\n      dataOffset += dataChunkLength\n    ) {\n      const dataChunk = data.subarray(dataOffset, this._input.len + dataOffset);\n      dataChunkLength = dataChunk.length;\n      this._inputBytes += dataChunkLength;\n\n      this._input.buf.set(dataChunk);\n\n      // feed data in chunks as large as the input buffer\n      let error = this._common.wasm.mpeg_decoder_feed(\n        this._decoder,\n        this._input.ptr,\n        dataChunkLength,\n      );\n\n      if (error === -10) {\n        continue feed; // MPG123_NEED_MORE\n      }\n\n      // decode data in chunks as large as the input buffer\n      read: while (true) {\n        this._samplesDecodedPtr.buf[0] = 0;\n\n        error = this._common.wasm.mpeg_decoder_read(\n          this._decoder,\n          this._output.ptr,\n          this._output.len,\n          this._samplesDecodedPtr.ptr,\n          this._sampleRatePtr.ptr,\n          this._errorStringPtr.ptr,\n        );\n\n        const samplesDecoded = this._samplesDecodedPtr.buf[0];\n        this._outputSamples += samplesDecoded;\n\n        if (samplesDecoded) {\n          samples += samplesDecoded;\n          output.push([\n            this._output.buf.slice(0, samplesDecoded),\n            this._output.buf.slice(samplesDecoded, samplesDecoded * 2),\n          ]);\n        }\n\n        if (error == -11) {\n          continue read; // MPG123_NEW_FORMAT, usually the start of a new stream\n        } else if (error === -10) {\n          continue feed; // MPG123_NEED_MORE\n        } else if (error) {\n          const message = this._getErrorMessage(error);\n          console.error(\"mpg123-decoder: \" + message);\n\n          this._common.addError(\n            errors,\n            message,\n            0,\n            this._frameNumber,\n            this._inputBytes,\n            this._outputSamples,\n          );\n        }\n      }\n    }\n\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(\n      errors,\n      output,\n      2,\n      samples,\n      this._sampleRatePtr.buf[0],\n    );\n  };\n\n  this.decodeFrame = (mpegFrame) => {\n    const decoded = this.decode(mpegFrame);\n    this._frameNumber++;\n    return decoded;\n  };\n\n  this.decodeFrames = (mpegFrames) => {\n    let output = [],\n      errors = [],\n      samples = 0,\n      i = 0;\n\n    while (i < mpegFrames.length) {\n      const decoded = this.decodeFrame(mpegFrames[i++]);\n\n      output.push(decoded.channelData);\n      errors = errors.concat(decoded.errors);\n      samples += decoded.samplesDecoded;\n    }\n\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(\n      errors,\n      output,\n      2,\n      samples,\n      this._sampleRatePtr.buf[0],\n    );\n  };\n\n  // constructor\n\n  // injects dependencies when running as a web worker\n  this._isWebWorker = MPEGDecoder.isWebWorker;\n  this._WASMAudioDecoderCommon =\n    MPEGDecoder.WASMAudioDecoderCommon || WASMAudioDecoderCommon;\n  this._EmscriptenWASM = MPEGDecoder.EmscriptenWASM || EmscriptenWASM;\n  this._module = MPEGDecoder.module;\n\n  this._inputSize = 2 ** 16;\n  this._outputSize = 2889 * 16 * 2;\n\n  this._ready = this._init();\n\n  return this;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}