{"ast":null,"code":"const SenderChainKey = require('./sender_chain_key');\nconst SenderMessageKey = require('./sender_message_key');\nconst protobufs = require('./protobufs');\nclass SenderKeyState {\n  MAX_MESSAGE_KEYS = 2000;\n  constructor(id = null, iteration = null, chainKey = null, signatureKeyPair = null, signatureKeyPublic = null, signatureKeyPrivate = null, senderKeyStateStructure = null) {\n    if (senderKeyStateStructure) {\n      this.senderKeyStateStructure = senderKeyStateStructure;\n    } else {\n      if (signatureKeyPair) {\n        signatureKeyPublic = signatureKeyPair.public;\n        signatureKeyPrivate = signatureKeyPair.private;\n      }\n      chainKey = typeof chainKey === 'string' ? Buffer.from(chainKey, 'base64') : chainKey;\n      this.senderKeyStateStructure = protobufs.SenderKeyStateStructure.create();\n      const senderChainKeyStructure = protobufs.SenderChainKey.create();\n      senderChainKeyStructure.iteration = iteration;\n      senderChainKeyStructure.seed = chainKey;\n      this.senderKeyStateStructure.senderChainKey = senderChainKeyStructure;\n      const signingKeyStructure = protobufs.SenderSigningKey.create();\n      signingKeyStructure.public = typeof signatureKeyPublic === 'string' ? Buffer.from(signatureKeyPublic, 'base64') : signatureKeyPublic;\n      if (signatureKeyPrivate) {\n        signingKeyStructure.private = typeof signatureKeyPrivate === 'string' ? Buffer.from(signatureKeyPrivate, 'base64') : signatureKeyPrivate;\n      }\n      this.senderKeyStateStructure.senderKeyId = id;\n      this.senderChainKey = senderChainKeyStructure;\n      this.senderKeyStateStructure.senderSigningKey = signingKeyStructure;\n    }\n    this.senderKeyStateStructure.senderMessageKeys = this.senderKeyStateStructure.senderMessageKeys || [];\n  }\n  SenderKeyState(senderKeyStateStructure) {\n    this.senderKeyStateStructure = senderKeyStateStructure;\n  }\n  getKeyId() {\n    return this.senderKeyStateStructure.senderKeyId;\n  }\n  getSenderChainKey() {\n    return new SenderChainKey(this.senderKeyStateStructure.senderChainKey.iteration, this.senderKeyStateStructure.senderChainKey.seed);\n  }\n  setSenderChainKey(chainKey) {\n    const senderChainKeyStructure = protobufs.SenderChainKey.create({\n      iteration: chainKey.getIteration(),\n      seed: chainKey.getSeed()\n    });\n    this.senderKeyStateStructure.senderChainKey = senderChainKeyStructure;\n  }\n  getSigningKeyPublic() {\n    return typeof this.senderKeyStateStructure.senderSigningKey.public === 'string' ? Buffer.from(this.senderKeyStateStructure.senderSigningKey.public, 'base64') : this.senderKeyStateStructure.senderSigningKey.public;\n  }\n  getSigningKeyPrivate() {\n    return typeof this.senderKeyStateStructure.senderSigningKey.private === 'string' ? Buffer.from(this.senderKeyStateStructure.senderSigningKey.private, 'base64') : this.senderKeyStateStructure.senderSigningKey.private;\n  }\n  hasSenderMessageKey(iteration) {\n    const list = this.senderKeyStateStructure.senderMessageKeys;\n    for (let o = 0; o < list.length; o++) {\n      const senderMessageKey = list[o];\n      if (senderMessageKey.iteration === iteration) return true;\n    }\n    return false;\n  }\n  addSenderMessageKey(senderMessageKey) {\n    const senderMessageKeyStructure = protobufs.SenderKeyStateStructure.create({\n      iteration: senderMessageKey.getIteration(),\n      seed: senderMessageKey.getSeed()\n    });\n    this.senderKeyStateStructure.senderMessageKeys.push(senderMessageKeyStructure);\n    if (this.senderKeyStateStructure.senderMessageKeys.length > this.MAX_MESSAGE_KEYS) {\n      this.senderKeyStateStructure.senderMessageKeys.shift();\n    }\n  }\n  removeSenderMessageKey(iteration) {\n    let result = null;\n    this.senderKeyStateStructure.senderMessageKeys = this.senderKeyStateStructure.senderMessageKeys.filter(senderMessageKey => {\n      if (senderMessageKey.iteration === iteration) result = senderMessageKey;\n      return senderMessageKey.iteration !== iteration;\n    });\n    if (result != null) {\n      return new SenderMessageKey(result.iteration, result.seed);\n    }\n    return null;\n  }\n  getStructure() {\n    return this.senderKeyStateStructure;\n  }\n}\nmodule.exports = SenderKeyState;","map":{"version":3,"names":["SenderChainKey","require","SenderMessageKey","protobufs","SenderKeyState","MAX_MESSAGE_KEYS","constructor","id","iteration","chainKey","signatureKeyPair","signatureKeyPublic","signatureKeyPrivate","senderKeyStateStructure","public","private","Buffer","from","SenderKeyStateStructure","create","senderChainKeyStructure","seed","senderChainKey","signingKeyStructure","SenderSigningKey","senderKeyId","senderSigningKey","senderMessageKeys","getKeyId","getSenderChainKey","setSenderChainKey","getIteration","getSeed","getSigningKeyPublic","getSigningKeyPrivate","hasSenderMessageKey","list","o","length","senderMessageKey","addSenderMessageKey","senderMessageKeyStructure","push","shift","removeSenderMessageKey","result","filter","getStructure","module","exports"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/WASignalGroup/sender_key_state.js"],"sourcesContent":["const SenderChainKey = require('./sender_chain_key');\nconst SenderMessageKey = require('./sender_message_key');\n\nconst protobufs = require('./protobufs');\n\nclass SenderKeyState {\n    MAX_MESSAGE_KEYS = 2000;\n\n    constructor(\n        id = null,\n        iteration = null,\n        chainKey = null,\n        signatureKeyPair = null,\n        signatureKeyPublic = null,\n        signatureKeyPrivate = null,\n        senderKeyStateStructure = null\n    ) {\n        if (senderKeyStateStructure) {\n            this.senderKeyStateStructure = senderKeyStateStructure;\n        } else {\n            if (signatureKeyPair) {\n                signatureKeyPublic = signatureKeyPair.public;\n                signatureKeyPrivate = signatureKeyPair.private;\n            }\n\n            chainKey = typeof chainKey === 'string' ? Buffer.from(chainKey, 'base64') : chainKey;\n            this.senderKeyStateStructure = protobufs.SenderKeyStateStructure.create();\n            const senderChainKeyStructure = protobufs.SenderChainKey.create();\n            senderChainKeyStructure.iteration = iteration;\n            senderChainKeyStructure.seed = chainKey;\n            this.senderKeyStateStructure.senderChainKey = senderChainKeyStructure;\n\n            const signingKeyStructure = protobufs.SenderSigningKey.create();\n            signingKeyStructure.public =\n                typeof signatureKeyPublic === 'string' ?\n                Buffer.from(signatureKeyPublic, 'base64') :\n                signatureKeyPublic;\n            if (signatureKeyPrivate) {\n                signingKeyStructure.private =\n                    typeof signatureKeyPrivate === 'string' ?\n                    Buffer.from(signatureKeyPrivate, 'base64') :\n                    signatureKeyPrivate;\n            }\n            this.senderKeyStateStructure.senderKeyId = id;\n            this.senderChainKey = senderChainKeyStructure;\n            this.senderKeyStateStructure.senderSigningKey = signingKeyStructure;\n        }\n        this.senderKeyStateStructure.senderMessageKeys =\n            this.senderKeyStateStructure.senderMessageKeys || [];\n    }\n\n    SenderKeyState(senderKeyStateStructure) {\n        this.senderKeyStateStructure = senderKeyStateStructure;\n    }\n\n    getKeyId() {\n        return this.senderKeyStateStructure.senderKeyId;\n    }\n\n    getSenderChainKey() {\n        return new SenderChainKey(\n            this.senderKeyStateStructure.senderChainKey.iteration,\n            this.senderKeyStateStructure.senderChainKey.seed\n        );\n    }\n\n    setSenderChainKey(chainKey) {\n        const senderChainKeyStructure = protobufs.SenderChainKey.create({\n            iteration: chainKey.getIteration(),\n            seed: chainKey.getSeed(),\n        });\n        this.senderKeyStateStructure.senderChainKey = senderChainKeyStructure;\n    }\n\n    getSigningKeyPublic() {\n        return typeof this.senderKeyStateStructure.senderSigningKey.public === 'string' ?\n            Buffer.from(this.senderKeyStateStructure.senderSigningKey.public, 'base64') :\n            this.senderKeyStateStructure.senderSigningKey.public;\n    }\n\n    getSigningKeyPrivate() {\n        return typeof this.senderKeyStateStructure.senderSigningKey.private === 'string' ?\n            Buffer.from(this.senderKeyStateStructure.senderSigningKey.private, 'base64') :\n            this.senderKeyStateStructure.senderSigningKey.private;\n    }\n\n    hasSenderMessageKey(iteration) {\n        const list = this.senderKeyStateStructure.senderMessageKeys;\n        for (let o = 0; o < list.length; o++) {\n            const senderMessageKey = list[o];\n            if (senderMessageKey.iteration === iteration) return true;\n        }\n        return false;\n    }\n\n    addSenderMessageKey(senderMessageKey) {\n        const senderMessageKeyStructure = protobufs.SenderKeyStateStructure.create({\n            iteration: senderMessageKey.getIteration(),\n            seed: senderMessageKey.getSeed(),\n        });\n        this.senderKeyStateStructure.senderMessageKeys.push(senderMessageKeyStructure);\n\n        if (this.senderKeyStateStructure.senderMessageKeys.length > this.MAX_MESSAGE_KEYS) {\n            this.senderKeyStateStructure.senderMessageKeys.shift();\n        }\n    }\n\n    removeSenderMessageKey(iteration) {\n        let result = null;\n\n        this.senderKeyStateStructure.senderMessageKeys = this.senderKeyStateStructure.senderMessageKeys.filter(\n            senderMessageKey => {\n                if (senderMessageKey.iteration === iteration) result = senderMessageKey;\n                return senderMessageKey.iteration !== iteration;\n            }\n        );\n\n        if (result != null) {\n            return new SenderMessageKey(result.iteration, result.seed);\n        }\n        return null;\n    }\n\n    getStructure() {\n        return this.senderKeyStateStructure;\n    }\n}\n\nmodule.exports = SenderKeyState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}