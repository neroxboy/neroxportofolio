{"ast":null,"code":"'use strict';\n\nconst curveJs = require('curve25519-js');\nconst nodeCrypto = require('crypto');\n// from: https://github.com/digitalbazaar/x25519-key-agreement-key-2019/blob/master/lib/crypto.js\nconst PUBLIC_KEY_DER_PREFIX = Buffer.from([48, 42, 48, 5, 6, 3, 43, 101, 110, 3, 33, 0]);\nconst PRIVATE_KEY_DER_PREFIX = Buffer.from([48, 46, 2, 1, 0, 48, 5, 6, 3, 43, 101, 110, 4, 34, 4, 32]);\nfunction validatePrivKey(privKey) {\n  if (privKey === undefined) {\n    throw new Error(\"Undefined private key\");\n  }\n  if (!(privKey instanceof Buffer)) {\n    throw new Error(`Invalid private key type: ${privKey.constructor.name}`);\n  }\n  if (privKey.byteLength != 32) {\n    throw new Error(`Incorrect private key length: ${privKey.byteLength}`);\n  }\n}\nfunction scrubPubKeyFormat(pubKey) {\n  if (!(pubKey instanceof Buffer)) {\n    throw new Error(`Invalid public key type: ${pubKey.constructor.name}`);\n  }\n  if (pubKey === undefined || (pubKey.byteLength != 33 || pubKey[0] != 5) && pubKey.byteLength != 32) {\n    throw new Error(\"Invalid public key\");\n  }\n  if (pubKey.byteLength == 33) {\n    return pubKey.slice(1);\n  } else {\n    console.error(\"WARNING: Expected pubkey of length 33, please report the ST and client that generated the pubkey\");\n    return pubKey;\n  }\n}\nexports.generateKeyPair = function () {\n  if (typeof nodeCrypto.generateKeyPairSync === 'function') {\n    const {\n      publicKey: publicDerBytes,\n      privateKey: privateDerBytes\n    } = nodeCrypto.generateKeyPairSync('x25519', {\n      publicKeyEncoding: {\n        format: 'der',\n        type: 'spki'\n      },\n      privateKeyEncoding: {\n        format: 'der',\n        type: 'pkcs8'\n      }\n    });\n    // 33 bytes\n    // first byte = 5 (version byte)\n    const pubKey = publicDerBytes.slice(PUBLIC_KEY_DER_PREFIX.length - 1, PUBLIC_KEY_DER_PREFIX.length + 32);\n    pubKey[0] = 5;\n    const privKey = privateDerBytes.slice(PRIVATE_KEY_DER_PREFIX.length, PRIVATE_KEY_DER_PREFIX.length + 32);\n    return {\n      pubKey,\n      privKey\n    };\n  } else {\n    const keyPair = curveJs.generateKeyPair(nodeCrypto.randomBytes(32));\n    return {\n      privKey: Buffer.from(keyPair.private),\n      pubKey: Buffer.from(keyPair.public)\n    };\n  }\n};\nexports.calculateAgreement = function (pubKey, privKey) {\n  pubKey = scrubPubKeyFormat(pubKey);\n  validatePrivKey(privKey);\n  if (!pubKey || pubKey.byteLength != 32) {\n    throw new Error(\"Invalid public key\");\n  }\n  if (typeof nodeCrypto.diffieHellman === 'function') {\n    const nodePrivateKey = nodeCrypto.createPrivateKey({\n      key: Buffer.concat([PRIVATE_KEY_DER_PREFIX, privKey]),\n      format: 'der',\n      type: 'pkcs8'\n    });\n    const nodePublicKey = nodeCrypto.createPublicKey({\n      key: Buffer.concat([PUBLIC_KEY_DER_PREFIX, pubKey]),\n      format: 'der',\n      type: 'spki'\n    });\n    return nodeCrypto.diffieHellman({\n      privateKey: nodePrivateKey,\n      publicKey: nodePublicKey\n    });\n  } else {\n    const secret = curveJs.sharedKey(privKey, pubKey);\n    return Buffer.from(secret);\n  }\n};\nexports.calculateSignature = function (privKey, message) {\n  validatePrivKey(privKey);\n  if (!message) {\n    throw new Error(\"Invalid message\");\n  }\n  return Buffer.from(curveJs.sign(privKey, message));\n};\nexports.verifySignature = function (pubKey, msg, sig) {\n  pubKey = scrubPubKeyFormat(pubKey);\n  if (!pubKey || pubKey.byteLength != 32) {\n    throw new Error(\"Invalid public key\");\n  }\n  if (!msg) {\n    throw new Error(\"Invalid message\");\n  }\n  if (!sig || sig.byteLength != 64) {\n    throw new Error(\"Invalid signature\");\n  }\n  return curveJs.verify(pubKey, msg, sig);\n};","map":{"version":3,"names":["curveJs","require","nodeCrypto","PUBLIC_KEY_DER_PREFIX","Buffer","from","PRIVATE_KEY_DER_PREFIX","validatePrivKey","privKey","undefined","Error","constructor","name","byteLength","scrubPubKeyFormat","pubKey","slice","console","error","exports","generateKeyPair","generateKeyPairSync","publicKey","publicDerBytes","privateKey","privateDerBytes","publicKeyEncoding","format","type","privateKeyEncoding","length","keyPair","randomBytes","private","public","calculateAgreement","diffieHellman","nodePrivateKey","createPrivateKey","key","concat","nodePublicKey","createPublicKey","secret","sharedKey","calculateSignature","message","sign","verifySignature","msg","sig","verify"],"sources":["C:/Users/vanitas/node_modules/libsignal/src/curve.js"],"sourcesContent":["\n'use strict';\n\nconst curveJs = require('curve25519-js');\nconst nodeCrypto = require('crypto');\n// from: https://github.com/digitalbazaar/x25519-key-agreement-key-2019/blob/master/lib/crypto.js\nconst PUBLIC_KEY_DER_PREFIX = Buffer.from([\n    48, 42, 48, 5, 6, 3, 43, 101, 110, 3, 33, 0\n]);\n  \nconst PRIVATE_KEY_DER_PREFIX = Buffer.from([\n    48, 46, 2, 1, 0, 48, 5, 6, 3, 43, 101, 110, 4, 34, 4, 32\n]);\n\nfunction validatePrivKey(privKey) {\n    if (privKey === undefined) {\n        throw new Error(\"Undefined private key\");\n    }\n    if (!(privKey instanceof Buffer)) {\n        throw new Error(`Invalid private key type: ${privKey.constructor.name}`);\n    }\n    if (privKey.byteLength != 32) {\n        throw new Error(`Incorrect private key length: ${privKey.byteLength}`);\n    }\n}\n\nfunction scrubPubKeyFormat(pubKey) {\n    if (!(pubKey instanceof Buffer)) {\n        throw new Error(`Invalid public key type: ${pubKey.constructor.name}`);\n    }\n    if (pubKey === undefined || ((pubKey.byteLength != 33 || pubKey[0] != 5) && pubKey.byteLength != 32)) {\n        throw new Error(\"Invalid public key\");\n    }\n    if (pubKey.byteLength == 33) {\n        return pubKey.slice(1);\n    } else {\n        console.error(\"WARNING: Expected pubkey of length 33, please report the ST and client that generated the pubkey\");\n        return pubKey;\n    }\n}\n\nexports.generateKeyPair = function() {\n    if(typeof nodeCrypto.generateKeyPairSync === 'function') {\n        const {publicKey: publicDerBytes, privateKey: privateDerBytes} = nodeCrypto.generateKeyPairSync(\n            'x25519',\n            {\n                publicKeyEncoding: { format: 'der', type: 'spki' },\n                privateKeyEncoding: { format: 'der', type: 'pkcs8' }\n            }\n        );\n        // 33 bytes\n        // first byte = 5 (version byte)\n        const pubKey = publicDerBytes.slice(PUBLIC_KEY_DER_PREFIX.length-1, PUBLIC_KEY_DER_PREFIX.length + 32);\n        pubKey[0] = 5;\n    \n        const privKey = privateDerBytes.slice(PRIVATE_KEY_DER_PREFIX.length, PRIVATE_KEY_DER_PREFIX.length + 32);\n    \n        return {\n            pubKey,\n            privKey\n        };\n    } else {\n        const keyPair = curveJs.generateKeyPair(nodeCrypto.randomBytes(32));\n        return {\n            privKey: Buffer.from(keyPair.private),\n            pubKey: Buffer.from(keyPair.public),\n        };\n    }\n};\n\nexports.calculateAgreement = function(pubKey, privKey) {\n    pubKey = scrubPubKeyFormat(pubKey);\n    validatePrivKey(privKey);\n    if (!pubKey || pubKey.byteLength != 32) {\n        throw new Error(\"Invalid public key\");\n    }\n\n    if(typeof nodeCrypto.diffieHellman === 'function') {\n        const nodePrivateKey = nodeCrypto.createPrivateKey({\n            key: Buffer.concat([PRIVATE_KEY_DER_PREFIX, privKey]),\n            format: 'der',\n            type: 'pkcs8'\n        });\n        const nodePublicKey = nodeCrypto.createPublicKey({\n            key: Buffer.concat([PUBLIC_KEY_DER_PREFIX, pubKey]),\n            format: 'der',\n            type: 'spki'\n        });\n        \n        return nodeCrypto.diffieHellman({\n            privateKey: nodePrivateKey,\n            publicKey: nodePublicKey,\n        });\n    } else {\n        const secret = curveJs.sharedKey(privKey, pubKey);\n        return Buffer.from(secret);\n    }\n};\n\nexports.calculateSignature = function(privKey, message) {\n    validatePrivKey(privKey);\n    if (!message) {\n        throw new Error(\"Invalid message\");\n    }\n    return Buffer.from(curveJs.sign(privKey, message));\n};\n\nexports.verifySignature = function(pubKey, msg, sig) {\n    pubKey = scrubPubKeyFormat(pubKey);\n    if (!pubKey || pubKey.byteLength != 32) {\n        throw new Error(\"Invalid public key\");\n    }\n    if (!msg) {\n        throw new Error(\"Invalid message\");\n    }\n    if (!sig || sig.byteLength != 64) {\n        throw new Error(\"Invalid signature\");\n    }\n    return curveJs.verify(pubKey, msg, sig);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}