{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://xiph.org/ogg/doc/framing.html\n\nAAAAAAAA AAAAAAAA AAAAAAAA AAAAAAAA BBBBBBBB 00000CDE\n\n(LSB)                                                             (MSB)\nFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\nGGGGGGGG GGGGGGGG GGGGGGGG GGGGGGGG\nHHHHHHHH HHHHHHHH HHHHHHHH HHHHHHHH\nIIIIIIII IIIIIIII IIIIIIII IIIIIIII\n\nJJJJJJJJ\nLLLLLLLL...\n\nOgg Page Header\nLetter  Length (bits)  Description\nA   32  0x4f676753, \"OggS\"\nB   8   stream_structure_version\nC   1   (0 no, 1 yes) last page of logical bitstream (eos)\nD   1   (0 no, 1 yes) first page of logical bitstream (bos)\nE   1   (0 no, 1 yes) continued packet\n\nF   64  absolute granule position\nG   32  stream serial number\nH   32  page sequence no\nI   32  page checksum\nJ   8   Number of page segments in the segment table\nL   n   Segment table (n=page_segments+26).\n        Segment table values sum to the total length of the packet.\n        Last value is always < 0xFF. Last lacing value will be 0x00 if evenly divisible by 0xFF.\n        \n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport { absoluteGranulePosition, isContinuedPacket, isFirstPage, isLastPage, pageSequenceNumber, streamSerialNumber, length, pageChecksum, frameLength, streamStructureVersion, pageSegmentTable, pageSegmentBytes, buffer, subarray, readRawData, getHeader, uint8Array, dataView } from \"../../constants.js\";\nexport default class OggPageHeader {\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    const header = {};\n\n    // Must be at least 28 bytes.\n    let data = yield* codecParser[readRawData](28, readOffset);\n\n    // Bytes (1-4 of 28)\n    // Frame sync (must equal OggS): `AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA`:\n    if (data[0] !== 0x4f ||\n    // O\n    data[1] !== 0x67 ||\n    // g\n    data[2] !== 0x67 ||\n    // g\n    data[3] !== 0x53 //    S\n    ) {\n      return null;\n    }\n\n    // Byte (5 of 28)\n    // * `BBBBBBBB`: stream_structure_version\n    header[streamStructureVersion] = data[4];\n\n    // Byte (6 of 28)\n    // * `00000CDE`\n    // * `00000...`: All zeros\n    // * `.....C..`: (0 no, 1 yes) last page of logical bitstream (eos)\n    // * `......D.`: (0 no, 1 yes) first page of logical bitstream (bos)\n    // * `.......E`: (0 no, 1 yes) continued packet\n    const zeros = data[5] & 0b11111000;\n    if (zeros) return null;\n    header[isLastPage] = !!(data[5] & 0b00000100);\n    header[isFirstPage] = !!(data[5] & 0b00000010);\n    header[isContinuedPacket] = !!(data[5] & 0b00000001);\n    const view = new dataView(uint8Array.from(data[subarray](0, 28))[buffer]);\n\n    // Byte (7-14 of 28)\n    // * `FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF`\n    // * Absolute Granule Position\n\n    /**\n     * @todo Safari does not support getBigInt64, but it also doesn't support Ogg\n     */\n    try {\n      header[absoluteGranulePosition] = view.getBigInt64(6, true);\n    } catch {}\n\n    // Byte (15-18 of 28)\n    // * `GGGGGGGG|GGGGGGGG|GGGGGGGG|GGGGGGGG`\n    // * Stream Serial Number\n    header[streamSerialNumber] = view.getInt32(14, true);\n\n    // Byte (19-22 of 28)\n    // * `HHHHHHHH|HHHHHHHH|HHHHHHHH|HHHHHHHH`\n    // * Page Sequence Number\n    header[pageSequenceNumber] = view.getInt32(18, true);\n\n    // Byte (23-26 of 28)\n    // * `IIIIIIII|IIIIIIII|IIIIIIII|IIIIIIII`\n    // * Page Checksum\n    header[pageChecksum] = view.getInt32(22, true);\n\n    // Byte (27 of 28)\n    // * `JJJJJJJJ`: Number of page segments in the segment table\n    const pageSegmentTableLength = data[26];\n    header[length] = pageSegmentTableLength + 27;\n    data = yield* codecParser[readRawData](header[length], readOffset); // read in the page segment table\n\n    header[frameLength] = 0;\n    header[pageSegmentTable] = [];\n    header[pageSegmentBytes] = uint8Array.from(data[subarray](27, header[length]));\n    for (let i = 0, segmentLength = 0; i < pageSegmentTableLength; i++) {\n      const segmentByte = header[pageSegmentBytes][i];\n      header[frameLength] += segmentByte;\n      segmentLength += segmentByte;\n      if (segmentByte !== 0xff || i === pageSegmentTableLength - 1) {\n        header[pageSegmentTable].push(segmentLength);\n        segmentLength = 0;\n      }\n    }\n    return new OggPageHeader(header);\n  }\n\n  /**\n   * @private\n   * Call OggPageHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    headerStore.set(this, header);\n    this[absoluteGranulePosition] = header[absoluteGranulePosition];\n    this[isContinuedPacket] = header[isContinuedPacket];\n    this[isFirstPage] = header[isFirstPage];\n    this[isLastPage] = header[isLastPage];\n    this[pageSegmentTable] = header[pageSegmentTable];\n    this[pageSequenceNumber] = header[pageSequenceNumber];\n    this[pageChecksum] = header[pageChecksum];\n    this[streamSerialNumber] = header[streamSerialNumber];\n  }\n}","map":{"version":3,"names":["headerStore","absoluteGranulePosition","isContinuedPacket","isFirstPage","isLastPage","pageSequenceNumber","streamSerialNumber","length","pageChecksum","frameLength","streamStructureVersion","pageSegmentTable","pageSegmentBytes","buffer","subarray","readRawData","getHeader","uint8Array","dataView","OggPageHeader","codecParser","headerCache","readOffset","header","data","zeros","view","from","getBigInt64","getInt32","pageSegmentTableLength","i","segmentLength","segmentByte","push","constructor","set"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/containers/ogg/OggPageHeader.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://xiph.org/ogg/doc/framing.html\n\nAAAAAAAA AAAAAAAA AAAAAAAA AAAAAAAA BBBBBBBB 00000CDE\n\n(LSB)                                                             (MSB)\nFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\nGGGGGGGG GGGGGGGG GGGGGGGG GGGGGGGG\nHHHHHHHH HHHHHHHH HHHHHHHH HHHHHHHH\nIIIIIIII IIIIIIII IIIIIIII IIIIIIII\n\nJJJJJJJJ\nLLLLLLLL...\n\nOgg Page Header\nLetter  Length (bits)  Description\nA   32  0x4f676753, \"OggS\"\nB   8   stream_structure_version\nC   1   (0 no, 1 yes) last page of logical bitstream (eos)\nD   1   (0 no, 1 yes) first page of logical bitstream (bos)\nE   1   (0 no, 1 yes) continued packet\n\nF   64  absolute granule position\nG   32  stream serial number\nH   32  page sequence no\nI   32  page checksum\nJ   8   Number of page segments in the segment table\nL   n   Segment table (n=page_segments+26).\n        Segment table values sum to the total length of the packet.\n        Last value is always < 0xFF. Last lacing value will be 0x00 if evenly divisible by 0xFF.\n        \n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport {\n  absoluteGranulePosition,\n  isContinuedPacket,\n  isFirstPage,\n  isLastPage,\n  pageSequenceNumber,\n  streamSerialNumber,\n  length,\n  pageChecksum,\n  frameLength,\n  streamStructureVersion,\n  pageSegmentTable,\n  pageSegmentBytes,\n  buffer,\n  subarray,\n  readRawData,\n  getHeader,\n  uint8Array,\n  dataView,\n} from \"../../constants.js\";\n\nexport default class OggPageHeader {\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    const header = {};\n\n    // Must be at least 28 bytes.\n    let data = yield* codecParser[readRawData](28, readOffset);\n\n    // Bytes (1-4 of 28)\n    // Frame sync (must equal OggS): `AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA`:\n    if (\n      data[0] !== 0x4f || // O\n      data[1] !== 0x67 || // g\n      data[2] !== 0x67 || // g\n      data[3] !== 0x53 //    S\n    ) {\n      return null;\n    }\n\n    // Byte (5 of 28)\n    // * `BBBBBBBB`: stream_structure_version\n    header[streamStructureVersion] = data[4];\n\n    // Byte (6 of 28)\n    // * `00000CDE`\n    // * `00000...`: All zeros\n    // * `.....C..`: (0 no, 1 yes) last page of logical bitstream (eos)\n    // * `......D.`: (0 no, 1 yes) first page of logical bitstream (bos)\n    // * `.......E`: (0 no, 1 yes) continued packet\n    const zeros = data[5] & 0b11111000;\n    if (zeros) return null;\n\n    header[isLastPage] = !!(data[5] & 0b00000100);\n    header[isFirstPage] = !!(data[5] & 0b00000010);\n    header[isContinuedPacket] = !!(data[5] & 0b00000001);\n\n    const view = new dataView(uint8Array.from(data[subarray](0, 28))[buffer]);\n\n    // Byte (7-14 of 28)\n    // * `FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF`\n    // * Absolute Granule Position\n\n    /**\n     * @todo Safari does not support getBigInt64, but it also doesn't support Ogg\n     */\n    try {\n      header[absoluteGranulePosition] = view.getBigInt64(6, true);\n    } catch {}\n\n    // Byte (15-18 of 28)\n    // * `GGGGGGGG|GGGGGGGG|GGGGGGGG|GGGGGGGG`\n    // * Stream Serial Number\n    header[streamSerialNumber] = view.getInt32(14, true);\n\n    // Byte (19-22 of 28)\n    // * `HHHHHHHH|HHHHHHHH|HHHHHHHH|HHHHHHHH`\n    // * Page Sequence Number\n    header[pageSequenceNumber] = view.getInt32(18, true);\n\n    // Byte (23-26 of 28)\n    // * `IIIIIIII|IIIIIIII|IIIIIIII|IIIIIIII`\n    // * Page Checksum\n    header[pageChecksum] = view.getInt32(22, true);\n\n    // Byte (27 of 28)\n    // * `JJJJJJJJ`: Number of page segments in the segment table\n    const pageSegmentTableLength = data[26];\n    header[length] = pageSegmentTableLength + 27;\n\n    data = yield* codecParser[readRawData](header[length], readOffset); // read in the page segment table\n\n    header[frameLength] = 0;\n    header[pageSegmentTable] = [];\n    header[pageSegmentBytes] = uint8Array.from(\n      data[subarray](27, header[length]),\n    );\n\n    for (let i = 0, segmentLength = 0; i < pageSegmentTableLength; i++) {\n      const segmentByte = header[pageSegmentBytes][i];\n\n      header[frameLength] += segmentByte;\n      segmentLength += segmentByte;\n\n      if (segmentByte !== 0xff || i === pageSegmentTableLength - 1) {\n        header[pageSegmentTable].push(segmentLength);\n        segmentLength = 0;\n      }\n    }\n\n    return new OggPageHeader(header);\n  }\n\n  /**\n   * @private\n   * Call OggPageHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    headerStore.set(this, header);\n\n    this[absoluteGranulePosition] = header[absoluteGranulePosition];\n    this[isContinuedPacket] = header[isContinuedPacket];\n    this[isFirstPage] = header[isFirstPage];\n    this[isLastPage] = header[isLastPage];\n    this[pageSegmentTable] = header[pageSegmentTable];\n    this[pageSequenceNumber] = header[pageSequenceNumber];\n    this[pageChecksum] = header[pageChecksum];\n    this[streamSerialNumber] = header[streamSerialNumber];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}