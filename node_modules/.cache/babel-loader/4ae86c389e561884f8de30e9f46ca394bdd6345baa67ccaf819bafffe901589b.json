{"ast":null,"code":"const axios = require('axios');\nconst {\n  randomBytes\n} = require('crypto');\nconst {\n  generateMessageIDV2\n} = require('@whiskeysockets/baileys');\n\n// Fungsi untuk mengirimkan pesan AI\nconst replyAi = async (m, text, skybreaker) => {\n  try {\n    const gen = {\n      conversation: text,\n      messageContextInfo: {\n        messageSecret: randomBytes(32),\n        supportPayload: JSON.stringify({\n          version: 1,\n          is_ai_message: true,\n          should_show_system_message: true,\n          ticket_id: \"1669945700536053\"\n        })\n      }\n    };\n    const theArray = [{\n      attrs: {\n        biz_bot: '1'\n      },\n      tag: \"bot\"\n    }, {\n      attrs: {},\n      tag: \"biz\"\n    }];\n    skybreaker.relayMessage(m.chat, gen, {\n      messageId: generateMessageIDV2(skybreaker.user.id),\n      additionalNodes: theArray\n    });\n  } catch (error) {\n    console.error(\"Error saat membalas AI:\", error);\n  }\n};\n\n// Fungsi untuk membalas chat secara otomatis jika Auto AI aktif\nconst autoReplyAI = async (m, skybreaker) => {\n  try {\n    var _skybreaker$aiPrivate, _response$data;\n    // Pastikan fitur Auto AI aktif untuk pengirim dan objek sender ada\n    const sender = m.sender;\n    if (!sender || !skybreaker.aiPrivate || !skybreaker.aiPrivate[sender]) {\n      return; // Jika data pengirim tidak ditemukan, tidak lanjut\n    }\n    const isAutoAIActive = (_skybreaker$aiPrivate = skybreaker.aiPrivate[sender]) === null || _skybreaker$aiPrivate === void 0 ? void 0 : _skybreaker$aiPrivate.autoaipc;\n    if (!isAutoAIActive) {\n      console.log(`Fitur Auto AI tidak aktif untuk ${sender}`); // Log status\n      return; // Jika fitur Auto AI tidak aktif, keluar dari fungsi\n    }\n    const userInput = m.body; // Teks yang diminta oleh pengguna\n    if (!userInput) {\n      console.log(`Tidak ada input dari ${sender}`); // Log untuk memastikan input kosong\n      return; // Jika tidak ada input, keluar dari fungsi\n    }\n    const apiUrl = 'https://gemini-api-5k0h.onrender.com/gemini/chat'; // API URL untuk chat\n    const params = {\n      q: userInput\n    };\n\n    // Coba panggil API\n    const response = await axios.get(apiUrl, {\n      params\n    });\n\n    // Periksa apakah respons ada dan valid\n    const replyText = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.content) || 'Gagal mendapatkan respons AI.';\n\n    // Kirim respons AI otomatis\n    await replyAi(m, replyText, skybreaker);\n  } catch (error) {\n    // Error handling yang lebih baik dengan log yang lebih jelas\n    console.error(\"Error saat menghubungi API AI:\", error);\n    if (error.response) {\n      console.error(\"Detail respons error:\", error.response.data);\n    }\n    // Pastikan bot tetap memberi respons meski ada error\n    await replyAi(m, 'Terjadi kesalahan dalam menghubungi AI. Coba lagi nanti.', skybreaker); // Balas dengan pesan error kepada user\n  }\n};\n\n// Ekspor fungsi-fungsi ini agar dapat dipakai di file lain\nmodule.exports = {\n  autoReplyAI\n};","map":{"version":3,"names":["axios","require","randomBytes","generateMessageIDV2","replyAi","m","text","skybreaker","gen","conversation","messageContextInfo","messageSecret","supportPayload","JSON","stringify","version","is_ai_message","should_show_system_message","ticket_id","theArray","attrs","biz_bot","tag","relayMessage","chat","messageId","user","id","additionalNodes","error","console","autoReplyAI","_skybreaker$aiPrivate","_response$data","sender","aiPrivate","isAutoAIActive","autoaipc","log","userInput","body","apiUrl","params","q","response","get","replyText","data","content","module","exports"],"sources":["C:/Users/vanitas/Downloads/tesskil/src/autoReply.js"],"sourcesContent":["const axios = require('axios');\r\nconst { randomBytes } = require('crypto');\r\nconst { generateMessageIDV2 } = require('@whiskeysockets/baileys');\r\n\r\n// Fungsi untuk mengirimkan pesan AI\r\nconst replyAi = async (m, text, skybreaker) => {\r\n    try {\r\n        const gen = {\r\n            conversation: text,\r\n            messageContextInfo: {\r\n                messageSecret: randomBytes(32),\r\n                supportPayload: JSON.stringify({\r\n                    version: 1,\r\n                    is_ai_message: true,\r\n                    should_show_system_message: true,\r\n                    ticket_id: \"1669945700536053\",\r\n                }),\r\n            },\r\n        };\r\n\r\n        const theArray = [\r\n            { attrs: { biz_bot: '1' }, tag: \"bot\" },\r\n            { attrs: {}, tag: \"biz\" },\r\n        ];\r\n\r\n        skybreaker.relayMessage(m.chat, gen, {\r\n            messageId: generateMessageIDV2(skybreaker.user.id),\r\n            additionalNodes: theArray,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error saat membalas AI:\", error);\r\n    }\r\n};\r\n\r\n// Fungsi untuk membalas chat secara otomatis jika Auto AI aktif\r\nconst autoReplyAI = async (m, skybreaker) => {\r\n    try {\r\n        // Pastikan fitur Auto AI aktif untuk pengirim dan objek sender ada\r\n        const sender = m.sender;\r\n        if (!sender || !skybreaker.aiPrivate || !skybreaker.aiPrivate[sender]) {\r\n            return; // Jika data pengirim tidak ditemukan, tidak lanjut\r\n        }\r\n\r\n        const isAutoAIActive = skybreaker.aiPrivate[sender]?.autoaipc;\r\n        if (!isAutoAIActive) {\r\n            console.log(`Fitur Auto AI tidak aktif untuk ${sender}`); // Log status\r\n            return; // Jika fitur Auto AI tidak aktif, keluar dari fungsi\r\n        }\r\n\r\n        const userInput = m.body;  // Teks yang diminta oleh pengguna\r\n        if (!userInput) {\r\n            console.log(`Tidak ada input dari ${sender}`); // Log untuk memastikan input kosong\r\n            return; // Jika tidak ada input, keluar dari fungsi\r\n        }\r\n\r\n        const apiUrl = 'https://gemini-api-5k0h.onrender.com/gemini/chat'; // API URL untuk chat\r\n        const params = { q: userInput };\r\n\r\n        // Coba panggil API\r\n        const response = await axios.get(apiUrl, { params });\r\n\r\n        // Periksa apakah respons ada dan valid\r\n        const replyText = response.data?.content || 'Gagal mendapatkan respons AI.';\r\n\r\n        // Kirim respons AI otomatis\r\n        await replyAi(m, replyText, skybreaker); \r\n\r\n    } catch (error) {\r\n        // Error handling yang lebih baik dengan log yang lebih jelas\r\n        console.error(\"Error saat menghubungi API AI:\", error);\r\n        if (error.response) {\r\n            console.error(\"Detail respons error:\", error.response.data);\r\n        }\r\n        // Pastikan bot tetap memberi respons meski ada error\r\n        await replyAi(m, 'Terjadi kesalahan dalam menghubungi AI. Coba lagi nanti.', skybreaker); // Balas dengan pesan error kepada user\r\n    }\r\n};\r\n\r\n// Ekspor fungsi-fungsi ini agar dapat dipakai di file lain\r\nmodule.exports = {\r\n    autoReplyAI\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}