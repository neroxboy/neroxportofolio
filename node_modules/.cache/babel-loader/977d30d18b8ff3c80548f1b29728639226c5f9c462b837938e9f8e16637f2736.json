{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FactChunk = exports.Format = exports.WaveFormat = void 0;\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\n */\nvar WaveFormat;\n(function (WaveFormat) {\n  WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\";\n  // MPEG-4 and AAC Audio Types\n  WaveFormat[WaveFormat[\"ADPCM\"] = 2] = \"ADPCM\";\n  WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\n  WaveFormat[WaveFormat[\"MPEG_ADTS_AAC\"] = 5632] = \"MPEG_ADTS_AAC\";\n  WaveFormat[WaveFormat[\"MPEG_LOAS\"] = 5634] = \"MPEG_LOAS\";\n  WaveFormat[WaveFormat[\"RAW_AAC1\"] = 255] = \"RAW_AAC1\";\n  // Dolby Audio Types\n  WaveFormat[WaveFormat[\"DOLBY_AC3_SPDIF\"] = 146] = \"DOLBY_AC3_SPDIF\";\n  WaveFormat[WaveFormat[\"DVM\"] = 8192] = \"DVM\";\n  WaveFormat[WaveFormat[\"RAW_SPORT\"] = 576] = \"RAW_SPORT\";\n  WaveFormat[WaveFormat[\"ESST_AC3\"] = 577] = \"ESST_AC3\";\n  WaveFormat[WaveFormat[\"DRM\"] = 9] = \"DRM\";\n  WaveFormat[WaveFormat[\"DTS2\"] = 8193] = \"DTS2\";\n  WaveFormat[WaveFormat[\"MPEG\"] = 80] = \"MPEG\";\n})(WaveFormat = exports.WaveFormat || (exports.WaveFormat = {}));\n/**\n * format chunk; chunk-id is \"fmt \"\n * http://soundfile.sapp.org/doc/WaveFormat/\n */\nclass Format {\n  constructor(header) {\n    if (header.chunkSize < 16) throw new Error('Invalid chunk size');\n    this.len = header.chunkSize;\n  }\n  get(buf, off) {\n    return {\n      wFormatTag: buf.readUInt16LE(off),\n      nChannels: buf.readUInt16LE(off + 2),\n      nSamplesPerSec: buf.readUInt32LE(off + 4),\n      nAvgBytesPerSec: buf.readUInt32LE(off + 8),\n      nBlockAlign: buf.readUInt16LE(off + 12),\n      wBitsPerSample: buf.readUInt16LE(off + 14)\n    };\n  }\n}\nexports.Format = Format;\n/**\n * Fact chunk; chunk-id is \"fact\"\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\n */\nclass FactChunk {\n  constructor(header) {\n    if (header.chunkSize < 4) {\n      throw new Error('Invalid fact chunk size.');\n    }\n    this.len = header.chunkSize;\n  }\n  get(buf, off) {\n    return {\n      dwSampleLength: buf.readUInt32LE(off)\n    };\n  }\n}\nexports.FactChunk = FactChunk;","map":{"version":3,"names":["Object","defineProperty","exports","value","FactChunk","Format","WaveFormat","constructor","header","chunkSize","Error","len","get","buf","off","wFormatTag","readUInt16LE","nChannels","nSamplesPerSec","readUInt32LE","nAvgBytesPerSec","nBlockAlign","wBitsPerSample","dwSampleLength"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/wav/WaveChunk.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FactChunk = exports.Format = exports.WaveFormat = void 0;\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\n */\nvar WaveFormat;\n(function (WaveFormat) {\n    WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\";\n    // MPEG-4 and AAC Audio Types\n    WaveFormat[WaveFormat[\"ADPCM\"] = 2] = \"ADPCM\";\n    WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\n    WaveFormat[WaveFormat[\"MPEG_ADTS_AAC\"] = 5632] = \"MPEG_ADTS_AAC\";\n    WaveFormat[WaveFormat[\"MPEG_LOAS\"] = 5634] = \"MPEG_LOAS\";\n    WaveFormat[WaveFormat[\"RAW_AAC1\"] = 255] = \"RAW_AAC1\";\n    // Dolby Audio Types\n    WaveFormat[WaveFormat[\"DOLBY_AC3_SPDIF\"] = 146] = \"DOLBY_AC3_SPDIF\";\n    WaveFormat[WaveFormat[\"DVM\"] = 8192] = \"DVM\";\n    WaveFormat[WaveFormat[\"RAW_SPORT\"] = 576] = \"RAW_SPORT\";\n    WaveFormat[WaveFormat[\"ESST_AC3\"] = 577] = \"ESST_AC3\";\n    WaveFormat[WaveFormat[\"DRM\"] = 9] = \"DRM\";\n    WaveFormat[WaveFormat[\"DTS2\"] = 8193] = \"DTS2\";\n    WaveFormat[WaveFormat[\"MPEG\"] = 80] = \"MPEG\";\n})(WaveFormat = exports.WaveFormat || (exports.WaveFormat = {}));\n/**\n * format chunk; chunk-id is \"fmt \"\n * http://soundfile.sapp.org/doc/WaveFormat/\n */\nclass Format {\n    constructor(header) {\n        if (header.chunkSize < 16)\n            throw new Error('Invalid chunk size');\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            wFormatTag: buf.readUInt16LE(off),\n            nChannels: buf.readUInt16LE(off + 2),\n            nSamplesPerSec: buf.readUInt32LE(off + 4),\n            nAvgBytesPerSec: buf.readUInt32LE(off + 8),\n            nBlockAlign: buf.readUInt16LE(off + 12),\n            wBitsPerSample: buf.readUInt16LE(off + 14)\n        };\n    }\n}\nexports.Format = Format;\n/**\n * Fact chunk; chunk-id is \"fact\"\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\n */\nclass FactChunk {\n    constructor(header) {\n        if (header.chunkSize < 4) {\n            throw new Error('Invalid fact chunk size.');\n        }\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            dwSampleLength: buf.readUInt32LE(off)\n        };\n    }\n}\nexports.FactChunk = FactChunk;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}