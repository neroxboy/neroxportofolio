{"ast":null,"code":"//const utils = require('../../common/utils');\nconst SenderKeyDistributionMessage = require('./sender_key_distribution_message');\nconst keyhelper = require(\"./keyhelper\");\nclass GroupSessionBuilder {\n  constructor(senderKeyStore) {\n    this.senderKeyStore = senderKeyStore;\n  }\n  async process(senderKeyName, senderKeyDistributionMessage) {\n    //console.log('GroupSessionBuilder process', senderKeyName, senderKeyDistributionMessage);\n    const senderKeyRecord = await this.senderKeyStore.loadSenderKey(senderKeyName);\n    senderKeyRecord.addSenderKeyState(senderKeyDistributionMessage.getId(), senderKeyDistributionMessage.getIteration(), senderKeyDistributionMessage.getChainKey(), senderKeyDistributionMessage.getSignatureKey());\n    await this.senderKeyStore.storeSenderKey(senderKeyName, senderKeyRecord);\n  }\n\n  // [{\"senderKeyId\":1742199468,\"senderChainKey\":{\"iteration\":0,\"seed\":\"yxMY9VFQcXEP34olRAcGCtsgx1XoKsHfDIh+1ea4HAQ=\"},\"senderSigningKey\":{\"public\":\"\"}}]\n  async create(senderKeyName) {\n    const senderKeyRecord = await this.senderKeyStore.loadSenderKey(senderKeyName);\n    //console.log('GroupSessionBuilder create session', senderKeyName, senderKeyRecord);\n\n    if (senderKeyRecord.isEmpty()) {\n      const keyId = keyhelper.generateSenderKeyId();\n      const senderKey = keyhelper.generateSenderKey();\n      const signingKey = keyhelper.generateSenderSigningKey();\n      senderKeyRecord.setSenderKeyState(keyId, 0, senderKey, signingKey);\n      await this.senderKeyStore.storeSenderKey(senderKeyName, senderKeyRecord);\n    }\n    const state = senderKeyRecord.getSenderKeyState();\n    return new SenderKeyDistributionMessage(state.getKeyId(), state.getSenderChainKey().getIteration(), state.getSenderChainKey().getSeed(), state.getSigningKeyPublic());\n  }\n}\nmodule.exports = GroupSessionBuilder;","map":{"version":3,"names":["SenderKeyDistributionMessage","require","keyhelper","GroupSessionBuilder","constructor","senderKeyStore","process","senderKeyName","senderKeyDistributionMessage","senderKeyRecord","loadSenderKey","addSenderKeyState","getId","getIteration","getChainKey","getSignatureKey","storeSenderKey","create","isEmpty","keyId","generateSenderKeyId","senderKey","generateSenderKey","signingKey","generateSenderSigningKey","setSenderKeyState","state","getSenderKeyState","getKeyId","getSenderChainKey","getSeed","getSigningKeyPublic","module","exports"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/WASignalGroup/group_session_builder.js"],"sourcesContent":["//const utils = require('../../common/utils');\nconst SenderKeyDistributionMessage = require('./sender_key_distribution_message');\n\nconst keyhelper = require(\"./keyhelper\");\nclass GroupSessionBuilder {\n  constructor(senderKeyStore) {\n    this.senderKeyStore = senderKeyStore;\n  }\n\n  async process(senderKeyName, senderKeyDistributionMessage) {\n    //console.log('GroupSessionBuilder process', senderKeyName, senderKeyDistributionMessage);\n    const senderKeyRecord = await this.senderKeyStore.loadSenderKey(senderKeyName);\n    senderKeyRecord.addSenderKeyState(\n      senderKeyDistributionMessage.getId(),\n      senderKeyDistributionMessage.getIteration(),\n      senderKeyDistributionMessage.getChainKey(),\n      senderKeyDistributionMessage.getSignatureKey()\n    );\n    await this.senderKeyStore.storeSenderKey(senderKeyName, senderKeyRecord);\n  }\n\n  // [{\"senderKeyId\":1742199468,\"senderChainKey\":{\"iteration\":0,\"seed\":\"yxMY9VFQcXEP34olRAcGCtsgx1XoKsHfDIh+1ea4HAQ=\"},\"senderSigningKey\":{\"public\":\"\"}}]\n  async create(senderKeyName) {\n    const senderKeyRecord = await this.senderKeyStore.loadSenderKey(senderKeyName);\n    //console.log('GroupSessionBuilder create session', senderKeyName, senderKeyRecord);\n\n    if (senderKeyRecord.isEmpty()) {\n      const keyId = keyhelper.generateSenderKeyId();\n      const senderKey = keyhelper.generateSenderKey();\n      const signingKey = keyhelper.generateSenderSigningKey();\n\n      senderKeyRecord.setSenderKeyState(keyId, 0, senderKey, signingKey);\n      await this.senderKeyStore.storeSenderKey(senderKeyName, senderKeyRecord);\n    }\n\n    const state = senderKeyRecord.getSenderKeyState();\n\n    return new SenderKeyDistributionMessage(\n      state.getKeyId(),\n      state.getSenderChainKey().getIteration(),\n      state.getSenderChainKey().getSeed(),\n      state.getSigningKeyPublic()\n    );\n  }\n}\nmodule.exports = GroupSessionBuilder;"],"mappings":"AAAA;AACA,MAAMA,4BAA4B,GAAGC,OAAO,CAAC,mCAAmC,CAAC;AAEjF,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,MAAME,mBAAmB,CAAC;EACxBC,WAAWA,CAACC,cAAc,EAAE;IAC1B,IAAI,CAACA,cAAc,GAAGA,cAAc;EACtC;EAEA,MAAMC,OAAOA,CAACC,aAAa,EAAEC,4BAA4B,EAAE;IACzD;IACA,MAAMC,eAAe,GAAG,MAAM,IAAI,CAACJ,cAAc,CAACK,aAAa,CAACH,aAAa,CAAC;IAC9EE,eAAe,CAACE,iBAAiB,CAC/BH,4BAA4B,CAACI,KAAK,CAAC,CAAC,EACpCJ,4BAA4B,CAACK,YAAY,CAAC,CAAC,EAC3CL,4BAA4B,CAACM,WAAW,CAAC,CAAC,EAC1CN,4BAA4B,CAACO,eAAe,CAAC,CAC/C,CAAC;IACD,MAAM,IAAI,CAACV,cAAc,CAACW,cAAc,CAACT,aAAa,EAAEE,eAAe,CAAC;EAC1E;;EAEA;EACA,MAAMQ,MAAMA,CAACV,aAAa,EAAE;IAC1B,MAAME,eAAe,GAAG,MAAM,IAAI,CAACJ,cAAc,CAACK,aAAa,CAACH,aAAa,CAAC;IAC9E;;IAEA,IAAIE,eAAe,CAACS,OAAO,CAAC,CAAC,EAAE;MAC7B,MAAMC,KAAK,GAAGjB,SAAS,CAACkB,mBAAmB,CAAC,CAAC;MAC7C,MAAMC,SAAS,GAAGnB,SAAS,CAACoB,iBAAiB,CAAC,CAAC;MAC/C,MAAMC,UAAU,GAAGrB,SAAS,CAACsB,wBAAwB,CAAC,CAAC;MAEvDf,eAAe,CAACgB,iBAAiB,CAACN,KAAK,EAAE,CAAC,EAAEE,SAAS,EAAEE,UAAU,CAAC;MAClE,MAAM,IAAI,CAAClB,cAAc,CAACW,cAAc,CAACT,aAAa,EAAEE,eAAe,CAAC;IAC1E;IAEA,MAAMiB,KAAK,GAAGjB,eAAe,CAACkB,iBAAiB,CAAC,CAAC;IAEjD,OAAO,IAAI3B,4BAA4B,CACrC0B,KAAK,CAACE,QAAQ,CAAC,CAAC,EAChBF,KAAK,CAACG,iBAAiB,CAAC,CAAC,CAAChB,YAAY,CAAC,CAAC,EACxCa,KAAK,CAACG,iBAAiB,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EACnCJ,KAAK,CAACK,mBAAmB,CAAC,CAC5B,CAAC;EACH;AACF;AACAC,MAAM,CAACC,OAAO,GAAG9B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}