{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHistoryMsg = exports.downloadAndProcessHistorySyncNotification = exports.processHistoryMessage = exports.downloadHistory = void 0;\nconst util_1 = require(\"util\");\nconst zlib_1 = require(\"zlib\");\nconst WAProto_1 = require(\"../../WAProto\");\nconst Types_1 = require(\"../Types\");\nconst WABinary_1 = require(\"../WABinary\");\nconst generics_1 = require(\"./generics\");\nconst messages_1 = require(\"./messages\");\nconst messages_media_1 = require(\"./messages-media\");\nconst inflatePromise = (0, util_1.promisify)(zlib_1.inflate);\nconst downloadHistory = async (msg, options) => {\n  const stream = await (0, messages_media_1.downloadContentFromMessage)(msg, 'md-msg-hist', {\n    options\n  });\n  const bufferArray = [];\n  for await (const chunk of stream) {\n    bufferArray.push(chunk);\n  }\n  let buffer = Buffer.concat(bufferArray);\n  // decompress buffer\n  buffer = await inflatePromise(buffer);\n  const syncData = WAProto_1.proto.HistorySync.decode(buffer);\n  return syncData;\n};\nexports.downloadHistory = downloadHistory;\nconst processHistoryMessage = item => {\n  var _a, _b, _c;\n  const messages = [];\n  const contacts = [];\n  const chats = [];\n  switch (item.syncType) {\n    case WAProto_1.proto.HistorySync.HistorySyncType.INITIAL_BOOTSTRAP:\n    case WAProto_1.proto.HistorySync.HistorySyncType.RECENT:\n    case WAProto_1.proto.HistorySync.HistorySyncType.FULL:\n    case WAProto_1.proto.HistorySync.HistorySyncType.ON_DEMAND:\n      for (const chat of item.conversations) {\n        contacts.push({\n          id: chat.id,\n          name: chat.name || undefined\n        });\n        const msgs = chat.messages || [];\n        delete chat.messages;\n        delete chat.archived;\n        delete chat.muteEndTime;\n        delete chat.pinned;\n        for (const item of msgs) {\n          const message = item.message;\n          messages.push(message);\n          if (!((_a = chat.messages) === null || _a === void 0 ? void 0 : _a.length)) {\n            // keep only the most recent message in the chat array\n            chat.messages = [{\n              message\n            }];\n          }\n          if (!message.key.fromMe && !chat.lastMessageRecvTimestamp) {\n            chat.lastMessageRecvTimestamp = (0, generics_1.toNumber)(message.messageTimestamp);\n          }\n          if ((message.messageStubType === Types_1.WAMessageStubType.BIZ_PRIVACY_MODE_TO_BSP || message.messageStubType === Types_1.WAMessageStubType.BIZ_PRIVACY_MODE_TO_FB) && ((_b = message.messageStubParameters) === null || _b === void 0 ? void 0 : _b[0])) {\n            contacts.push({\n              id: message.key.participant || message.key.remoteJid,\n              verifiedName: (_c = message.messageStubParameters) === null || _c === void 0 ? void 0 : _c[0]\n            });\n          }\n        }\n        if ((0, WABinary_1.isJidUser)(chat.id) && chat.readOnly && chat.archived) {\n          delete chat.readOnly;\n        }\n        chats.push({\n          ...chat\n        });\n      }\n      break;\n    case WAProto_1.proto.HistorySync.HistorySyncType.PUSH_NAME:\n      for (const c of item.pushnames) {\n        contacts.push({\n          id: c.id,\n          notify: c.pushname\n        });\n      }\n      break;\n  }\n  return {\n    chats,\n    contacts,\n    messages,\n    syncType: item.syncType,\n    progress: item.progress\n  };\n};\nexports.processHistoryMessage = processHistoryMessage;\nconst downloadAndProcessHistorySyncNotification = async (msg, options) => {\n  const historyMsg = await (0, exports.downloadHistory)(msg, options);\n  return (0, exports.processHistoryMessage)(historyMsg);\n};\nexports.downloadAndProcessHistorySyncNotification = downloadAndProcessHistorySyncNotification;\nconst getHistoryMsg = message => {\n  var _a;\n  const normalizedContent = !!message ? (0, messages_1.normalizeMessageContent)(message) : undefined;\n  const anyHistoryMsg = (_a = normalizedContent === null || normalizedContent === void 0 ? void 0 : normalizedContent.protocolMessage) === null || _a === void 0 ? void 0 : _a.historySyncNotification;\n  return anyHistoryMsg;\n};\nexports.getHistoryMsg = getHistoryMsg;","map":{"version":3,"names":["Object","defineProperty","exports","value","getHistoryMsg","downloadAndProcessHistorySyncNotification","processHistoryMessage","downloadHistory","util_1","require","zlib_1","WAProto_1","Types_1","WABinary_1","generics_1","messages_1","messages_media_1","inflatePromise","promisify","inflate","msg","options","stream","downloadContentFromMessage","bufferArray","chunk","push","buffer","Buffer","concat","syncData","proto","HistorySync","decode","item","_a","_b","_c","messages","contacts","chats","syncType","HistorySyncType","INITIAL_BOOTSTRAP","RECENT","FULL","ON_DEMAND","chat","conversations","id","name","undefined","msgs","archived","muteEndTime","pinned","message","length","key","fromMe","lastMessageRecvTimestamp","toNumber","messageTimestamp","messageStubType","WAMessageStubType","BIZ_PRIVACY_MODE_TO_BSP","BIZ_PRIVACY_MODE_TO_FB","messageStubParameters","participant","remoteJid","verifiedName","isJidUser","readOnly","PUSH_NAME","c","pushnames","notify","pushname","progress","historyMsg","normalizedContent","normalizeMessageContent","anyHistoryMsg","protocolMessage","historySyncNotification"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Utils/history.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getHistoryMsg = exports.downloadAndProcessHistorySyncNotification = exports.processHistoryMessage = exports.downloadHistory = void 0;\nconst util_1 = require(\"util\");\nconst zlib_1 = require(\"zlib\");\nconst WAProto_1 = require(\"../../WAProto\");\nconst Types_1 = require(\"../Types\");\nconst WABinary_1 = require(\"../WABinary\");\nconst generics_1 = require(\"./generics\");\nconst messages_1 = require(\"./messages\");\nconst messages_media_1 = require(\"./messages-media\");\nconst inflatePromise = (0, util_1.promisify)(zlib_1.inflate);\nconst downloadHistory = async (msg, options) => {\n    const stream = await (0, messages_media_1.downloadContentFromMessage)(msg, 'md-msg-hist', { options });\n    const bufferArray = [];\n    for await (const chunk of stream) {\n        bufferArray.push(chunk);\n    }\n    let buffer = Buffer.concat(bufferArray);\n    // decompress buffer\n    buffer = await inflatePromise(buffer);\n    const syncData = WAProto_1.proto.HistorySync.decode(buffer);\n    return syncData;\n};\nexports.downloadHistory = downloadHistory;\nconst processHistoryMessage = (item) => {\n    var _a, _b, _c;\n    const messages = [];\n    const contacts = [];\n    const chats = [];\n    switch (item.syncType) {\n        case WAProto_1.proto.HistorySync.HistorySyncType.INITIAL_BOOTSTRAP:\n        case WAProto_1.proto.HistorySync.HistorySyncType.RECENT:\n        case WAProto_1.proto.HistorySync.HistorySyncType.FULL:\n        case WAProto_1.proto.HistorySync.HistorySyncType.ON_DEMAND:\n            for (const chat of item.conversations) {\n                contacts.push({ id: chat.id, name: chat.name || undefined });\n                const msgs = chat.messages || [];\n                delete chat.messages;\n                delete chat.archived;\n                delete chat.muteEndTime;\n                delete chat.pinned;\n                for (const item of msgs) {\n                    const message = item.message;\n                    messages.push(message);\n                    if (!((_a = chat.messages) === null || _a === void 0 ? void 0 : _a.length)) {\n                        // keep only the most recent message in the chat array\n                        chat.messages = [{ message }];\n                    }\n                    if (!message.key.fromMe && !chat.lastMessageRecvTimestamp) {\n                        chat.lastMessageRecvTimestamp = (0, generics_1.toNumber)(message.messageTimestamp);\n                    }\n                    if ((message.messageStubType === Types_1.WAMessageStubType.BIZ_PRIVACY_MODE_TO_BSP\n                        || message.messageStubType === Types_1.WAMessageStubType.BIZ_PRIVACY_MODE_TO_FB)\n                        && ((_b = message.messageStubParameters) === null || _b === void 0 ? void 0 : _b[0])) {\n                        contacts.push({\n                            id: message.key.participant || message.key.remoteJid,\n                            verifiedName: (_c = message.messageStubParameters) === null || _c === void 0 ? void 0 : _c[0],\n                        });\n                    }\n                }\n                if ((0, WABinary_1.isJidUser)(chat.id) && chat.readOnly && chat.archived) {\n                    delete chat.readOnly;\n                }\n                chats.push({ ...chat });\n            }\n            break;\n        case WAProto_1.proto.HistorySync.HistorySyncType.PUSH_NAME:\n            for (const c of item.pushnames) {\n                contacts.push({ id: c.id, notify: c.pushname });\n            }\n            break;\n    }\n    return {\n        chats,\n        contacts,\n        messages,\n        syncType: item.syncType,\n        progress: item.progress\n    };\n};\nexports.processHistoryMessage = processHistoryMessage;\nconst downloadAndProcessHistorySyncNotification = async (msg, options) => {\n    const historyMsg = await (0, exports.downloadHistory)(msg, options);\n    return (0, exports.processHistoryMessage)(historyMsg);\n};\nexports.downloadAndProcessHistorySyncNotification = downloadAndProcessHistorySyncNotification;\nconst getHistoryMsg = (message) => {\n    var _a;\n    const normalizedContent = !!message ? (0, messages_1.normalizeMessageContent)(message) : undefined;\n    const anyHistoryMsg = (_a = normalizedContent === null || normalizedContent === void 0 ? void 0 : normalizedContent.protocolMessage) === null || _a === void 0 ? void 0 : _a.historySyncNotification;\n    return anyHistoryMsg;\n};\nexports.getHistoryMsg = getHistoryMsg;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}