{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { length, uint8Array } from \"./constants.js\";\nconst getCrcTable = (crcTable, crcInitialValueFunction, crcFunction) => {\n  for (let byte = 0; byte < crcTable[length]; byte++) {\n    let crc = crcInitialValueFunction(byte);\n    for (let bit = 8; bit > 0; bit--) crc = crcFunction(crc);\n    crcTable[byte] = crc;\n  }\n  return crcTable;\n};\nconst crc8Table = getCrcTable(new uint8Array(256), b => b, crc => crc & 0x80 ? 0x07 ^ crc << 1 : crc << 1);\nconst flacCrc16Table = [getCrcTable(new Uint16Array(256), b => b << 8, crc => crc << 1 ^ (crc & 1 << 15 ? 0x8005 : 0))];\nconst crc32Table = [getCrcTable(new Uint32Array(256), b => b, crc => crc >>> 1 ^ (crc & 1) * 0xedb88320)];\n\n// build crc tables\nfor (let i = 0; i < 15; i++) {\n  flacCrc16Table.push(new Uint16Array(256));\n  crc32Table.push(new Uint32Array(256));\n  for (let j = 0; j <= 0xff; j++) {\n    flacCrc16Table[i + 1][j] = flacCrc16Table[0][flacCrc16Table[i][j] >>> 8] ^ flacCrc16Table[i][j] << 8;\n    crc32Table[i + 1][j] = crc32Table[i][j] >>> 8 ^ crc32Table[0][crc32Table[i][j] & 0xff];\n  }\n}\nconst crc8 = data => {\n  let crc = 0;\n  const dataLength = data[length];\n  for (let i = 0; i !== dataLength; i++) crc = crc8Table[crc ^ data[i]];\n  return crc;\n};\nconst flacCrc16 = data => {\n  const dataLength = data[length];\n  const crcChunkSize = dataLength - 16;\n  let crc = 0;\n  let i = 0;\n  while (i <= crcChunkSize) {\n    crc ^= data[i++] << 8 | data[i++];\n    crc = flacCrc16Table[15][crc >> 8] ^ flacCrc16Table[14][crc & 0xff] ^ flacCrc16Table[13][data[i++]] ^ flacCrc16Table[12][data[i++]] ^ flacCrc16Table[11][data[i++]] ^ flacCrc16Table[10][data[i++]] ^ flacCrc16Table[9][data[i++]] ^ flacCrc16Table[8][data[i++]] ^ flacCrc16Table[7][data[i++]] ^ flacCrc16Table[6][data[i++]] ^ flacCrc16Table[5][data[i++]] ^ flacCrc16Table[4][data[i++]] ^ flacCrc16Table[3][data[i++]] ^ flacCrc16Table[2][data[i++]] ^ flacCrc16Table[1][data[i++]] ^ flacCrc16Table[0][data[i++]];\n  }\n  while (i !== dataLength) crc = (crc & 0xff) << 8 ^ flacCrc16Table[0][crc >> 8 ^ data[i++]];\n  return crc;\n};\nconst crc32Function = data => {\n  const dataLength = data[length];\n  const crcChunkSize = dataLength - 16;\n  let crc = 0;\n  let i = 0;\n  while (i <= crcChunkSize) crc = crc32Table[15][(data[i++] ^ crc) & 0xff] ^ crc32Table[14][(data[i++] ^ crc >>> 8) & 0xff] ^ crc32Table[13][(data[i++] ^ crc >>> 16) & 0xff] ^ crc32Table[12][data[i++] ^ crc >>> 24] ^ crc32Table[11][data[i++]] ^ crc32Table[10][data[i++]] ^ crc32Table[9][data[i++]] ^ crc32Table[8][data[i++]] ^ crc32Table[7][data[i++]] ^ crc32Table[6][data[i++]] ^ crc32Table[5][data[i++]] ^ crc32Table[4][data[i++]] ^ crc32Table[3][data[i++]] ^ crc32Table[2][data[i++]] ^ crc32Table[1][data[i++]] ^ crc32Table[0][data[i++]];\n  while (i !== dataLength) crc = crc32Table[0][(crc ^ data[i++]) & 0xff] ^ crc >>> 8;\n  return crc ^ -1;\n};\nconst concatBuffers = (...buffers) => {\n  const buffer = new uint8Array(buffers.reduce((acc, buf) => acc + buf[length], 0));\n  buffers.reduce((offset, buf) => {\n    buffer.set(buf, offset);\n    return offset + buf[length];\n  }, 0);\n  return buffer;\n};\nconst bytesToString = bytes => String.fromCharCode(...bytes);\n\n// prettier-ignore\nconst reverseTable = [0x0, 0x8, 0x4, 0xc, 0x2, 0xa, 0x6, 0xe, 0x1, 0x9, 0x5, 0xd, 0x3, 0xb, 0x7, 0xf];\nconst reverse = val => reverseTable[val & 0b1111] << 4 | reverseTable[val >> 4];\nclass BitReader {\n  constructor(data) {\n    this._data = data;\n    this._pos = data[length] * 8;\n  }\n  set position(position) {\n    this._pos = position;\n  }\n  get position() {\n    return this._pos;\n  }\n  read(bits) {\n    const byte = Math.floor(this._pos / 8);\n    const bit = this._pos % 8;\n    this._pos -= bits;\n    const window = (reverse(this._data[byte - 1]) << 8) + reverse(this._data[byte]);\n    return window >> 7 - bit & 0xff;\n  }\n}\nexport { crc8, flacCrc16, crc32Function, reverse, concatBuffers, bytesToString, BitReader };","map":{"version":3,"names":["length","uint8Array","getCrcTable","crcTable","crcInitialValueFunction","crcFunction","byte","crc","bit","crc8Table","b","flacCrc16Table","Uint16Array","crc32Table","Uint32Array","i","push","j","crc8","data","dataLength","flacCrc16","crcChunkSize","crc32Function","concatBuffers","buffers","buffer","reduce","acc","buf","offset","set","bytesToString","bytes","String","fromCharCode","reverseTable","reverse","val","BitReader","constructor","_data","_pos","position","read","bits","Math","floor","window"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/utilities.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { length, uint8Array } from \"./constants.js\";\n\nconst getCrcTable = (crcTable, crcInitialValueFunction, crcFunction) => {\n  for (let byte = 0; byte < crcTable[length]; byte++) {\n    let crc = crcInitialValueFunction(byte);\n\n    for (let bit = 8; bit > 0; bit--) crc = crcFunction(crc);\n\n    crcTable[byte] = crc;\n  }\n  return crcTable;\n};\n\nconst crc8Table = getCrcTable(\n  new uint8Array(256),\n  (b) => b,\n  (crc) => (crc & 0x80 ? 0x07 ^ (crc << 1) : crc << 1),\n);\n\nconst flacCrc16Table = [\n  getCrcTable(\n    new Uint16Array(256),\n    (b) => b << 8,\n    (crc) => (crc << 1) ^ (crc & (1 << 15) ? 0x8005 : 0),\n  ),\n];\n\nconst crc32Table = [\n  getCrcTable(\n    new Uint32Array(256),\n    (b) => b,\n    (crc) => (crc >>> 1) ^ ((crc & 1) * 0xedb88320),\n  ),\n];\n\n// build crc tables\nfor (let i = 0; i < 15; i++) {\n  flacCrc16Table.push(new Uint16Array(256));\n  crc32Table.push(new Uint32Array(256));\n\n  for (let j = 0; j <= 0xff; j++) {\n    flacCrc16Table[i + 1][j] =\n      flacCrc16Table[0][flacCrc16Table[i][j] >>> 8] ^\n      (flacCrc16Table[i][j] << 8);\n\n    crc32Table[i + 1][j] =\n      (crc32Table[i][j] >>> 8) ^ crc32Table[0][crc32Table[i][j] & 0xff];\n  }\n}\n\nconst crc8 = (data) => {\n  let crc = 0;\n  const dataLength = data[length];\n\n  for (let i = 0; i !== dataLength; i++) crc = crc8Table[crc ^ data[i]];\n\n  return crc;\n};\n\nconst flacCrc16 = (data) => {\n  const dataLength = data[length];\n  const crcChunkSize = dataLength - 16;\n  let crc = 0;\n  let i = 0;\n\n  while (i <= crcChunkSize) {\n    crc ^= (data[i++] << 8) | data[i++];\n    crc =\n      flacCrc16Table[15][crc >> 8] ^\n      flacCrc16Table[14][crc & 0xff] ^\n      flacCrc16Table[13][data[i++]] ^\n      flacCrc16Table[12][data[i++]] ^\n      flacCrc16Table[11][data[i++]] ^\n      flacCrc16Table[10][data[i++]] ^\n      flacCrc16Table[9][data[i++]] ^\n      flacCrc16Table[8][data[i++]] ^\n      flacCrc16Table[7][data[i++]] ^\n      flacCrc16Table[6][data[i++]] ^\n      flacCrc16Table[5][data[i++]] ^\n      flacCrc16Table[4][data[i++]] ^\n      flacCrc16Table[3][data[i++]] ^\n      flacCrc16Table[2][data[i++]] ^\n      flacCrc16Table[1][data[i++]] ^\n      flacCrc16Table[0][data[i++]];\n  }\n\n  while (i !== dataLength)\n    crc = ((crc & 0xff) << 8) ^ flacCrc16Table[0][(crc >> 8) ^ data[i++]];\n\n  return crc;\n};\n\nconst crc32Function = (data) => {\n  const dataLength = data[length];\n  const crcChunkSize = dataLength - 16;\n  let crc = 0;\n  let i = 0;\n\n  while (i <= crcChunkSize)\n    crc =\n      crc32Table[15][(data[i++] ^ crc) & 0xff] ^\n      crc32Table[14][(data[i++] ^ (crc >>> 8)) & 0xff] ^\n      crc32Table[13][(data[i++] ^ (crc >>> 16)) & 0xff] ^\n      crc32Table[12][data[i++] ^ (crc >>> 24)] ^\n      crc32Table[11][data[i++]] ^\n      crc32Table[10][data[i++]] ^\n      crc32Table[9][data[i++]] ^\n      crc32Table[8][data[i++]] ^\n      crc32Table[7][data[i++]] ^\n      crc32Table[6][data[i++]] ^\n      crc32Table[5][data[i++]] ^\n      crc32Table[4][data[i++]] ^\n      crc32Table[3][data[i++]] ^\n      crc32Table[2][data[i++]] ^\n      crc32Table[1][data[i++]] ^\n      crc32Table[0][data[i++]];\n\n  while (i !== dataLength)\n    crc = crc32Table[0][(crc ^ data[i++]) & 0xff] ^ (crc >>> 8);\n\n  return crc ^ -1;\n};\n\nconst concatBuffers = (...buffers) => {\n  const buffer = new uint8Array(\n    buffers.reduce((acc, buf) => acc + buf[length], 0),\n  );\n\n  buffers.reduce((offset, buf) => {\n    buffer.set(buf, offset);\n    return offset + buf[length];\n  }, 0);\n\n  return buffer;\n};\n\nconst bytesToString = (bytes) => String.fromCharCode(...bytes);\n\n// prettier-ignore\nconst reverseTable = [0x0,0x8,0x4,0xc,0x2,0xa,0x6,0xe,0x1,0x9,0x5,0xd,0x3,0xb,0x7,0xf];\nconst reverse = (val) =>\n  (reverseTable[val & 0b1111] << 4) | reverseTable[val >> 4];\n\nclass BitReader {\n  constructor(data) {\n    this._data = data;\n    this._pos = data[length] * 8;\n  }\n\n  set position(position) {\n    this._pos = position;\n  }\n\n  get position() {\n    return this._pos;\n  }\n\n  read(bits) {\n    const byte = Math.floor(this._pos / 8);\n    const bit = this._pos % 8;\n    this._pos -= bits;\n\n    const window =\n      (reverse(this._data[byte - 1]) << 8) + reverse(this._data[byte]);\n\n    return (window >> (7 - bit)) & 0xff;\n  }\n}\n\nexport {\n  crc8,\n  flacCrc16,\n  crc32Function,\n  reverse,\n  concatBuffers,\n  bytesToString,\n  BitReader,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}