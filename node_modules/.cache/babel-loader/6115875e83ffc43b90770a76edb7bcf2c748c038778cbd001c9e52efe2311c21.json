{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst cache_manager_1 = require(\"cache-manager\");\nconst WAProto_1 = require(\"../../WAProto\");\nconst Utils_1 = require(\"../Utils\");\nconst logger_1 = __importDefault(require(\"../Utils/logger\"));\nconst makeCacheManagerAuthState = async (store, sessionKey) => {\n  const defaultKey = file => `${sessionKey}:${file}`;\n  const databaseConn = await (0, cache_manager_1.caching)(store);\n  const writeData = async (file, data) => {\n    let ttl = undefined;\n    if (file === 'creds') {\n      ttl = 63115200; // 2 years\n    }\n    await databaseConn.set(defaultKey(file), JSON.stringify(data, Utils_1.BufferJSON.replacer), ttl);\n  };\n  const readData = async file => {\n    try {\n      const data = await databaseConn.get(defaultKey(file));\n      if (data) {\n        return JSON.parse(data, Utils_1.BufferJSON.reviver);\n      }\n      return null;\n    } catch (error) {\n      logger_1.default.error(error);\n      return null;\n    }\n  };\n  const removeData = async file => {\n    try {\n      return await databaseConn.del(defaultKey(file));\n    } catch (_a) {\n      logger_1.default.error(`Error removing ${file} from session ${sessionKey}`);\n    }\n  };\n  const clearState = async () => {\n    try {\n      const result = await databaseConn.store.keys(`${sessionKey}*`);\n      await Promise.all(result.map(async key => await databaseConn.del(key)));\n    } catch (err) {}\n  };\n  const creds = (await readData('creds')) || (0, Utils_1.initAuthCreds)();\n  return {\n    clearState,\n    saveCreds: () => writeData('creds', creds),\n    state: {\n      creds,\n      keys: {\n        get: async (type, ids) => {\n          const data = {};\n          await Promise.all(ids.map(async id => {\n            let value = await readData(`${type}-${id}`);\n            if (type === 'app-state-sync-key' && value) {\n              value = WAProto_1.proto.Message.AppStateSyncKeyData.fromObject(value);\n            }\n            data[id] = value;\n          }));\n          return data;\n        },\n        set: async data => {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const tasks = [];\n          for (const category in data) {\n            for (const id in data[category]) {\n              const value = data[category][id];\n              const key = `${category}-${id}`;\n              tasks.push(value ? writeData(key, value) : removeData(key));\n            }\n          }\n          await Promise.all(tasks);\n        }\n      }\n    }\n  };\n};\nexports.default = makeCacheManagerAuthState;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","cache_manager_1","require","WAProto_1","Utils_1","logger_1","makeCacheManagerAuthState","store","sessionKey","defaultKey","file","databaseConn","caching","writeData","data","ttl","undefined","set","JSON","stringify","BufferJSON","replacer","readData","get","parse","reviver","error","default","removeData","del","_a","clearState","result","keys","Promise","all","map","key","err","creds","initAuthCreds","saveCreds","state","type","ids","id","proto","Message","AppStateSyncKeyData","fromObject","tasks","category","push"],"sources":["C:/Users/vanitas/node_modules/@whiskeysockets/baileys/lib/Store/make-cache-manager-store.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cache_manager_1 = require(\"cache-manager\");\nconst WAProto_1 = require(\"../../WAProto\");\nconst Utils_1 = require(\"../Utils\");\nconst logger_1 = __importDefault(require(\"../Utils/logger\"));\nconst makeCacheManagerAuthState = async (store, sessionKey) => {\n    const defaultKey = (file) => `${sessionKey}:${file}`;\n    const databaseConn = await (0, cache_manager_1.caching)(store);\n    const writeData = async (file, data) => {\n        let ttl = undefined;\n        if (file === 'creds') {\n            ttl = 63115200; // 2 years\n        }\n        await databaseConn.set(defaultKey(file), JSON.stringify(data, Utils_1.BufferJSON.replacer), ttl);\n    };\n    const readData = async (file) => {\n        try {\n            const data = await databaseConn.get(defaultKey(file));\n            if (data) {\n                return JSON.parse(data, Utils_1.BufferJSON.reviver);\n            }\n            return null;\n        }\n        catch (error) {\n            logger_1.default.error(error);\n            return null;\n        }\n    };\n    const removeData = async (file) => {\n        try {\n            return await databaseConn.del(defaultKey(file));\n        }\n        catch (_a) {\n            logger_1.default.error(`Error removing ${file} from session ${sessionKey}`);\n        }\n    };\n    const clearState = async () => {\n        try {\n            const result = await databaseConn.store.keys(`${sessionKey}*`);\n            await Promise.all(result.map(async (key) => await databaseConn.del(key)));\n        }\n        catch (err) {\n        }\n    };\n    const creds = (await readData('creds')) || (0, Utils_1.initAuthCreds)();\n    return {\n        clearState,\n        saveCreds: () => writeData('creds', creds),\n        state: {\n            creds,\n            keys: {\n                get: async (type, ids) => {\n                    const data = {};\n                    await Promise.all(ids.map(async (id) => {\n                        let value = await readData(`${type}-${id}`);\n                        if (type === 'app-state-sync-key' && value) {\n                            value = WAProto_1.proto.Message.AppStateSyncKeyData.fromObject(value);\n                        }\n                        data[id] = value;\n                    }));\n                    return data;\n                },\n                set: async (data) => {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const tasks = [];\n                    for (const category in data) {\n                        for (const id in data[category]) {\n                            const value = data[category][id];\n                            const key = `${category}-${id}`;\n                            tasks.push(value ? writeData(key, value) : removeData(key));\n                        }\n                    }\n                    await Promise.all(tasks);\n                },\n            }\n        }\n    };\n};\nexports.default = makeCacheManagerAuthState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}