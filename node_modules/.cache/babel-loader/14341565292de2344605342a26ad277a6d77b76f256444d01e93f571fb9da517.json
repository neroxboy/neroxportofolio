{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Common = void 0;\nconst Token = require(\"token-types\");\nconst FourCC_1 = require(\"../common/FourCC\");\nclass Common {\n  constructor(header, isAifc) {\n    this.isAifc = isAifc;\n    const minimumChunkSize = isAifc ? 22 : 18;\n    if (header.chunkSize < minimumChunkSize) throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\n    this.len = header.chunkSize;\n  }\n  get(buf, off) {\n    // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n    const shift = buf.readUInt16BE(off + 8) - 16398;\n    const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\n    const res = {\n      numChannels: buf.readUInt16BE(off),\n      numSampleFrames: buf.readUInt32BE(off + 2),\n      sampleSize: buf.readUInt16BE(off + 6),\n      sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n    };\n    if (this.isAifc) {\n      res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\n      if (this.len > 22) {\n        const strLen = buf.readInt8(off + 22);\n        if (strLen > 0) {\n          const padding = (strLen + 1) % 2;\n          if (23 + strLen + padding === this.len) {\n            res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\n          } else {\n            throw new Error('Illegal pstring length');\n          }\n        } else {\n          res.compressionName = undefined;\n        }\n      }\n    } else {\n      res.compressionName = 'PCM';\n    }\n    return res;\n  }\n}\nexports.Common = Common;","map":{"version":3,"names":["Object","defineProperty","exports","value","Common","Token","require","FourCC_1","constructor","header","isAifc","minimumChunkSize","chunkSize","Error","len","get","buf","off","shift","readUInt16BE","baseSampleRate","res","numChannels","numSampleFrames","readUInt32BE","sampleSize","sampleRate","Math","abs","compressionType","FourCcToken","strLen","readInt8","padding","compressionName","StringType","undefined"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/aiff/AiffToken.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Common = void 0;\nconst Token = require(\"token-types\");\nconst FourCC_1 = require(\"../common/FourCC\");\nclass Common {\n    constructor(header, isAifc) {\n        this.isAifc = isAifc;\n        const minimumChunkSize = isAifc ? 22 : 18;\n        if (header.chunkSize < minimumChunkSize)\n            throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n        const shift = buf.readUInt16BE(off + 8) - 16398;\n        const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\n        const res = {\n            numChannels: buf.readUInt16BE(off),\n            numSampleFrames: buf.readUInt32BE(off + 2),\n            sampleSize: buf.readUInt16BE(off + 6),\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n        };\n        if (this.isAifc) {\n            res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\n            if (this.len > 22) {\n                const strLen = buf.readInt8(off + 22);\n                if (strLen > 0) {\n                    const padding = (strLen + 1) % 2;\n                    if (23 + strLen + padding === this.len) {\n                        res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\n                    }\n                    else {\n                        throw new Error('Illegal pstring length');\n                    }\n                }\n                else {\n                    res.compressionName = undefined;\n                }\n            }\n        }\n        else {\n            res.compressionName = 'PCM';\n        }\n        return res;\n    }\n}\nexports.Common = Common;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMF,MAAM,CAAC;EACTI,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;IACxB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,MAAMC,gBAAgB,GAAGD,MAAM,GAAG,EAAE,GAAG,EAAE;IACzC,IAAID,MAAM,CAACG,SAAS,GAAGD,gBAAgB,EACnC,MAAM,IAAIE,KAAK,CAAC,+CAA+CF,gBAAgB,EAAE,CAAC;IACtF,IAAI,CAACG,GAAG,GAAGL,MAAM,CAACG,SAAS;EAC/B;EACAG,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAE;IACV;IACA,MAAMC,KAAK,GAAGF,GAAG,CAACG,YAAY,CAACF,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;IAC/C,MAAMG,cAAc,GAAGJ,GAAG,CAACG,YAAY,CAACF,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;IACpD,MAAMI,GAAG,GAAG;MACRC,WAAW,EAAEN,GAAG,CAACG,YAAY,CAACF,GAAG,CAAC;MAClCM,eAAe,EAAEP,GAAG,CAACQ,YAAY,CAACP,GAAG,GAAG,CAAC,CAAC;MAC1CQ,UAAU,EAAET,GAAG,CAACG,YAAY,CAACF,GAAG,GAAG,CAAC,CAAC;MACrCS,UAAU,EAAER,KAAK,GAAG,CAAC,GAAGE,cAAc,IAAIO,IAAI,CAACC,GAAG,CAACV,KAAK,CAAC,GAAGE,cAAc,IAAIF;IAClF,CAAC;IACD,IAAI,IAAI,CAACR,MAAM,EAAE;MACbW,GAAG,CAACQ,eAAe,GAAGtB,QAAQ,CAACuB,WAAW,CAACf,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,EAAE,CAAC;MAC7D,IAAI,IAAI,CAACH,GAAG,GAAG,EAAE,EAAE;QACf,MAAMiB,MAAM,GAAGf,GAAG,CAACgB,QAAQ,CAACf,GAAG,GAAG,EAAE,CAAC;QACrC,IAAIc,MAAM,GAAG,CAAC,EAAE;UACZ,MAAME,OAAO,GAAG,CAACF,MAAM,GAAG,CAAC,IAAI,CAAC;UAChC,IAAI,EAAE,GAAGA,MAAM,GAAGE,OAAO,KAAK,IAAI,CAACnB,GAAG,EAAE;YACpCO,GAAG,CAACa,eAAe,GAAG,IAAI7B,KAAK,CAAC8B,UAAU,CAACJ,MAAM,EAAE,QAAQ,CAAC,CAAChB,GAAG,CAACC,GAAG,EAAEC,GAAG,GAAG,EAAE,CAAC;UACnF,CAAC,MACI;YACD,MAAM,IAAIJ,KAAK,CAAC,wBAAwB,CAAC;UAC7C;QACJ,CAAC,MACI;UACDQ,GAAG,CAACa,eAAe,GAAGE,SAAS;QACnC;MACJ;IACJ,CAAC,MACI;MACDf,GAAG,CAACa,eAAe,GAAG,KAAK;IAC/B;IACA,OAAOb,GAAG;EACd;AACJ;AACAnB,OAAO,CAACE,MAAM,GAAGA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}