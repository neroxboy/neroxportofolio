{"ast":null,"code":"import { WASMAudioDecoderCommon } from \"@wasm-audio-decoders/common\";\nimport EmscriptenWASM from \"./EmscriptenWasm.js\";\nexport default function OpusDecoder(options = {}) {\n  // static properties\n  if (!OpusDecoder.errors) {\n    // prettier-ignore\n    Object.defineProperties(OpusDecoder, {\n      errors: {\n        value: new Map([[-1, \"OPUS_BAD_ARG: One or more invalid/out of range arguments\"], [-2, \"OPUS_BUFFER_TOO_SMALL: Not enough bytes allocated in the buffer\"], [-3, \"OPUS_INTERNAL_ERROR: An internal error was detected\"], [-4, \"OPUS_INVALID_PACKET: The compressed data passed is corrupted\"], [-5, \"OPUS_UNIMPLEMENTED: Invalid/unsupported request number\"], [-6, \"OPUS_INVALID_STATE: An encoder or decoder structure is invalid or already freed\"], [-7, \"OPUS_ALLOC_FAIL: Memory allocation has failed\"]])\n      }\n    });\n  }\n\n  // injects dependencies when running as a web worker\n  // async\n  this._init = () => new this._WASMAudioDecoderCommon(this).instantiate(this._EmscriptenWASM, this._module).then(common => {\n    this._common = common;\n    this._inputBytes = 0;\n    this._outputSamples = 0;\n    this._frameNumber = 0;\n    this._input = this._common.allocateTypedArray(this._inputSize, Uint8Array);\n    this._output = this._common.allocateTypedArray(this._outputChannels * this._outputChannelSize, Float32Array);\n    const mapping = this._common.allocateTypedArray(this._channels, Uint8Array);\n    mapping.buf.set(this._channelMappingTable);\n    this._decoder = this._common.wasm.opus_frame_decoder_create(this._sampleRate, this._channels, this._streamCount, this._coupledStreamCount, mapping.ptr, this._preSkip, this._forceStereo);\n  });\n  Object.defineProperty(this, \"ready\", {\n    enumerable: true,\n    get: () => this._ready\n  });\n\n  // async\n  this.reset = () => {\n    this.free();\n    return this._init();\n  };\n  this.free = () => {\n    this._common.free();\n    this._common.wasm.opus_frame_decoder_destroy(this._decoder);\n    this._common.wasm.free(this._decoder);\n  };\n  this._decode = opusFrame => {\n    if (!(opusFrame instanceof Uint8Array)) throw Error(\"Data to decode must be Uint8Array. Instead got \" + typeof opusFrame);\n    this._input.buf.set(opusFrame);\n    let samplesDecoded = this._common.wasm.opus_frame_decode_float_deinterleaved(this._decoder, this._input.ptr, opusFrame.length, this._output.ptr);\n    let error;\n    if (samplesDecoded < 0) {\n      error = \"libopus \" + samplesDecoded + \" \" + (OpusDecoder.errors.get(samplesDecoded) || \"Unknown Error\");\n      console.error(error);\n      samplesDecoded = 0;\n    }\n    return {\n      outputBuffer: this._common.getOutputChannels(this._output.buf, this._outputChannels, samplesDecoded),\n      samplesDecoded: samplesDecoded,\n      error: error\n    };\n  };\n  this.decodeFrame = opusFrame => {\n    let errors = [];\n    const decoded = this._decode(opusFrame);\n    if (decoded.error) this._common.addError(errors, decoded.error, opusFrame.length, this._frameNumber, this._inputBytes, this._outputSamples);\n    this._frameNumber++;\n    this._inputBytes += opusFrame.length;\n    this._outputSamples += decoded.samplesDecoded;\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(errors, [decoded.outputBuffer], this._outputChannels, decoded.samplesDecoded, this._sampleRate);\n  };\n  this.decodeFrames = opusFrames => {\n    let outputBuffers = [],\n      errors = [],\n      samplesDecoded = 0,\n      i = 0;\n    while (i < opusFrames.length) {\n      const opusFrame = opusFrames[i++];\n      const decoded = this._decode(opusFrame);\n      outputBuffers.push(decoded.outputBuffer);\n      samplesDecoded += decoded.samplesDecoded;\n      if (decoded.error) this._common.addError(errors, decoded.error, opusFrame.length, this._frameNumber, this._inputBytes, this._outputSamples);\n      this._frameNumber++;\n      this._inputBytes += opusFrame.length;\n      this._outputSamples += decoded.samplesDecoded;\n    }\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(errors, outputBuffers, this._outputChannels, samplesDecoded, this._sampleRate);\n  };\n\n  // injects dependencies when running as a web worker\n  this._isWebWorker = OpusDecoder.isWebWorker;\n  this._WASMAudioDecoderCommon = OpusDecoder.WASMAudioDecoderCommon || WASMAudioDecoderCommon;\n  this._EmscriptenWASM = OpusDecoder.EmscriptenWASM || EmscriptenWASM;\n  this._module = OpusDecoder.module;\n  const MAX_FORCE_STEREO_CHANNELS = 8;\n  const isNumber = param => typeof param === \"number\";\n  const sampleRate = options.sampleRate;\n  const channels = options.channels;\n  const streamCount = options.streamCount;\n  const coupledStreamCount = options.coupledStreamCount;\n  const channelMappingTable = options.channelMappingTable;\n  const preSkip = options.preSkip;\n  const forceStereo = options.forceStereo ? 1 : 0;\n\n  // channel mapping family >= 1\n  if (channels > 2 && (!isNumber(streamCount) || !isNumber(coupledStreamCount) || !Array.isArray(channelMappingTable))) {\n    throw new Error(\"Invalid Opus Decoder Options for multichannel decoding.\");\n  }\n\n  // libopus sample rate\n  this._sampleRate = [8e3, 12e3, 16e3, 24e3, 48e3].includes(sampleRate) ? sampleRate : 48000;\n\n  // channel mapping family 0\n  this._channels = isNumber(channels) ? channels : 2;\n  this._streamCount = isNumber(streamCount) ? streamCount : 1;\n  this._coupledStreamCount = isNumber(coupledStreamCount) ? coupledStreamCount : this._channels - 1;\n  this._channelMappingTable = channelMappingTable || (this._channels === 2 ? [0, 1] : [0]);\n  this._preSkip = preSkip || 0;\n  this._forceStereo = channels <= MAX_FORCE_STEREO_CHANNELS && channels != 2 ? forceStereo : 0;\n  this._inputSize = 32000 * 0.12 * this._channels; // 256kbs per channel\n  this._outputChannelSize = 120 * 48;\n  this._outputChannels = this._forceStereo ? 2 : this._channels;\n  this._ready = this._init();\n  return this;\n}","map":{"version":3,"names":["WASMAudioDecoderCommon","EmscriptenWASM","OpusDecoder","options","errors","Object","defineProperties","value","Map","_init","_WASMAudioDecoderCommon","instantiate","_EmscriptenWASM","_module","then","common","_common","_inputBytes","_outputSamples","_frameNumber","_input","allocateTypedArray","_inputSize","Uint8Array","_output","_outputChannels","_outputChannelSize","Float32Array","mapping","_channels","buf","set","_channelMappingTable","_decoder","wasm","opus_frame_decoder_create","_sampleRate","_streamCount","_coupledStreamCount","ptr","_preSkip","_forceStereo","defineProperty","enumerable","get","_ready","reset","free","opus_frame_decoder_destroy","_decode","opusFrame","Error","samplesDecoded","opus_frame_decode_float_deinterleaved","length","error","console","outputBuffer","getOutputChannels","decodeFrame","decoded","addError","getDecodedAudioMultiChannel","decodeFrames","opusFrames","outputBuffers","i","push","_isWebWorker","isWebWorker","module","MAX_FORCE_STEREO_CHANNELS","isNumber","param","sampleRate","channels","streamCount","coupledStreamCount","channelMappingTable","preSkip","forceStereo","Array","isArray","includes"],"sources":["C:/Users/vanitas/node_modules/opus-decoder/src/OpusDecoder.js"],"sourcesContent":["import { WASMAudioDecoderCommon } from \"@wasm-audio-decoders/common\";\n\nimport EmscriptenWASM from \"./EmscriptenWasm.js\";\n\nexport default function OpusDecoder(options = {}) {\n  // static properties\n  if (!OpusDecoder.errors) {\n    // prettier-ignore\n    Object.defineProperties(OpusDecoder, {\n      errors: {\n        value: new Map([\n          [-1, \"OPUS_BAD_ARG: One or more invalid/out of range arguments\"],\n          [-2, \"OPUS_BUFFER_TOO_SMALL: Not enough bytes allocated in the buffer\"],\n          [-3, \"OPUS_INTERNAL_ERROR: An internal error was detected\"],\n          [-4, \"OPUS_INVALID_PACKET: The compressed data passed is corrupted\"],\n          [-5, \"OPUS_UNIMPLEMENTED: Invalid/unsupported request number\"],\n          [-6, \"OPUS_INVALID_STATE: An encoder or decoder structure is invalid or already freed\"],\n          [-7, \"OPUS_ALLOC_FAIL: Memory allocation has failed\"],\n        ]),\n      },\n    });\n  }\n\n  // injects dependencies when running as a web worker\n  // async\n  this._init = () =>\n    new this._WASMAudioDecoderCommon(this)\n      .instantiate(this._EmscriptenWASM, this._module)\n      .then((common) => {\n        this._common = common;\n\n        this._inputBytes = 0;\n        this._outputSamples = 0;\n        this._frameNumber = 0;\n\n        this._input = this._common.allocateTypedArray(\n          this._inputSize,\n          Uint8Array,\n        );\n\n        this._output = this._common.allocateTypedArray(\n          this._outputChannels * this._outputChannelSize,\n          Float32Array,\n        );\n\n        const mapping = this._common.allocateTypedArray(\n          this._channels,\n          Uint8Array,\n        );\n\n        mapping.buf.set(this._channelMappingTable);\n\n        this._decoder = this._common.wasm.opus_frame_decoder_create(\n          this._sampleRate,\n          this._channels,\n          this._streamCount,\n          this._coupledStreamCount,\n          mapping.ptr,\n          this._preSkip,\n          this._forceStereo,\n        );\n      });\n\n  Object.defineProperty(this, \"ready\", {\n    enumerable: true,\n    get: () => this._ready,\n  });\n\n  // async\n  this.reset = () => {\n    this.free();\n    return this._init();\n  };\n\n  this.free = () => {\n    this._common.free();\n    this._common.wasm.opus_frame_decoder_destroy(this._decoder);\n    this._common.wasm.free(this._decoder);\n  };\n\n  this._decode = (opusFrame) => {\n    if (!(opusFrame instanceof Uint8Array))\n      throw Error(\n        \"Data to decode must be Uint8Array. Instead got \" + typeof opusFrame,\n      );\n\n    this._input.buf.set(opusFrame);\n\n    let samplesDecoded =\n      this._common.wasm.opus_frame_decode_float_deinterleaved(\n        this._decoder,\n        this._input.ptr,\n        opusFrame.length,\n        this._output.ptr,\n      );\n\n    let error;\n\n    if (samplesDecoded < 0) {\n      error =\n        \"libopus \" +\n        samplesDecoded +\n        \" \" +\n        (OpusDecoder.errors.get(samplesDecoded) || \"Unknown Error\");\n\n      console.error(error);\n      samplesDecoded = 0;\n    }\n\n    return {\n      outputBuffer: this._common.getOutputChannels(\n        this._output.buf,\n        this._outputChannels,\n        samplesDecoded,\n      ),\n      samplesDecoded: samplesDecoded,\n      error: error,\n    };\n  };\n\n  this.decodeFrame = (opusFrame) => {\n    let errors = [];\n\n    const decoded = this._decode(opusFrame);\n\n    if (decoded.error)\n      this._common.addError(\n        errors,\n        decoded.error,\n        opusFrame.length,\n        this._frameNumber,\n        this._inputBytes,\n        this._outputSamples,\n      );\n\n    this._frameNumber++;\n    this._inputBytes += opusFrame.length;\n    this._outputSamples += decoded.samplesDecoded;\n\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(\n      errors,\n      [decoded.outputBuffer],\n      this._outputChannels,\n      decoded.samplesDecoded,\n      this._sampleRate,\n    );\n  };\n\n  this.decodeFrames = (opusFrames) => {\n    let outputBuffers = [],\n      errors = [],\n      samplesDecoded = 0,\n      i = 0;\n\n    while (i < opusFrames.length) {\n      const opusFrame = opusFrames[i++];\n      const decoded = this._decode(opusFrame);\n\n      outputBuffers.push(decoded.outputBuffer);\n      samplesDecoded += decoded.samplesDecoded;\n\n      if (decoded.error)\n        this._common.addError(\n          errors,\n          decoded.error,\n          opusFrame.length,\n          this._frameNumber,\n          this._inputBytes,\n          this._outputSamples,\n        );\n\n      this._frameNumber++;\n      this._inputBytes += opusFrame.length;\n      this._outputSamples += decoded.samplesDecoded;\n    }\n\n    return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(\n      errors,\n      outputBuffers,\n      this._outputChannels,\n      samplesDecoded,\n      this._sampleRate,\n    );\n  };\n\n  // injects dependencies when running as a web worker\n  this._isWebWorker = OpusDecoder.isWebWorker;\n  this._WASMAudioDecoderCommon =\n    OpusDecoder.WASMAudioDecoderCommon || WASMAudioDecoderCommon;\n  this._EmscriptenWASM = OpusDecoder.EmscriptenWASM || EmscriptenWASM;\n  this._module = OpusDecoder.module;\n\n  const MAX_FORCE_STEREO_CHANNELS = 8;\n  const isNumber = (param) => typeof param === \"number\";\n\n  const sampleRate = options.sampleRate;\n  const channels = options.channels;\n  const streamCount = options.streamCount;\n  const coupledStreamCount = options.coupledStreamCount;\n  const channelMappingTable = options.channelMappingTable;\n  const preSkip = options.preSkip;\n  const forceStereo = options.forceStereo ? 1 : 0;\n\n  // channel mapping family >= 1\n  if (\n    channels > 2 &&\n    (!isNumber(streamCount) ||\n      !isNumber(coupledStreamCount) ||\n      !Array.isArray(channelMappingTable))\n  ) {\n    throw new Error(\"Invalid Opus Decoder Options for multichannel decoding.\");\n  }\n\n  // libopus sample rate\n  this._sampleRate = [8e3, 12e3, 16e3, 24e3, 48e3].includes(sampleRate)\n    ? sampleRate\n    : 48000;\n\n  // channel mapping family 0\n  this._channels = isNumber(channels) ? channels : 2;\n  this._streamCount = isNumber(streamCount) ? streamCount : 1;\n  this._coupledStreamCount = isNumber(coupledStreamCount)\n    ? coupledStreamCount\n    : this._channels - 1;\n  this._channelMappingTable =\n    channelMappingTable || (this._channels === 2 ? [0, 1] : [0]);\n  this._preSkip = preSkip || 0;\n\n  this._forceStereo =\n    channels <= MAX_FORCE_STEREO_CHANNELS && channels != 2 ? forceStereo : 0;\n\n  this._inputSize = 32000 * 0.12 * this._channels; // 256kbs per channel\n  this._outputChannelSize = 120 * 48;\n  this._outputChannels = this._forceStereo ? 2 : this._channels;\n\n  this._ready = this._init();\n\n  return this;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}