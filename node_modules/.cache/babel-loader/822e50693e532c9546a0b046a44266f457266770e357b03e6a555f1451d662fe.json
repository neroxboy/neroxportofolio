{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WavPackParser = void 0;\nconst Token = require(\"token-types\");\nconst APEv2Parser_1 = require(\"../apev2/APEv2Parser\");\nconst FourCC_1 = require(\"../common/FourCC\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst WavPackToken_1 = require(\"./WavPackToken\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)('music-metadata:parser:WavPack');\n/**\n * WavPack Parser\n */\nclass WavPackParser extends BasicParser_1.BasicParser {\n  async parse() {\n    this.audioDataSize = 0;\n    // First parse all WavPack blocks\n    await this.parseWavPackBlocks();\n    // try to parse APEv2 header\n    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n  }\n  async parseWavPackBlocks() {\n    do {\n      const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\n      if (blockId !== 'wvpk') break;\n      const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\n      if (header.BlockID !== 'wvpk') throw new Error('Invalid WavPack Block-ID');\n      debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\n      if (header.blockIndex === 0 && !this.metadata.format.container) {\n        this.metadata.setFormat('container', 'WavPack');\n        this.metadata.setFormat('lossless', !header.flags.isHybrid);\n        // tagTypes: this.type,\n        this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n        if (!header.flags.isDSD) {\n          // In case isDSD, these values will ne set in ID_DSD_BLOCK\n          this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n          this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n        }\n        this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n        this.metadata.setFormat('numberOfSamples', header.totalSamples);\n        this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n      }\n      const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\n      await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n      if (header.blockSamples > 0) {\n        this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n      }\n    } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\n    this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n  }\n  /**\n   * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n   * @param remainingLength\n   */\n  async parseMetadataSubBlock(header, remainingLength) {\n    while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\n      const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\n      const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n      const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n      await this.tokenizer.readBuffer(data);\n      debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n      switch (id.functionId) {\n        case 0x0:\n          // ID_DUMMY: could be used to pad WavPack blocks\n          break;\n        case 0xe:\n          // ID_DSD_BLOCK\n          debug('ID_DSD_BLOCK');\n          // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n          const mp = 1 << data.readUInt8(0);\n          const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n          if (!header.flags.isDSD) throw new Error('Only expect DSD block if DSD-flag is set');\n          this.metadata.setFormat('sampleRate', samplingRate);\n          this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n          break;\n        case 0x24:\n          // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n          debug('ID_ALT_TRAILER: trailer for non-wav files');\n          break;\n        case 0x26:\n          // ID_MD5_CHECKSUM\n          this.metadata.setFormat('audioMD5', data);\n          break;\n        case 0x2f:\n          // ID_BLOCK_CHECKSUM\n          debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\n          break;\n        default:\n          debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n          break;\n      }\n      remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n      debug(`remainingLength=${remainingLength}`);\n      if (id.isOddSize) this.tokenizer.ignore(1);\n    }\n    if (remainingLength !== 0) throw new Error('metadata-sub-block should fit it remaining length');\n  }\n}\nexports.WavPackParser = WavPackParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","WavPackParser","Token","require","APEv2Parser_1","FourCC_1","BasicParser_1","WavPackToken_1","debug_1","debug","default","BasicParser","parse","audioDataSize","parseWavPackBlocks","APEv2Parser","tryParseApeHeader","metadata","tokenizer","options","blockId","peekToken","FourCcToken","header","readToken","WavPack","BlockHeaderToken","BlockID","Error","blockIndex","len","format","container","setFormat","flags","isHybrid","bitsPerSample","isDSD","samplingRate","totalSamples","isMono","ignoreBytes","blockSize","parseMetadataSubBlock","ignore","blockSamples","fileInfo","size","position","duration","remainingLength","MetadataIdToken","id","dataSizeInWords","readNumber","largeBlock","UINT24_LE","UINT8","data","Buffer","alloc","isOddSize","readBuffer","functionId","toString","length","mp","readUInt8"],"sources":["C:/Users/vanitas/node_modules/music-metadata/lib/wavpack/WavPackParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WavPackParser = void 0;\nconst Token = require(\"token-types\");\nconst APEv2Parser_1 = require(\"../apev2/APEv2Parser\");\nconst FourCC_1 = require(\"../common/FourCC\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst WavPackToken_1 = require(\"./WavPackToken\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)('music-metadata:parser:WavPack');\n/**\n * WavPack Parser\n */\nclass WavPackParser extends BasicParser_1.BasicParser {\n    async parse() {\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\n            if (header.BlockID !== 'wvpk')\n                throw new Error('Invalid WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\n            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\n        this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param remainingLength\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << data.readUInt8(0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    if (!header.flags.isDSD)\n                        throw new Error('Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remainingLength}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        if (remainingLength !== 0)\n            throw new Error('metadata-sub-block should fit it remaining length');\n    }\n}\nexports.WavPackParser = WavPackParser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}