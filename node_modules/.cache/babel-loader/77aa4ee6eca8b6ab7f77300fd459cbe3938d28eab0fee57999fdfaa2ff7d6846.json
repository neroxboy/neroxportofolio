{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore, frameStore } from \"../../globals.js\";\nimport { codecFrames, rawData, absoluteGranulePosition, crc32, duration, isContinuedPacket, isFirstPage, isLastPage, pageSequenceNumber, samples, streamSerialNumber, length, pageChecksum, frameLength, subarray, readRawData, getFrame, getHeader } from \"../../constants.js\";\nimport Frame from \"../Frame.js\";\nimport OggPageHeader from \"./OggPageHeader.js\";\nexport default class OggPage extends Frame {\n  static *[getFrame](codecParser, headerCache, readOffset) {\n    const header = yield* OggPageHeader[getHeader](codecParser, headerCache, readOffset);\n    if (header) {\n      const frameLengthValue = headerStore.get(header)[frameLength];\n      const headerLength = headerStore.get(header)[length];\n      const totalLength = headerLength + frameLengthValue;\n      const rawDataValue = (yield* codecParser[readRawData](totalLength, 0))[subarray](0, totalLength);\n      const frame = rawDataValue[subarray](headerLength, totalLength);\n      return new OggPage(header, frame, rawDataValue);\n    } else {\n      return null;\n    }\n  }\n  constructor(header, frame, rawDataValue) {\n    super(header, frame);\n    frameStore.get(this)[length] = rawDataValue[length];\n    this[codecFrames] = [];\n    this[rawData] = rawDataValue;\n    this[absoluteGranulePosition] = header[absoluteGranulePosition];\n    this[crc32] = header[pageChecksum];\n    this[duration] = 0;\n    this[isContinuedPacket] = header[isContinuedPacket];\n    this[isFirstPage] = header[isFirstPage];\n    this[isLastPage] = header[isLastPage];\n    this[pageSequenceNumber] = header[pageSequenceNumber];\n    this[samples] = 0;\n    this[streamSerialNumber] = header[streamSerialNumber];\n  }\n}","map":{"version":3,"names":["headerStore","frameStore","codecFrames","rawData","absoluteGranulePosition","crc32","duration","isContinuedPacket","isFirstPage","isLastPage","pageSequenceNumber","samples","streamSerialNumber","length","pageChecksum","frameLength","subarray","readRawData","getFrame","getHeader","Frame","OggPageHeader","OggPage","codecParser","headerCache","readOffset","header","frameLengthValue","get","headerLength","totalLength","rawDataValue","frame","constructor"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/containers/ogg/OggPage.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore, frameStore } from \"../../globals.js\";\nimport {\n  codecFrames,\n  rawData,\n  absoluteGranulePosition,\n  crc32,\n  duration,\n  isContinuedPacket,\n  isFirstPage,\n  isLastPage,\n  pageSequenceNumber,\n  samples,\n  streamSerialNumber,\n  length,\n  pageChecksum,\n  frameLength,\n  subarray,\n  readRawData,\n  getFrame,\n  getHeader,\n} from \"../../constants.js\";\n\nimport Frame from \"../Frame.js\";\nimport OggPageHeader from \"./OggPageHeader.js\";\n\nexport default class OggPage extends Frame {\n  static *[getFrame](codecParser, headerCache, readOffset) {\n    const header = yield* OggPageHeader[getHeader](\n      codecParser,\n      headerCache,\n      readOffset,\n    );\n\n    if (header) {\n      const frameLengthValue = headerStore.get(header)[frameLength];\n      const headerLength = headerStore.get(header)[length];\n      const totalLength = headerLength + frameLengthValue;\n\n      const rawDataValue = (yield* codecParser[readRawData](totalLength, 0))[\n        subarray\n      ](0, totalLength);\n\n      const frame = rawDataValue[subarray](headerLength, totalLength);\n\n      return new OggPage(header, frame, rawDataValue);\n    } else {\n      return null;\n    }\n  }\n\n  constructor(header, frame, rawDataValue) {\n    super(header, frame);\n\n    frameStore.get(this)[length] = rawDataValue[length];\n\n    this[codecFrames] = [];\n    this[rawData] = rawDataValue;\n    this[absoluteGranulePosition] = header[absoluteGranulePosition];\n    this[crc32] = header[pageChecksum];\n    this[duration] = 0;\n    this[isContinuedPacket] = header[isContinuedPacket];\n    this[isFirstPage] = header[isFirstPage];\n    this[isLastPage] = header[isLastPage];\n    this[pageSequenceNumber] = header[pageSequenceNumber];\n    this[samples] = 0;\n    this[streamSerialNumber] = header[streamSerialNumber];\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,EAAEC,UAAU,QAAQ,kBAAkB;AAC1D,SACEC,WAAW,EACXC,OAAO,EACPC,uBAAuB,EACvBC,KAAK,EACLC,QAAQ,EACRC,iBAAiB,EACjBC,WAAW,EACXC,UAAU,EACVC,kBAAkB,EAClBC,OAAO,EACPC,kBAAkB,EAClBC,MAAM,EACNC,YAAY,EACZC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXC,QAAQ,EACRC,SAAS,QACJ,oBAAoB;AAE3B,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,aAAa,MAAM,oBAAoB;AAE9C,eAAe,MAAMC,OAAO,SAASF,KAAK,CAAC;EACzC,SAASF,QAAQ,EAAEK,WAAW,EAAEC,WAAW,EAAEC,UAAU,EAAE;IACvD,MAAMC,MAAM,GAAG,OAAOL,aAAa,CAACF,SAAS,CAAC,CAC5CI,WAAW,EACXC,WAAW,EACXC,UACF,CAAC;IAED,IAAIC,MAAM,EAAE;MACV,MAAMC,gBAAgB,GAAG3B,WAAW,CAAC4B,GAAG,CAACF,MAAM,CAAC,CAACX,WAAW,CAAC;MAC7D,MAAMc,YAAY,GAAG7B,WAAW,CAAC4B,GAAG,CAACF,MAAM,CAAC,CAACb,MAAM,CAAC;MACpD,MAAMiB,WAAW,GAAGD,YAAY,GAAGF,gBAAgB;MAEnD,MAAMI,YAAY,GAAG,CAAC,OAAOR,WAAW,CAACN,WAAW,CAAC,CAACa,WAAW,EAAE,CAAC,CAAC,EACnEd,QAAQ,CACT,CAAC,CAAC,EAAEc,WAAW,CAAC;MAEjB,MAAME,KAAK,GAAGD,YAAY,CAACf,QAAQ,CAAC,CAACa,YAAY,EAAEC,WAAW,CAAC;MAE/D,OAAO,IAAIR,OAAO,CAACI,MAAM,EAAEM,KAAK,EAAED,YAAY,CAAC;IACjD,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;EAEAE,WAAWA,CAACP,MAAM,EAAEM,KAAK,EAAED,YAAY,EAAE;IACvC,KAAK,CAACL,MAAM,EAAEM,KAAK,CAAC;IAEpB/B,UAAU,CAAC2B,GAAG,CAAC,IAAI,CAAC,CAACf,MAAM,CAAC,GAAGkB,YAAY,CAAClB,MAAM,CAAC;IAEnD,IAAI,CAACX,WAAW,CAAC,GAAG,EAAE;IACtB,IAAI,CAACC,OAAO,CAAC,GAAG4B,YAAY;IAC5B,IAAI,CAAC3B,uBAAuB,CAAC,GAAGsB,MAAM,CAACtB,uBAAuB,CAAC;IAC/D,IAAI,CAACC,KAAK,CAAC,GAAGqB,MAAM,CAACZ,YAAY,CAAC;IAClC,IAAI,CAACR,QAAQ,CAAC,GAAG,CAAC;IAClB,IAAI,CAACC,iBAAiB,CAAC,GAAGmB,MAAM,CAACnB,iBAAiB,CAAC;IACnD,IAAI,CAACC,WAAW,CAAC,GAAGkB,MAAM,CAAClB,WAAW,CAAC;IACvC,IAAI,CAACC,UAAU,CAAC,GAAGiB,MAAM,CAACjB,UAAU,CAAC;IACrC,IAAI,CAACC,kBAAkB,CAAC,GAAGgB,MAAM,CAAChB,kBAAkB,CAAC;IACrD,IAAI,CAACC,OAAO,CAAC,GAAG,CAAC;IACjB,IAAI,CAACC,kBAAkB,CAAC,GAAGc,MAAM,CAACd,kBAAkB,CAAC;EACvD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}