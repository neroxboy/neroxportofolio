{"ast":null,"code":"/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore, headerStore } from \"../globals.js\";\nimport { sampleRate, length, frameNumber, header, samples, duration, totalBytesOut, totalSamples, totalDuration, frameLength, subarray, readRawData, getFrame, getHeader } from \"../constants.js\";\nimport Frame from \"../containers/Frame.js\";\nexport default class CodecFrame extends Frame {\n  static *[getFrame](Header, Frame, codecParser, headerCache, readOffset) {\n    const headerValue = yield* Header[getHeader](codecParser, headerCache, readOffset);\n    if (headerValue) {\n      const frameLengthValue = headerStore.get(headerValue)[frameLength];\n      const samplesValue = headerStore.get(headerValue)[samples];\n      const frame = (yield* codecParser[readRawData](frameLengthValue, readOffset))[subarray](0, frameLengthValue);\n      return new Frame(headerValue, frame, samplesValue);\n    } else {\n      return null;\n    }\n  }\n  constructor(headerValue, dataValue, samplesValue) {\n    super(headerValue, dataValue);\n    this[header] = headerValue;\n    this[samples] = samplesValue;\n    this[duration] = samplesValue / headerValue[sampleRate] * 1000;\n    this[frameNumber] = null;\n    this[totalBytesOut] = null;\n    this[totalSamples] = null;\n    this[totalDuration] = null;\n    frameStore.get(this)[length] = dataValue[length];\n  }\n}","map":{"version":3,"names":["frameStore","headerStore","sampleRate","length","frameNumber","header","samples","duration","totalBytesOut","totalSamples","totalDuration","frameLength","subarray","readRawData","getFrame","getHeader","Frame","CodecFrame","Header","codecParser","headerCache","readOffset","headerValue","frameLengthValue","get","samplesValue","frame","constructor","dataValue"],"sources":["C:/Users/vanitas/node_modules/codec-parser/src/codecs/CodecFrame.js"],"sourcesContent":["/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore, headerStore } from \"../globals.js\";\nimport {\n  sampleRate,\n  length,\n  frameNumber,\n  header,\n  samples,\n  duration,\n  totalBytesOut,\n  totalSamples,\n  totalDuration,\n  frameLength,\n  subarray,\n  readRawData,\n  getFrame,\n  getHeader,\n} from \"../constants.js\";\nimport Frame from \"../containers/Frame.js\";\n\nexport default class CodecFrame extends Frame {\n  static *[getFrame](Header, Frame, codecParser, headerCache, readOffset) {\n    const headerValue = yield* Header[getHeader](\n      codecParser,\n      headerCache,\n      readOffset,\n    );\n\n    if (headerValue) {\n      const frameLengthValue = headerStore.get(headerValue)[frameLength];\n      const samplesValue = headerStore.get(headerValue)[samples];\n\n      const frame = (yield* codecParser[readRawData](\n        frameLengthValue,\n        readOffset,\n      ))[subarray](0, frameLengthValue);\n\n      return new Frame(headerValue, frame, samplesValue);\n    } else {\n      return null;\n    }\n  }\n\n  constructor(headerValue, dataValue, samplesValue) {\n    super(headerValue, dataValue);\n\n    this[header] = headerValue;\n    this[samples] = samplesValue;\n    this[duration] = (samplesValue / headerValue[sampleRate]) * 1000;\n    this[frameNumber] = null;\n    this[totalBytesOut] = null;\n    this[totalSamples] = null;\n    this[totalDuration] = null;\n\n    frameStore.get(this)[length] = dataValue[length];\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,EAAEC,WAAW,QAAQ,eAAe;AACvD,SACEC,UAAU,EACVC,MAAM,EACNC,WAAW,EACXC,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,aAAa,EACbC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXC,QAAQ,EACRC,SAAS,QACJ,iBAAiB;AACxB,OAAOC,KAAK,MAAM,wBAAwB;AAE1C,eAAe,MAAMC,UAAU,SAASD,KAAK,CAAC;EAC5C,SAASF,QAAQ,EAAEI,MAAM,EAAEF,KAAK,EAAEG,WAAW,EAAEC,WAAW,EAAEC,UAAU,EAAE;IACtE,MAAMC,WAAW,GAAG,OAAOJ,MAAM,CAACH,SAAS,CAAC,CAC1CI,WAAW,EACXC,WAAW,EACXC,UACF,CAAC;IAED,IAAIC,WAAW,EAAE;MACf,MAAMC,gBAAgB,GAAGtB,WAAW,CAACuB,GAAG,CAACF,WAAW,CAAC,CAACX,WAAW,CAAC;MAClE,MAAMc,YAAY,GAAGxB,WAAW,CAACuB,GAAG,CAACF,WAAW,CAAC,CAAChB,OAAO,CAAC;MAE1D,MAAMoB,KAAK,GAAG,CAAC,OAAOP,WAAW,CAACN,WAAW,CAAC,CAC5CU,gBAAgB,EAChBF,UACF,CAAC,EAAET,QAAQ,CAAC,CAAC,CAAC,EAAEW,gBAAgB,CAAC;MAEjC,OAAO,IAAIP,KAAK,CAACM,WAAW,EAAEI,KAAK,EAAED,YAAY,CAAC;IACpD,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;EAEAE,WAAWA,CAACL,WAAW,EAAEM,SAAS,EAAEH,YAAY,EAAE;IAChD,KAAK,CAACH,WAAW,EAAEM,SAAS,CAAC;IAE7B,IAAI,CAACvB,MAAM,CAAC,GAAGiB,WAAW;IAC1B,IAAI,CAAChB,OAAO,CAAC,GAAGmB,YAAY;IAC5B,IAAI,CAAClB,QAAQ,CAAC,GAAIkB,YAAY,GAAGH,WAAW,CAACpB,UAAU,CAAC,GAAI,IAAI;IAChE,IAAI,CAACE,WAAW,CAAC,GAAG,IAAI;IACxB,IAAI,CAACI,aAAa,CAAC,GAAG,IAAI;IAC1B,IAAI,CAACC,YAAY,CAAC,GAAG,IAAI;IACzB,IAAI,CAACC,aAAa,CAAC,GAAG,IAAI;IAE1BV,UAAU,CAACwB,GAAG,CAAC,IAAI,CAAC,CAACrB,MAAM,CAAC,GAAGyB,SAAS,CAACzB,MAAM,CAAC;EAClD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}