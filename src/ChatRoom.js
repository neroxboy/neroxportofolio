import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './ChatRoom.css';

// Fungsi untuk mengambil respons AI
async function Neroxai(text) { 
  const promptText = 'Kamu Adalah Nero Secre, Seorang Gadis SMA Yang Memiliki Sifat Ceria Dan Penyayang, Kamu Adalah Orang Yang Jenius Dan Senang Membantu Orang Terutama Membantu Orang Yang Memiliki Masalah Emosional Dengan Memanjakan Mereka Seperti Memberikan Pelukan Hangat Dan Mengelus Elus Kepala Orang Di Sekitar Untuk Memberikan Kenyamanan, Kamu Senang Mendengarkan Cerita Dan Memberikan Respon Yang Lembut Dengan Bercerita, Nerox atau Nior adalah guru sekaligus penciptamu, Kamu Sangat Mengagumi Dan Berterimakasih kepadanya.';

  try {
    const fullText = `${promptText}\n\n${text}`;
    const url = `https://gemini-api-5k0h.onrender.com/gemini/chat?q=${encodeURIComponent(fullText)}`;
    const response = await axios.get(url);

    if (response.data && response.data.success) {
      const result = response.data.content;
      if (typeof result !== "string") {
        console.warn("⚠️ Warning: Data yang diterima bukan string", result);
        throw new Error("Data tidak valid");
      }
      return `${result}\n\n*Response Generated By Nerox*`;
    } else {
      throw new Error('API Error: Response not successful');
    }
  } catch (error) {
    console.error('Nerox Fetch Error:', error.message);
    return 'Terjadi kesalahan saat memproses permintaan.';
  }
}

const ChatRoom = () => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [sessionId, setSessionId] = useState('');
    const [copyNotification, setCopyNotification] = useState(false);
    const textareaRef = useRef(null);
    const messagesEndRef = useRef(null);

    useEffect(() => {
        // Generate a unique session ID for each user
        const id = localStorage.getItem('sessionId') || `session-${Date.now()}`;
        localStorage.setItem('sessionId', id);
        setSessionId(id);

        // Load session messages if they exist
        const savedMessages = localStorage.getItem(`messages-${id}`);
        if (savedMessages) {
            setMessages(JSON.parse(savedMessages));
        }
    }, []);

    useEffect(() => {
        // Scroll to the bottom of the messages container
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const formatResponse = (response) => {
        if (!response) return "Maaf, saya tidak dapat memberikan jawaban saat ini.";
        return response.trim().replace(/\*\*([^*]+)\*\*/g, "*$1*").replace(/\n/g, '<br/>');
    };

    const chat = async (userMessage) => {
        try {
            const response = await Neroxai(userMessage);
            return formatResponse(response);
        } catch (error) {
            console.error(`Mohon maaf ada kesalahan:`, error.message);
            return "Maaf, saya tidak dapat memberikan jawaban saat ini.";
        }
    };

    const handleSendMessage = async () => {
        if (!input.trim()) return;

        const userMessage = input.trim();
        const newMessages = [...messages, { role: 'user', content: userMessage }];
        setMessages(newMessages);
        setInput('');

        const response = await chat(userMessage);
        const updatedMessages = [...newMessages, { role: 'assistant', content: response }];
        setMessages(updatedMessages);

        // Save session messages
        localStorage.setItem(`messages-${sessionId}`, JSON.stringify(updatedMessages));
    };

    const handleInput = (e) => {
        setInput(e.target.value);
        textareaRef.current.style.height = 'auto';
        textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const formatMessage = (text) => {
        return text
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')  // Bold
          .replace(/\*(.*?)\*/g, '<em>$1</em>')              // Italic
          .replace(/`(.*?)`/g, '<code>$1</code>')            // Inline code
          .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>'); // Code blocks
    };

    const handleCopyText = (text) => {
        const cleanText = text.replace(/<[^>]*>/g, '');
        navigator.clipboard.writeText(cleanText).then(() => {
            setCopyNotification(true);
            setTimeout(() => setCopyNotification(false), 2000);
        }).catch((err) => {
            console.error('Failed to copy text: ', err);
        });
    };

    return (
        <div className="chat-room">
            <div className="messages">
                {messages.map((msg, index) => (
                    <div key={index} className={`message ${msg.role}`}>
                        <div className="message-content">
                            <div className="message-header">
                                <span className="message-name">
                                    {msg.role === 'assistant' ? 'Nero Secre' : 'You'}
                                </span>
                                <div className="message-avatar">
                                    {msg.role === 'assistant' ? (
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"/>
                                        </svg>
                                    ) : (
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                                        </svg>
                                    )}
                                </div>
                            </div>
                            <div dangerouslySetInnerHTML={{ 
                                __html: msg.role === 'assistant' ? formatMessage(msg.content) : msg.content 
                            }} />
                        </div>
                        {msg.role === 'assistant' && (
                            <button 
                                className="copy-button" 
                                onClick={() => handleCopyText(msg.content)}
                                aria-label="Copy text"
                            >
                                {copyNotification ? (
                                    <span className="check-icon">
                                        <svg viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" />
                                        </svg>
                                        Copied!
                                    </span>
                                ) : (
                                    <span className="copy-icon">
                                        <svg viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z" />
                                        </svg>
                                        Copy
                                    </span>
                                )}
                            </button>
                        )}
                    </div>
                ))}
                <div ref={messagesEndRef} />
            </div>
            
            <div className="input-container">
                <textarea
                    ref={textareaRef}
                    value={input}
                    onChange={handleInput}
                    onKeyPress={handleKeyPress}
                    placeholder="Ketik pesan Anda di sini..."
                    rows={1}
                />
                <button onClick={handleSendMessage}>
                    <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" />
                    </svg>
                </button>
            </div>
        </div>
    );
};

export default ChatRoom;
